<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>auhanjie&#39;s Blog</title>
  
  <subtitle>ad astra per aspera</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://auhanjie.github.io/"/>
  <updated>2018-09-08T12:06:39.960Z</updated>
  <id>http://auhanjie.github.io/</id>
  
  <author>
    <name>auhanjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>service和serviceImpl的选择</title>
    <link href="http://auhanjie.github.io/2018/09/08/service%E5%92%8CserviceImpl%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://auhanjie.github.io/2018/09/08/service和serviceImpl的选择/</id>
    <published>2018-09-08T01:30:00.000Z</published>
    <updated>2018-09-08T12:06:39.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="service和serviceImpl的选择"><a href="#service和serviceImpl的选择" class="headerlink" title="service和serviceImpl的选择"></a>service和serviceImpl的选择</h1><p>有些同行公司代码风格使用service层=service接口+serviceImpl实现类；</p><p>而有的同行公司的代码风格是service层=service类；</p><p>网上有人说是因为当项目的业务逻辑简单时，可选择service层=service类；</p><p>当项目的业务复杂时，可选择service层=service接口+serviceImpl实现类；</p><p>至于复杂和简单的度得自己把握；</p><p>今天在看 spring实战（第4版）的时候，看到解释</p><p>如下：</p><p>spring鼓励应用程序的各个层以接口的形式暴露功能，在service层，可以使用service接口+serviceImple实现类，也可以使用service类，但考虑到“接口时实现松耦合的关键”，所以更加推荐使用</p><p>service接口+serviceImple实现类的方式来写service层代码。</p><p>核心是“松耦合”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;service和serviceImpl的选择&quot;&gt;&lt;a href=&quot;#service和serviceImpl的选择&quot; class=&quot;headerlink&quot; title=&quot;service和serviceImpl的选择&quot;&gt;&lt;/a&gt;service和serviceImpl的
      
    
    </summary>
    
      <category term="个人观点" scheme="http://auhanjie.github.io/categories/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
    
      <category term="个人观点" scheme="http://auhanjie.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>longest-substring-without-repeating-characters</title>
    <link href="http://auhanjie.github.io/2018/09/04/leetcode-longest-substring-without-repeating-characters/"/>
    <id>http://auhanjie.github.io/2018/09/04/leetcode-longest-substring-without-repeating-characters/</id>
    <published>2018-09-04T01:26:00.000Z</published>
    <updated>2019-06-03T15:31:08.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Given a string, find the length of the longest substring without   repeating characters. For example, the longest substring without   repeating letters for “abcabcbb” is “abc”, which   the length is 3. For “bbbbb” the longest substring is   “b”, with the length of 1. </p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">unordered_map</span> &lt;<span class="hljs-keyword">char</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> leftBound=<span class="hljs-number">0</span>,Max=<span class="hljs-number">0</span>;</span><br><span class="line">         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">             <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.find(s[i]) != <span class="hljs-built_in">map</span>.end())</span><br><span class="line">                    leftBound = max(leftBound,<span class="hljs-built_in">map</span>[s[i]]+<span class="hljs-number">1</span>);</span><br><span class="line">                 Max = max(Max,i-leftBound+<span class="hljs-number">1</span>);</span><br><span class="line">                 <span class="hljs-built_in">map</span>[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">//新建一个map进行存储char</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        <span class="hljs-keyword">int</span> leftBound = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="hljs-keyword">char</span>  c = s.charAt(i);</span><br><span class="line">            <span class="hljs-comment">//窗口左边可能为下一个char，或者不变</span></span><br><span class="line">            leftBound = Math.max(leftBound,(map.containsKey(c))? map.get(c)+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);</span><br><span class="line">            max = Math.max(max, i-leftBound+<span class="hljs-number">1</span>);<span class="hljs-comment">//当前窗口长度</span></span><br><span class="line">            map.put(c,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> max;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;Given a string, find the length of the longest substring without   repeating characters. For example, the longest substring without   repeating letters for “abcabcbb” is “abc”, which   the length is 3. For “bbbbb” the longest substring is   “b”, with the length of 1. &lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;unordered_map&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; leftBound=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,Max=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;.find(s[i]) != &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;.end())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    leftBound = max(leftBound,&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;[s[i]]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 Max = max(Max,i-leftBound+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;[s[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Max;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>median-of-two-sorted-arrays</title>
    <link href="http://auhanjie.github.io/2018/09/03/leetcode-median-of-two-sorted-arrays/"/>
    <id>http://auhanjie.github.io/2018/09/03/leetcode-median-of-two-sorted-arrays/</id>
    <published>2018-09-03T01:00:00.000Z</published>
    <updated>2019-06-03T15:31:16.901Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">链接：https:<span class="hljs-comment">//www.nowcoder.com/questionTerminal/82c11b9392b14f3abfbf257f79a76025</span></span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kthMin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n &lt; m)</span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(B, n, A, m, k);</span><br><span class="line">        <span class="hljs-keyword">if</span>(m == <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> B[k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> min(A[<span class="hljs-number">0</span>], B[<span class="hljs-number">0</span>]);</span><br><span class="line">        <span class="hljs-keyword">int</span> pa = min(m, k / <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">int</span> pb = k - pa;</span><br><span class="line">        <span class="hljs-keyword">if</span>(A[pa - <span class="hljs-number">1</span>] == B[pb - <span class="hljs-number">1</span>]) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> A[pa - <span class="hljs-number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[pa - <span class="hljs-number">1</span>] &lt; B[pb - <span class="hljs-number">1</span>])</span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(A + pa, m - pa, B, n, k - pa);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(A, m, B + pb, n - pb, k - pb);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(m &lt;= <span class="hljs-number">0</span> &amp;&amp; n &lt;= <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> (kthMin(A, m, B, n, (m + n + <span class="hljs-number">2</span>) &gt;&gt; <span class="hljs-number">1</span>) + kthMin(A, m, B, n, (m + n + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> m = A.length, n = B.length;</span><br><span class="line">        <span class="hljs-comment">// 不论总数是奇数还是偶数，以l和r为下标的两数的均值都是medium</span></span><br><span class="line">        <span class="hljs-keyword">int</span> l = (m + n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> r = (m + n + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">return</span> (getkth(A, <span class="hljs-number">0</span>, B, <span class="hljs-number">0</span>, l) + getkth(A, <span class="hljs-number">0</span>, B, <span class="hljs-number">0</span>, r)) / <span class="hljs-number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getkth</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span> aStart, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span> bStart, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (aStart &gt;= A.length)</span><br><span class="line">            <span class="hljs-keyword">return</span> B[bStart + k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (bStart &gt;= B.length)</span><br><span class="line">            <span class="hljs-keyword">return</span> A[aStart + k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> Math.min(A[aStart], B[bStart]);</span><br><span class="line">        <span class="hljs-keyword">int</span> aMin = Integer.MAX_VALUE, bMin = Integer.MAX_VALUE;</span><br><span class="line">        <span class="hljs-keyword">if</span> (aStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; A.length)</span><br><span class="line">            aMin = A[aStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (bStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; B.length)</span><br><span class="line">            bMin = B[bStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">if</span> (aMin &lt; bMin)</span><br><span class="line">            <span class="hljs-keyword">return</span> getkth(A, aStart + k / <span class="hljs-number">2</span>, B, bStart, k - k / <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> getkth(A, aStart, B, bStart + k / <span class="hljs-number">2</span>, k - k / <span class="hljs-number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;链接：https:&lt;span class=&quot;hljs-comment&quot;&gt;//www.nowcoder.com/questionTerminal/82c11b9392b14f3abfbf257f79a76025&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：牛客网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;kthMin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; B[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(B, n, A, m, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; B[k - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min(A[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], B[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; pa = min(m, k / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; pb = k - pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == B[pb - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt; B[pb - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(A + pa, m - pa, B, n, k - pa);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(A, m, B + pb, n - pb, k - pb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; B[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; n &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (kthMin(A, m, B, n, (m + n + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + kthMin(A, m, B, n, (m + n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) / &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>add-two-numbers</title>
    <link href="http://auhanjie.github.io/2018/09/02/leetcode-add-two-numbers/"/>
    <id>http://auhanjie.github.io/2018/09/02/leetcode-add-two-numbers/</id>
    <published>2018-09-02T01:00:00.000Z</published>
    <updated>2019-06-03T15:30:58.419Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p><strong>Input:</strong> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br><strong>Output:</strong> 7 -&gt; 0 -&gt; 8</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode *next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function">ListNode *<span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, carry=<span class="hljs-number">0</span>, sum=<span class="hljs-number">0</span>;</span><br><span class="line">        ListNode *h=<span class="hljs-literal">NULL</span>, **t=&amp;h;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">while</span> (l1!=<span class="hljs-literal">NULL</span> || l2!=<span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">            x = getValueAndMoveNext(l1);</span><br><span class="line">            y = getValueAndMoveNext(l2);</span><br><span class="line">            </span><br><span class="line">            sum = carry + x + y;</span><br><span class="line">            </span><br><span class="line">            ListNode *node = <span class="hljs-keyword">new</span> ListNode(sum%<span class="hljs-number">10</span>);</span><br><span class="line">            *t = node;</span><br><span class="line">            t = (&amp;node-&gt;next);</span><br><span class="line">            </span><br><span class="line">            carry = sum/<span class="hljs-number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            ListNode *node = <span class="hljs-keyword">new</span> ListNode(carry%<span class="hljs-number">10</span>);</span><br><span class="line">            *t = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValueAndMoveNext</span><span class="hljs-params">(ListNode* &amp;l)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l != <span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">            x = l-&gt;val;</span><br><span class="line">            l = l-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="hljs-comment"> *         val = x;</span></span><br><span class="line"><span class="hljs-comment"> *         next = null;</span></span><br><span class="line"><span class="hljs-comment"> *     &#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span> || q != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = (p != <span class="hljs-keyword">null</span>) ? p.val : <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> y = (q != <span class="hljs-keyword">null</span>) ? q.val : <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="hljs-number">10</span>;</span><br><span class="line">        curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="hljs-keyword">if</span> (p != <span class="hljs-keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q != <span class="hljs-keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="hljs-keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;br&gt;&lt;strong&gt;Output:&lt;/strong&gt; 7 -&amp;gt; 0 -&amp;gt; 8&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * struct ListNode &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     int val;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     ListNode *next;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     ListNode(int x) : val(x), next(NULL) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;ListNode *&lt;span class=&quot;hljs-title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ListNode *l1, ListNode *l2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, y=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, carry=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sum=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode *h=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, **t=&amp;amp;h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (l1!=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; || l2!=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = getValueAndMoveNext(l1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            y = getValueAndMoveNext(l2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum = carry + x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ListNode *node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ListNode(sum%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *t = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = (&amp;amp;node-&amp;gt;next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            carry = sum/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (carry &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ListNode *node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ListNode(carry%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *t = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getValueAndMoveNext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ListNode* &amp;amp;l)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = l-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l = l-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>two-sum</title>
    <link href="http://auhanjie.github.io/2018/09/01/leetcode-two-sum/"/>
    <id>http://auhanjie.github.io/2018/09/01/leetcode-two-sum/</id>
    <published>2018-09-01T01:26:00.000Z</published>
    <updated>2018-09-17T12:23:34.180Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p><p>You may assume that each input would have exactly one solution.</p><p><strong>Input:</strong> numbers={2, 7, 11, 15}, target=9<br><strong>Output:</strong> index1=1, index2=2</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; twoSum(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;numbers, <span class="hljs-keyword">int</span> target) &#123;</span><br><span class="line">       <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;numbers.size();i++)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (m.find(numbers[i])==m.end() ) &#123; </span><br><span class="line">                m[target - numbers[i]] =i;</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                result.push_back(m[numbers[i]]+<span class="hljs-number">1</span>);</span><br><span class="line">                result.push_back(i+<span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="hljs-keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;Given an array of integers, find two numbers such that they ad
      
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>java面试</title>
    <link href="http://auhanjie.github.io/2018/08/23/java/"/>
    <id>http://auhanjie.github.io/2018/08/23/java/</id>
    <published>2018-08-23T01:26:00.000Z</published>
    <updated>2018-08-27T23:50:15.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Spring-Bean-的生命周期"><a href="#1、Spring-Bean-的生命周期" class="headerlink" title="1、Spring Bean 的生命周期"></a>1、Spring Bean 的生命周期</h4><ol><li><p>Spring 容器 从 XML 文件中读取 bean 的定义，并实例化 bean。</p></li><li><p>Spring 根据 bean 的定义填充所有的属性。</p></li><li><p>如果 bean 实现了 BeanNameAware 接口， Spring 传递 bean 的 ID 到setBeanName 方法。</p></li><li><p>如果 Bean 实现了 BeanFactoryAware 接口， Spring 传递 beanfactory 给setBeanFactory 方法。</p></li><li><p>如果有任何与bean相关联的BeanPostProcessors ， Spring 会 在postProcesserBeforeInitialization()方法内调用它们。</p></li><li><p>如果 bean 实现 IntializingBean 了，调用它的 afterPropertySet 方法，如果 bean</p><p>声明了初始化方法，调用此初始化方法。</p></li><li><p>如 果 有BeanPostProcessors和bean关 联 ， 这 些bean的postProcessAfterInitialization() 方法将被调用。</p></li><li>如果 bean 实现了 DisposableBean，它将调用 destroy()方法。</li></ol><h4 id="2、反射机制"><a href="#2、反射机制" class="headerlink" title="2、反射机制"></a>2、反射机制</h4><p>Spring 是依赖反射机制的，</p><p>那到底什么是反射机制呢： 反射机制就是利用（dom4j=java 反射机制） userBean ub = Class.forName（com.bean.<em>*</em>）这里是 com 全路径 所以在 Spring 配置文件中 bean 的 id 属性和 class 属性中要写全路径。 </p><p><bean id="adminBean" class="com.service.AdminBean"> <property name="name" value="乐乐"></property> <property name="id" value="1"></property></bean></p><h4 id="3、HashSet底层实现"><a href="#3、HashSet底层实现" class="headerlink" title="3、HashSet底层实现"></a>3、HashSet底层实现</h4><p>对于HashSet而言，它是基于HashMap实现的，HashSet底层使用HashMap来保存所有元素，因此HashSet 的实现比较简单，相关HashSet的操作，基本上都是直接调用底层HashMap的相关方法来完成，在HashSet中，元素都存到HashMap键值对的Key上面，而Value时有一个统一的值<code>private static final Object PRESENT = new Object();。</code></p><h4 id="4、TreeSet-底层源码有看过吗？"><a href="#4、TreeSet-底层源码有看过吗？" class="headerlink" title="4、TreeSet 底层源码有看过吗？"></a>4、TreeSet 底层源码有看过吗？</h4><p>类似于HashMap和HashSet之间的关系，HashSet底层依赖于HashMap实现，TreeSet底层则采用一个NavigableMap来保存TreeSet集合的元素。但实际上，由于NavigableMap只是一个接口，<code>因此底层依然是使用TreeMap来包含Set集合中的所有元素</code>。</p><h4 id="5、重载和重写区别"><a href="#5、重载和重写区别" class="headerlink" title="5、重载和重写区别"></a>5、重载和重写区别</h4><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实 现的是运行时的多态性。 扩展；</p><p>重载(Overloading)</p><p>重载的时候，方法名要一样，但是参数类型和个数不一样，返回值类型可以相同也可以</p><p>不相同。无法以返回型别作为重载函数的区分标准。</p><p>重写（Overriding）</p><p>父类与子类之间的多态性，对父类的函数进行重新定义。如果在子类中定义某方法与其 父类有相同的名称和参数，我们说该方法被重写 (Overriding)。在 Java 中，子类可继承父类 中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法， 而是想作一定的修改，这就需要采用方法的重写。 方法重写又称方法覆盖</p><p>（2）若子类中的方法与父类中的某一方法具有相同的方法名、返回类型和参数表，则 新方法将覆盖原有的方法。 如需父类中原有的方法，可使用 super 关键字，该关键字引用了当前类的父类。</p><p>（3）子类函数的访问修饰权限不能少于父类的；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、Spring-Bean-的生命周期&quot;&gt;&lt;a href=&quot;#1、Spring-Bean-的生命周期&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Bean 的生命周期&quot;&gt;&lt;/a&gt;1、Spring Bean 的生命周期&lt;/h4&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="java面试" scheme="http://auhanjie.github.io/categories/java%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java面试" scheme="http://auhanjie.github.io/tags/java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://auhanjie.github.io/2018/08/15/resume/"/>
    <id>http://auhanjie.github.io/2018/08/15/resume/</id>
    <published>2018-08-15T13:37:00.000Z</published>
    <updated>2019-06-03T15:20:24.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><ul><li>手机：1820206<em>*</em></li><li>Email：*@gmail.com</li><li>QQ：42417658*</li></ul><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul><li>黄汉杰/男/1991 </li><li>本科/广州大学计算机系</li><li>工作年限：2年</li><li>技术博客：<a href="http://auhanjie.github.io">http://auhanjie.github.io</a> </li><li>Github：<a href="http://github.com/auhanjie" target="_blank" rel="noopener">http://github.com/auhanjie</a></li><li>期望职位：JAVA开发程序员</li><li>期望薪资：税前月薪7k，特别喜欢的公司可例外</li><li>期望城市：珠海，深圳，广州</li><li>获奖证经历：2016-2017 全国大学英语四级考试514分/2016-2017 获得过校级一等奖学金，并被评为优秀大学生</li></ul><h1 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h1><p>2015/09~2017/06，广州大学 计算机科学与技术专业，获得学士学位<br>2010/09~2013/06，广东科学技术职业学院 软体技术专业，大专毕业</p><h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><p>2018/03~2018/06 Java后台开发工程师 珠海时杰信息科技有限公司 负责后台系统的API开发、实现和维护，负责和前端开发对接。</p><p>2017/09~2017/11 Java后台开发工程师 珠海启裕软件科技有限公司 负责后台系统的API开发、实现和维护，负责和前端开发对接。</p><p>2016/09~2016/10 实习生 广州静远科技开发有限公司 从事FOXTABLE软体开发工作，开发能耗统计分析系统，认真完成项目中的每一项任务。 </p><p>2013/07~2014/07 Java软件开发工程师 易达通网络科技公司 从事Linux环境下的Java软件软件开发工作，工作期间，认真完成项目中的每一项任务。</p><p>2013/02~2013/06 Java Web实习生 珠海联迪软体系统有限公司 从事Java web开发，认真完成项目中的每一项任务。实习期间，参与开发清远市信访前后端系统。</p><h2 id="易达通网络科技公司（-2013年7月-2014年7月-）"><a href="#易达通网络科技公司（-2013年7月-2014年7月-）" class="headerlink" title="易达通网络科技公司（ 2013年7月 ~ 2014年7月 ）"></a>易达通网络科技公司（ 2013年7月 ~ 2014年7月 ）</h2><h3 id="黑龙江教育标引平台"><a href="#黑龙江教育标引平台" class="headerlink" title="黑龙江教育标引平台"></a>黑龙江教育标引平台</h3><p>该项目对书籍进行标引管理，提供标引信息可以获取书籍信息，而且可以通过pdf,equb,txt等自动识别标引进行标注，让教育后台管理人员更加易用的管理。</p><p>此系统整体采用MVC模式的Spring框架，持久层使用的是Mybatis实现，数据源利用的是SpringIoC注入；模型层严格按照JavaBean规范要求；用Spring进行流程的控制，并实现了shiro权限控制管理，采用Redis 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势（查找和操作的时间快）。数据库采用Mysql，适当建立索引机制，进行优化查询。而且采用MongoDB，它包括了一个可以显示数据库中每个操作性能特点的数据库分析器。通过这个分析器你可以找到比预期慢的查询(或写操作);利用这一信息，比如，可以确定是否需要添加索引。</p><h3 id="广州银联的代收付平台系统"><a href="#广州银联的代收付平台系统" class="headerlink" title="广州银联的代收付平台系统"></a>广州银联的代收付平台系统</h3><p>在本项目中本人是高效的执行者角色。本人独立完成了整个项目的数据库索引优化工作，并参与开发与测试等环节中。作为核心程序员，我还完成了系统权限管理、报表查询设计的开发工作。</p><p>此系统整体采用MVC模式的Spring框架，持久层使用的是Spring的HibernateTemplate实现，数据源利用的是SpringIoC注入；模型层严格按照JavaBean规范要求；用Spring进行流程的控制，并实现了国际化，JSP用纯标签进行页面显示。为达到用户名唯一的目的用户注册采用Ajax技术进行后台校验。运用SpringIoC的注入对各层解耦，大大提高了程序的可扩展性，易于维护。本项目采用maven项目管理和构建自动化工具。数据库采用oracle11g开发设计。</p><p>通过拦截器实现了系统权限管理功能，提高安全性。同时通过拦截器记录请求信息，以便进行信息监控和信息统计；检查权限，比如监测请求进入之前是否登录，如果没有可以返回登录页面；监控性能，比如可以通过拦截器记录请求进入处理器的开始时间，在处理后再记录结束时间，由此可以统计该请求的处理时间。Hibernatre的优化，结合数据库，调整批处理的条数，比如batch-size参数是设定每次从数据库中取出的记录条数，一般设置为30,50,100，一般的说法是Oracle 数据库的JDBC驱动的默认值是15，当设置为30或50时，性能就明显提升,如果继续增长，超过100，则性能提升就不明显了。</p><h3 id="SMS-短信收发平台系统"><a href="#SMS-短信收发平台系统" class="headerlink" title="SMS-短信收发平台系统"></a>SMS-短信收发平台系统</h3><p>该系统主要功能是SMS是个集多种短讯业务管理功能于一体的多功能短讯服务运营平台，具有稳定可靠、模组化、开放性、灵活性等特点。Web SMS系统无需安装任何软体，即可轻松管理客户名单及发送短讯，既可加强与客户的联系，可减低市场推广及行政上的资源及成本，是最佳的通讯及宣传工具。2013年，我参与了SMS-短信收发平台系统的开发。</p><p>作为核心程序员之一，我不但完成了发送短信界面设计、权限控制和报表查询的开发工作，更提出了高效的查询下拉列表插件，通过个性化提升了操作员查询体验。 </p><p>该项目对Hibernate进行优化，适当地建立索引，如果数据量很大就少用关联，或者适当地建分区。在适合的的时间点清除缓存，一般会有大量的数据保存在session的一级缓存中，如果缓存太大时就会拖累性能，所以在必要时使用session.Clear()或者session.Erict(Object)清除全部缓存或某个对象。通过优化一对多的映射关系，提高性能，通过设置inverse在多的一方优化查询操作。遇到高并发和大访问量的情况，一、减少http请求（比如Js合并，css合并，图片合并，虽然文件大了，但是减少请求）二、添加异步请求（比如不太重要的东西先不展示，用户需要的时候再放一些事件，jQuery等添加异步请求获取）三、启用游览器缓冲和文件压缩。四、CDN加速（把前端的文件，前端的资源全部放到cdn中，用户就近访问，从而提高访问速度，从一定意义也解决了流量不够用的问题）。</p><h3 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h3><p>easylink好易联支付平台系统<br>LBN易联通支付平台系统<br>SMC商户管理平台系统<br>能耗统计分析系统项⽬<br>清远市信访管理平台系统</p><h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：JSP/PHP/HTML5</li><li>系统框架：Mybatis/Hibernate/Struts2/StringMvc/String/Shiro/ThinkPHP</li><li>前端框架：Bootstrap/Jquery</li><li>数据库相关：MySQL/Oracle</li><li>版本管理、文档和自动化部署工具：Svn/Git/Maven</li><li>单元测试：Junit4</li></ul><h1 id="个⼈评价"><a href="#个⼈评价" class="headerlink" title="个⼈评价"></a>个⼈评价</h1><p>谦虚、谨慎而富有挑战精神，希望您能给我一个展示自我的机会。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;联系方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;手机：1820206&lt;em&gt;*&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Email：*@gmail.com&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="个人简历" scheme="http://auhanjie.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
    
      <category term="个人简历" scheme="http://auhanjie.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>7-28 搜索树判断 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-28/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-28/</id>
    <published>2018-05-06T02:04:00.000Z</published>
    <updated>2019-06-30T04:28:15.173Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-28-搜索树判断-25-分"><a href="#7-28-搜索树判断-25-分" class="headerlink" title="7-28 搜索树判断 (25 分)"></a>7-28 搜索树判断 (25 分)</h4><p>对于二叉搜索树，我们规定任一结点的左子树仅包含严格小于该结点的键值，而其右子树包含大于或等于该结点的键值。如果我们交换每个节点的左子树和右子树，得到的树叫做镜像二叉搜索树。</p><p>现在我们给出一个整数键值序列，请编写程序判断该序列是否为某棵二叉搜索树或某镜像二叉搜索树的前序遍历序列，如果是，则输出对应二叉树的后序遍历序列。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行包含一个正整数$N$（≤1000），第二行包含$N$个整数，为给出的整数键值序列，数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出的第一行首先给出判断结果，如果输入的序列是某棵二叉搜索树或某镜像二叉搜索树的前序遍历序列，则输出<code>YES</code>，否侧输出<code>NO</code>。如果判断结果是<code>YES</code>，下一行输出对应二叉树的后序遍历序列。数字间以空格分隔，但行尾不能有多余的空格。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 5 7 10 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">5 7 6 8 11 10 8</span><br></pre></td></tr></table></figure><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">8 6 8 5 10 9 11</span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">tree</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> data;</span><br><span class="line">    tree lchild;</span><br><span class="line">    tree rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;   <span class="hljs-comment">//控制最后一个输出后面没有空格</span></span><br><span class="line"><span class="hljs-keyword">int</span> flag1 ;     <span class="hljs-comment">//如果不是二叉搜索树返回1</span></span><br><span class="line"><span class="hljs-keyword">int</span> flag2 ;     <span class="hljs-comment">//如果不是二叉镜像搜索树返回1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( tree t)</span></span>;</span><br><span class="line"><span class="hljs-function">tree <span class="hljs-title">Find</span> <span class="hljs-params">( <span class="hljs-keyword">int</span> pre[],<span class="hljs-keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="hljs-function">tree <span class="hljs-title">FindMirror</span><span class="hljs-params">( <span class="hljs-keyword">int</span> pre[],<span class="hljs-keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> len;</span><br><span class="line">    <span class="hljs-keyword">int</span> pre[<span class="hljs-number">1005</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    tree t,tm;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;len);</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;pre[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t = Find( pre,len);</span><br><span class="line">    tm = FindMirror( pre,len );</span><br><span class="line">    <span class="hljs-keyword">if</span>( t &amp;&amp; !flag1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//树不为空并且是二叉搜索树</span></span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"YES\n"</span>);</span><br><span class="line">        Print( t );</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( tm &amp;&amp; !flag2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//树不为空并且是二叉镜像搜索树</span></span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"YES\n"</span>);</span><br><span class="line">        Print( tm );</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"NO\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">tree <span class="hljs-title">Find</span> <span class="hljs-params">( <span class="hljs-keyword">int</span> pre[],<span class="hljs-keyword">int</span> len)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( !len ) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    tree temp = (tree) <span class="hljs-built_in">malloc</span>( <span class="hljs-keyword">sizeof</span>( struct TNode));</span><br><span class="line">    temp-&gt;data = *pre;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( pre[i] &gt;= temp-&gt;data)</span><br><span class="line">            <span class="hljs-comment">//寻找右子树</span></span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>( j=i; j&lt;len; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( pre[j] &lt; temp-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//右子树中有小于根结点的值，不是二叉搜索树</span></span><br><span class="line">            flag1 = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;lchild = Find( pre+<span class="hljs-number">1</span>, i<span class="hljs-number">-1</span>);</span><br><span class="line">    temp-&gt;rchild = Find( pre+i, len-i);</span><br><span class="line">    <span class="hljs-keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">tree <span class="hljs-title">FindMirror</span><span class="hljs-params">( <span class="hljs-keyword">int</span> pre[],<span class="hljs-keyword">int</span> len)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//镜像树，左子树大于根大于右子树</span></span><br><span class="line">    <span class="hljs-keyword">int</span> i,j;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( !len ) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    tree temp = (tree) <span class="hljs-built_in">malloc</span>( <span class="hljs-keyword">sizeof</span>( struct TNode));</span><br><span class="line">    temp-&gt;data = *pre;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( pre[i] &lt; temp-&gt;data)</span><br><span class="line">            <span class="hljs-comment">//寻找右子树</span></span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>( j=i; j&lt;len; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( pre[j] &gt;= temp-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//右子树中有大于等于根结点的值，不是二叉搜索树</span></span><br><span class="line">            flag2 = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;lchild = FindMirror( pre+<span class="hljs-number">1</span>, i<span class="hljs-number">-1</span>);</span><br><span class="line">    temp-&gt;rchild = FindMirror( pre+i, len-i);</span><br><span class="line">    <span class="hljs-keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( tree t)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( t )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//后序遍历</span></span><br><span class="line">        Print(t-&gt;lchild);</span><br><span class="line">        Print(t-&gt;rchild);</span><br><span class="line">        <span class="hljs-keyword">if</span>( !flag ) flag = <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,t-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-28-搜索树判断-25-分&quot;&gt;&lt;a href=&quot;#7-28-搜索树判断-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-28 搜索树判断 (25 分)&quot;&gt;&lt;/a&gt;7-28 搜索树判断 (25 分)&lt;/h4&gt;&lt;p&gt;对于二叉搜索树，我们规定任一结点的左子树仅包含严格小于该结点的键值，而其右子树包含大于或等于该结点的键值。如果我们交换每个节点的左子树和右子树，得到的树叫做镜像二叉搜索树。&lt;/p&gt;
&lt;p&gt;现在我们给出一个整数键值序列，请编写程序判断该序列是否为某棵二叉搜索树或某镜像二叉搜索树的前序遍历序列，如果是，则输出对应二叉树的后序遍历序列。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行包含一个正整数$N$（≤1000），第二行包含$N$个整数，为给出的整数键值序列，数字间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;输出的第一行首先给出判断结果，如果输入的序列是某棵二叉搜索树或某镜像二叉搜索树的前序遍历序列，则输出&lt;code&gt;YES&lt;/code&gt;，否侧输出&lt;code&gt;NO&lt;/code&gt;。如果判断结果是&lt;code&gt;YES&lt;/code&gt;，下一行输出对应二叉树的后序遍历序列。数字间以空格分隔，但行尾不能有多余的空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例1&quot;&gt;&lt;a href=&quot;#输入样例1&quot; class=&quot;headerlink&quot; title=&quot;输入样例1:&quot;&gt;&lt;/a&gt;输入样例1:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8 6 5 7 10 8 11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例1&quot;&gt;&lt;a href=&quot;#输出样例1&quot; class=&quot;headerlink&quot; title=&quot;输出样例1:&quot;&gt;&lt;/a&gt;输出样例1:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;YES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 7 6 8 11 10 8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例2&quot;&gt;&lt;a href=&quot;#输入样例2&quot; class=&quot;headerlink&quot; title=&quot;输入样例2:&quot;&gt;&lt;/a&gt;输入样例2:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8 6 8 5 10 9 11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例2&quot;&gt;&lt;a href=&quot;#输出样例2&quot; class=&quot;headerlink&quot; title=&quot;输出样例2:&quot;&gt;&lt;/a&gt;输出样例2:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NO&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-27 家谱处理 (30 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-27/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-27/</id>
    <published>2018-05-06T02:03:00.000Z</published>
    <updated>2019-06-30T04:26:25.582Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-27-家谱处理-30-分"><a href="#7-27-家谱处理-30-分" class="headerlink" title="7-27 家谱处理 (30 分)"></a>7-27 家谱处理 (30 分)</h4><p>人类学研究对于家族很感兴趣，于是研究人员搜集了一些家族的家谱进行研究。实验中，使用计算机处理家谱。为了实现这个目的，研究人员将家谱转换为文本文件。下面为家谱文本文件的实例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">John</span><br><span class="line">  Robert</span><br><span class="line">    Frank</span><br><span class="line">    Andrew</span><br><span class="line">  Nancy</span><br><span class="line">    David</span><br></pre></td></tr></table></figure><p>家谱文本文件中，每一行包含一个人的名字。第一行中的名字是这个家族最早的祖先。家谱仅包含最早祖先的后代，而他们的丈夫或妻子不出现在家谱中。每个人的子女比父母多缩进2个空格。以上述家谱文本文件为例，<code>John</code>这个家族最早的祖先，他有两个子女<code>Robert</code>和<code>Nancy</code>，<code>Robert</code>有两个子女<code>Frank</code>和<code>Andrew</code>，<code>Nancy</code>只有一个子女<code>David</code>。</p><p>在实验中，研究人员还收集了家庭文件，并提取了家谱中有关两个人关系的陈述语句。下面为家谱中关系的陈述语句实例：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">John is the parent of Robert</span><br><span class="line">Robert is a sibling of Nancy</span><br><span class="line">David is a descendant of Robert</span><br></pre></td></tr></table></figure><p>研究人员需要判断每个陈述语句是真还是假，请编写程序帮助研究人员判断。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出2个正整数<em>N</em>（2≤<em>N</em>≤100）和<em>M</em>（≤100），其中<em>N</em>为家谱中名字的数量，<em>M</em>为家谱中陈述语句的数量，输入的每行不超过70个字符。</p><p>名字的字符串由不超过10个英文字母组成。在家谱中的第一行给出的名字前没有缩进空格。家谱中的其他名字至少缩进2个空格，即他们是家谱中最早祖先（第一行给出的名字）的后代，且如果家谱中一个名字前缩进<em>k</em>个空格，则下一行中名字至多缩进<em>k</em>+2个空格。</p><p>在一个家谱中同样的名字不会出现两次，且家谱中没有出现的名字不会出现在陈述语句中。每句陈述语句格式如下，其中<code>X</code>和<code>Y</code>为家谱中的不同名字：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X is a child of Y</span><br><span class="line">X is the parent of Y</span><br><span class="line">X is a sibling of Y</span><br><span class="line">X is a descendant of Y</span><br><span class="line">X is an ancestor of Y</span><br></pre></td></tr></table></figure><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对于测试用例中的每句陈述语句，在一行中输出<code>True</code>，如果陈述为真，或<code>False</code>，如果陈述为假。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">6 5</span><br><span class="line">John</span><br><span class="line">  Robert</span><br><span class="line">    Frank</span><br><span class="line">    Andrew</span><br><span class="line">  Nancy</span><br><span class="line">    David</span><br><span class="line">Robert is a child of John</span><br><span class="line">Robert is an ancestor of Andrew</span><br><span class="line">Robert is a sibling of Nancy</span><br><span class="line">Nancy is the parent of Frank</span><br><span class="line">John is a descendant of Andrew</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">False</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> name[<span class="hljs-number">15</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> father[<span class="hljs-number">15</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> num;  <span class="hljs-comment">//空格数</span></span><br><span class="line">&#125; people[<span class="hljs-number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n,m;</span><br><span class="line">    <span class="hljs-keyword">char</span> temp[<span class="hljs-number">75</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> i,j,k;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    getchar();  </span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        people[i].num = <span class="hljs-number">0</span>; <span class="hljs-comment">//空格数初始化为0</span></span><br><span class="line">        gets(temp);</span><br><span class="line">        <span class="hljs-keyword">int</span> L = <span class="hljs-built_in">strlen</span>(temp);</span><br><span class="line">        <span class="hljs-keyword">for</span>( j=<span class="hljs-number">0</span>; j&lt;L; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>( temp[j]==<span class="hljs-string">' '</span>)</span><br><span class="line">                people[i].num++;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">strcpy</span>( people[i].name, temp+j);  <span class="hljs-comment">//复制空格以后的字符</span></span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span>( !people[i].num )</span><br><span class="line">            <span class="hljs-built_in">strcpy</span>( people[i].father,<span class="hljs-string">"root"</span>);  <span class="hljs-comment">//如果空格数为0则表示根</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>( k=i<span class="hljs-number">-1</span>; k&gt;=<span class="hljs-number">0</span>; k--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( people[i].num&gt; people[k].num)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">//从后往前寻找父节点</span></span><br><span class="line">                    <span class="hljs-built_in">strcpy</span>( people[i].father,people[k].name);</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">char</span> a[<span class="hljs-number">15</span>],b[<span class="hljs-number">15</span>],c[<span class="hljs-number">15</span>],d[<span class="hljs-number">15</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> temp1[<span class="hljs-number">15</span>],temp2[<span class="hljs-number">15</span>];</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %s %s %s %s %s"</span>,a,d,d,b,d,c);</span><br><span class="line">        <span class="hljs-keyword">if</span>( b[<span class="hljs-number">0</span>] == <span class="hljs-string">'c'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//X is a child of Y</span></span><br><span class="line">            <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].name,a))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].father,c))</span><br><span class="line">                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"True\n"</span>);</span><br><span class="line">                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"False\n"</span>);</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( b[<span class="hljs-number">0</span>] == <span class="hljs-string">'p'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//X is the parent of Y</span></span><br><span class="line">            <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].name,c))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].father,a))</span><br><span class="line">                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"True\n"</span>);</span><br><span class="line">                    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"False\n"</span>);</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( b[<span class="hljs-number">0</span>] == <span class="hljs-string">'s'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">// X is a sibling of Y</span></span><br><span class="line">            <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-comment">//寻找两个结点的父节点</span></span><br><span class="line">                <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].name,a))</span><br><span class="line">                    <span class="hljs-built_in">strcpy</span>(temp1,people[k].father);</span><br><span class="line">                <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].name,c))</span><br><span class="line">                    <span class="hljs-built_in">strcpy</span>(temp2,people[k].father);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>(temp1,temp2)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"True\n"</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"False\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( b[<span class="hljs-number">0</span>] == <span class="hljs-string">'d'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//X is a descendant of Y</span></span><br><span class="line">            <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].name,a))</span><br><span class="line"></span><br><span class="line">                    <span class="hljs-built_in">strcpy</span>(temp1,people[k].father);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">while</span>( <span class="hljs-built_in">strcmp</span>(temp1,c) &amp;&amp; <span class="hljs-built_in">strcmp</span>( temp1,<span class="hljs-string">"root"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">                    <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>(people[k].name,temp1))</span><br><span class="line">                        <span class="hljs-built_in">strcpy</span>( temp1,people[k].father);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>(temp1,<span class="hljs-string">"root"</span>))</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"False\n"</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"True\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( b[<span class="hljs-number">0</span>] == <span class="hljs-string">'a'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//X is an ancestor of Y</span></span><br><span class="line">            <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>( people[k].name,c))</span><br><span class="line"></span><br><span class="line">                    <span class="hljs-built_in">strcpy</span>(temp1,people[k].father);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">while</span>( <span class="hljs-built_in">strcmp</span>(temp1,a) &amp;&amp; <span class="hljs-built_in">strcmp</span>( temp1,<span class="hljs-string">"root"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">for</span>( k=<span class="hljs-number">0</span>; k&lt;n; k++)</span><br><span class="line">                    <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>(people[k].name,temp1))</span><br><span class="line">                        <span class="hljs-built_in">strcpy</span>( temp1,people[k].father);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>( !<span class="hljs-built_in">strcmp</span>(temp1,<span class="hljs-string">"root"</span>))</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"False\n"</span>);</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"True\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-27-家谱处理-30-分&quot;&gt;&lt;a href=&quot;#7-27-家谱处理-30-分&quot; class=&quot;headerlink&quot; title=&quot;7-27 家谱处理 (30 分)&quot;&gt;&lt;/a&gt;7-27 家谱处理 (30 分)&lt;/h4&gt;&lt;p&gt;人类学研究对于家族很感兴趣，于是研究人员搜集了一些家族的家谱进行研究。实验中，使用计算机处理家谱。为了实现这个目的，研究人员将家谱转换为文本文件。下面为家谱文本文件的实例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;John&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Robert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Frank&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Andrew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Nancy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    David&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;家谱文本文件中，每一行包含一个人的名字。第一行中的名字是这个家族最早的祖先。家谱仅包含最早祖先的后代，而他们的丈夫或妻子不出现在家谱中。每个人的子女比父母多缩进2个空格。以上述家谱文本文件为例，&lt;code&gt;John&lt;/code&gt;这个家族最早的祖先，他有两个子女&lt;code&gt;Robert&lt;/code&gt;和&lt;code&gt;Nancy&lt;/code&gt;，&lt;code&gt;Robert&lt;/code&gt;有两个子女&lt;code&gt;Frank&lt;/code&gt;和&lt;code&gt;Andrew&lt;/code&gt;，&lt;code&gt;Nancy&lt;/code&gt;只有一个子女&lt;code&gt;David&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在实验中，研究人员还收集了家庭文件，并提取了家谱中有关两个人关系的陈述语句。下面为家谱中关系的陈述语句实例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;John is the parent of Robert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Robert is a sibling of Nancy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;David is a descendant of Robert&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;研究人员需要判断每个陈述语句是真还是假，请编写程序帮助研究人员判断。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出2个正整数&lt;em&gt;N&lt;/em&gt;（2≤&lt;em&gt;N&lt;/em&gt;≤100）和&lt;em&gt;M&lt;/em&gt;（≤100），其中&lt;em&gt;N&lt;/em&gt;为家谱中名字的数量，&lt;em&gt;M&lt;/em&gt;为家谱中陈述语句的数量，输入的每行不超过70个字符。&lt;/p&gt;
&lt;p&gt;名字的字符串由不超过10个英文字母组成。在家谱中的第一行给出的名字前没有缩进空格。家谱中的其他名字至少缩进2个空格，即他们是家谱中最早祖先（第一行给出的名字）的后代，且如果家谱中一个名字前缩进&lt;em&gt;k&lt;/em&gt;个空格，则下一行中名字至多缩进&lt;em&gt;k&lt;/em&gt;+2个空格。&lt;/p&gt;
&lt;p&gt;在一个家谱中同样的名字不会出现两次，且家谱中没有出现的名字不会出现在陈述语句中。每句陈述语句格式如下，其中&lt;code&gt;X&lt;/code&gt;和&lt;code&gt;Y&lt;/code&gt;为家谱中的不同名字：&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;X is a child of Y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X is the parent of Y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X is a sibling of Y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X is a descendant of Y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X is an ancestor of Y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;对于测试用例中的每句陈述语句，在一行中输出&lt;code&gt;True&lt;/code&gt;，如果陈述为真，或&lt;code&gt;False&lt;/code&gt;，如果陈述为假。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;John&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Robert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Frank&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Andrew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Nancy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    David&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Robert is a child of John&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Robert is an ancestor of Andrew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Robert is a sibling of Nancy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Nancy is the parent of Frank&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;John is a descendant of Andrew&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;False&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-26 Windows消息队列 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-26/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-26/</id>
    <published>2018-05-06T02:02:00.000Z</published>
    <updated>2019-06-30T04:25:20.022Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-26-Windows消息队列-25-分"><a href="#7-26-Windows消息队列-25-分" class="headerlink" title="7-26 Windows消息队列 (25 分)"></a>7-26 Windows消息队列 (25 分)</h4><p>消息队列是Windows系统的基础。对于每个进程，系统维护一个消息队列。如果在进程中有特定事件发生，如点击鼠标、文字改变等，系统将把这个消息加到队列当中。同时，如果队列不是空的，这一进程循环地从队列中按照优先级获取消息。请注意优先级值低意味着优先级高。请编辑程序模拟消息队列，将消息加到队列中以及从队列中获取消息。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出正整数$N$（≤105），随后$N$行，每行给出一个指令——<code>GET</code>或<code>PUT</code>，分别表示从队列中取出消息或将消息添加到队列中。如果指令是<code>PUT</code>，后面就有一个消息名称、以及一个正整数表示消息的优先级，此数越小表示优先级越高。消息名称是长度不超过10个字符且不含空格的字符串；题目保证队列中消息的优先级无重复，且输入至少有一个<code>GET</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对于每个<code>GET</code>指令，在一行中输出消息队列中优先级最高的消息的名称和参数。如果消息队列中没有消息，输出<code>EMPTY QUEUE!</code>。对于<code>PUT</code>指令则没有输出。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">PUT msg1 5</span><br><span class="line">PUT msg2 4</span><br><span class="line">GET</span><br><span class="line">PUT msg3 2</span><br><span class="line">PUT msg4 4</span><br><span class="line">GET</span><br><span class="line">GET</span><br><span class="line">GET</span><br><span class="line">GET</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg2</span><br><span class="line">msg3</span><br><span class="line">msg4</span><br><span class="line">msg1</span><br><span class="line">EMPTY QUEUE!</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">node</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> mes[<span class="hljs-number">11</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> priority;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    node heap[<span class="hljs-number">100005</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> num;</span><br><span class="line">&#125; Heap;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Put</span><span class="hljs-params">()</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Get</span><span class="hljs-params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    Heap.heap[<span class="hljs-number">0</span>] = (node)<span class="hljs-built_in">malloc</span>( <span class="hljs-keyword">sizeof</span>(struct Node));</span><br><span class="line">    Heap.heap[<span class="hljs-number">0</span>]-&gt;priority = <span class="hljs-number">-1</span>;</span><br><span class="line">    Heap.num = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span>( n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">char</span> op[<span class="hljs-number">4</span>];</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,op);</span><br><span class="line">        <span class="hljs-keyword">switch</span>( op[<span class="hljs-number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'P'</span> :</span><br><span class="line">            Put();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'G'</span> :</span><br><span class="line">            Get();</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">default</span> :</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Put</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//读入数据，建立一个小顶堆</span></span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    node temp = ( node ) <span class="hljs-built_in">malloc</span>( <span class="hljs-keyword">sizeof</span>( struct Node));</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %d"</span>,temp-&gt;mes,&amp;temp-&gt;priority);</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=++Heap.num; Heap.heap[i/<span class="hljs-number">2</span>]-&gt;priority &gt; temp-&gt;priority; i=i/<span class="hljs-number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Heap.heap[i] = Heap.heap[i/<span class="hljs-number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    Heap.heap[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Get</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//输出数据，重建顶堆</span></span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( Heap.num&lt;<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"EMPTY QUEUE!\n"</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>,Heap.heap[<span class="hljs-number">1</span>]-&gt;mes);</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i*<span class="hljs-number">2</span>&lt;Heap.num; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&lt;Heap.num &amp;&amp; Heap.heap[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]-&gt;priority&lt;Heap.heap[i*<span class="hljs-number">2</span>]-&gt;priority)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//如果有两个根节点，并且右结点优先数小于左结点优先数</span></span><br><span class="line">            <span class="hljs-keyword">if</span>( Heap.heap[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]-&gt;priority&lt;Heap.heap[Heap.num]-&gt;priority)</span><br><span class="line">            &#123;</span><br><span class="line">                Heap.heap[i] = Heap.heap[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];</span><br><span class="line">                i=i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(Heap.heap[i*<span class="hljs-number">2</span>]-&gt;priority &lt; Heap.heap[Heap.num]-&gt;priority)</span><br><span class="line">            &#123;</span><br><span class="line">                Heap.heap[i] = Heap.heap[i*<span class="hljs-number">2</span>];</span><br><span class="line">                i *= <span class="hljs-number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Heap.heap[i] = Heap.heap[Heap.num--]; <span class="hljs-comment">//将最后的一个元素补在空缺</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-26-Windows消息队列-25-分&quot;&gt;&lt;a href=&quot;#7-26-Windows消息队列-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-26 Windows消息队列 (25 分)&quot;&gt;&lt;/a&gt;7-26 Windows消息队列 (25 分)&lt;/h4&gt;&lt;p&gt;消息队列是Windows系统的基础。对于每个进程，系统维护一个消息队列。如果在进程中有特定事件发生，如点击鼠标、文字改变等，系统将把这个消息加到队列当中。同时，如果队列不是空的，这一进程循环地从队列中按照优先级获取消息。请注意优先级值低意味着优先级高。请编辑程序模拟消息队列，将消息加到队列中以及从队列中获取消息。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出正整数$N$（≤105），随后$N$行，每行给出一个指令——&lt;code&gt;GET&lt;/code&gt;或&lt;code&gt;PUT&lt;/code&gt;，分别表示从队列中取出消息或将消息添加到队列中。如果指令是&lt;code&gt;PUT&lt;/code&gt;，后面就有一个消息名称、以及一个正整数表示消息的优先级，此数越小表示优先级越高。消息名称是长度不超过10个字符且不含空格的字符串；题目保证队列中消息的优先级无重复，且输入至少有一个&lt;code&gt;GET&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;对于每个&lt;code&gt;GET&lt;/code&gt;指令，在一行中输出消息队列中优先级最高的消息的名称和参数。如果消息队列中没有消息，输出&lt;code&gt;EMPTY QUEUE!&lt;/code&gt;。对于&lt;code&gt;PUT&lt;/code&gt;指令则没有输出。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT msg1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT msg2 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT msg3 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PUT msg4 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;msg2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;msg1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EMPTY QUEUE!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-25 朋友圈 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-25/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-25/</id>
    <published>2018-05-06T02:01:00.000Z</published>
    <updated>2019-06-30T04:20:41.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-25-朋友圈-25-分"><a href="#7-25-朋友圈-25-分" class="headerlink" title="7-25 朋友圈 (25 分)"></a>7-25 朋友圈 (25 分)</h4><p>某学校有$N$个学生，形成$M$个俱乐部。每个俱乐部里的学生有着一定相似的兴趣爱好，形成一个朋友圈。一个学生可以同时属于若干个不同的俱乐部。根据“我的朋友的朋友也是我的朋友”这个推论可以得出，如果A和B是朋友，且B和C是朋友，则A和C也是朋友。请编写程序计算最大朋友圈中有多少人。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行包含两个正整数$N$（≤30000）和$M$（≤1000），分别代表学校的学生总数和俱乐部的个数。后面的$M$行每行按以下格式给出1个俱乐部的信息，其中学生从1~$N$编号：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第i个俱乐部的人数Mi（空格）学生1（空格）学生2 … 学生Mi</span><br></pre></td></tr></table></figure><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出给出一个整数，表示在最大朋友圈中有多少人。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7 4</span><br><span class="line">3 1 2 3</span><br><span class="line">2 1 4</span><br><span class="line">3 5 6 7</span><br><span class="line">1 6</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Union</span><span class="hljs-params">( <span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">( <span class="hljs-keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> n,m;</span><br><span class="line"><span class="hljs-keyword">int</span> bcj[<span class="hljs-number">30005</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    <span class="hljs-keyword">int</span> n1;</span><br><span class="line">    <span class="hljs-keyword">int</span> x,y;</span><br><span class="line">    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;=n; i++)  bcj[i] = <span class="hljs-number">-1</span>;   <span class="hljs-comment">//初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span>( m-- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n1);</span><br><span class="line">        <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;=n1; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>( i==<span class="hljs-number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;y);</span><br><span class="line">                Union(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( bcj[i]&lt;ans )  ans = bcj[i];   <span class="hljs-comment">//负数需寻找最小的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="hljs-number">0</span>-ans;  <span class="hljs-comment">//用负数表示集合中元素的个数</span></span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,ans);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//以下是并查集的两个基本操作</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Find</span><span class="hljs-params">( <span class="hljs-keyword">int</span> x)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(bcj[x]&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> x;</span><br><span class="line">    <span class="hljs-keyword">return</span> bcj[x] = Find(bcj[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Union</span><span class="hljs-params">( <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    x = Find(x);</span><br><span class="line">    y = Find(y);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( x==y ) <span class="hljs-keyword">return</span>;</span><br><span class="line">    bcj[x] += bcj[y];</span><br><span class="line">    bcj[y] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-25-朋友圈-25-分&quot;&gt;&lt;a href=&quot;#7-25-朋友圈-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-25 朋友圈 (25 分)&quot;&gt;&lt;/a&gt;7-25 朋友圈 (25 分)&lt;/h4&gt;&lt;p&gt;某学校有$N$个学生，形成$M$个俱乐部。每个俱乐部里的学生有着一定相似的兴趣爱好，形成一个朋友圈。一个学生可以同时属于若干个不同的俱乐部。根据“我的朋友的朋友也是我的朋友”这个推论可以得出，如果A和B是朋友，且B和C是朋友，则A和C也是朋友。请编写程序计算最大朋友圈中有多少人。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行包含两个正整数$N$（≤30000）和$M$（≤1000），分别代表学校的学生总数和俱乐部的个数。后面的$M$行每行按以下格式给出1个俱乐部的信息，其中学生从1~$N$编号：&lt;/p&gt;
&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;第i个俱乐部的人数Mi（空格）学生1（空格）学生2 … 学生Mi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;输出给出一个整数，表示在最大朋友圈中有多少人。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 1 2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 1 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 5 6 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-24 树种统计 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-24/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-24/</id>
    <published>2018-05-06T02:00:00.000Z</published>
    <updated>2019-06-30T04:17:45.952Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-24-树种统计-25-分"><a href="#7-24-树种统计-25-分" class="headerlink" title="7-24 树种统计 (25 分)"></a>7-24 树种统计 (25 分)</h4><p>随着卫星成像技术的应用，自然资源研究机构可以识别每一棵树的种类。请编写程序帮助研究人员统计每种树的数量，计算每种树占总数的百分比。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出正整数N（≤105），随后N行，每行给出卫星观测到的一棵树的种类名称。种类名称由不超过30个英文字母和空格组成（大小写不区分）。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>按字典序递增输出各种树的种类名称及其所占总数的百分比，其间以空格分隔，保留小数点后4位。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">29</span><br><span class="line">Red Alder</span><br><span class="line">Ash</span><br><span class="line">Aspen</span><br><span class="line">Basswood</span><br><span class="line">Ash</span><br><span class="line">Beech</span><br><span class="line">Yellow Birch</span><br><span class="line">Ash</span><br><span class="line">Cherry</span><br><span class="line">Cottonwood</span><br><span class="line">Ash</span><br><span class="line">Cypress</span><br><span class="line">Red Elm</span><br><span class="line">Gum</span><br><span class="line">Hackberry</span><br><span class="line">White Oak</span><br><span class="line">Hickory</span><br><span class="line">Pecan</span><br><span class="line">Hard Maple</span><br><span class="line">White Oak</span><br><span class="line">Soft Maple</span><br><span class="line">Red Oak</span><br><span class="line">Red Oak</span><br><span class="line">White Oak</span><br><span class="line">Poplan</span><br><span class="line">Sassafras</span><br><span class="line">Sycamore</span><br><span class="line">Black Walnut</span><br><span class="line">Willow</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Ash 13.7931%</span><br><span class="line">Aspen 3.4483%</span><br><span class="line">Basswood 3.4483%</span><br><span class="line">Beech 3.4483%</span><br><span class="line">Black Walnut 3.4483%</span><br><span class="line">Cherry 3.4483%</span><br><span class="line">Cottonwood 3.4483%</span><br><span class="line">Cypress 3.4483%</span><br><span class="line">Gum 3.4483%</span><br><span class="line">Hackberry 3.4483%</span><br><span class="line">Hard Maple 3.4483%</span><br><span class="line">Hickory 3.4483%</span><br><span class="line">Pecan 3.4483%</span><br><span class="line">Poplan 3.4483%</span><br><span class="line">Red Alder 3.4483%</span><br><span class="line">Red Elm 3.4483%</span><br><span class="line">Red Oak 6.8966%</span><br><span class="line">Sassafras 3.4483%</span><br><span class="line">Soft Maple 3.4483%</span><br><span class="line">Sycamore 3.4483%</span><br><span class="line">White Oak 10.3448%</span><br><span class="line">Willow 3.4483%</span><br><span class="line">Yellow Birch 3.4483%</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">Position</span>;</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> data[<span class="hljs-number">35</span>];</span><br><span class="line">    BinTree left;</span><br><span class="line">    BinTree right;</span><br><span class="line">    <span class="hljs-keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-function">BinTree <span class="hljs-title">Insert</span><span class="hljs-params">( BinTree BT , <span class="hljs-keyword">char</span> name[])</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( BinTree BT , <span class="hljs-keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    BinTree BT = <span class="hljs-literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="hljs-keyword">char</span> name[<span class="hljs-number">35</span>];</span><br><span class="line">        gets(name);</span><br><span class="line">        BT = Insert( BT,name);</span><br><span class="line">    &#125;</span><br><span class="line">    Print( BT ,n);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">BinTree <span class="hljs-title">Insert</span><span class="hljs-params">( BinTree BT , <span class="hljs-keyword">char</span> name[])</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>( !BT )&#123;</span><br><span class="line">        BT = ( BinTree )<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct TNode));</span><br><span class="line">        <span class="hljs-built_in">strcpy</span>(BT-&gt;data,name);</span><br><span class="line">        BT-&gt;count=<span class="hljs-number">1</span>;</span><br><span class="line">        BT-&gt;left = BT-&gt;right =<span class="hljs-literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> a = <span class="hljs-built_in">strcmp</span>( BT-&gt;data,name);</span><br><span class="line">        <span class="hljs-keyword">if</span>( a&lt;<span class="hljs-number">0</span> )  BT-&gt;right = Insert( BT-&gt;right,name);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( a&gt;<span class="hljs-number">0</span> ) BT-&gt;left=Insert( BT-&gt;left,name);</span><br><span class="line">        <span class="hljs-keyword">else</span> BT-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> BT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( BinTree BT , <span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>( !BT ) <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">        Print( BT-&gt;left,n);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s "</span>,BT-&gt;data);</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.4f%%\n"</span>,(<span class="hljs-keyword">double</span>)BT-&gt;count/n*<span class="hljs-number">100.0</span>);</span><br><span class="line">        Print( BT-&gt;right,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-24-树种统计-25-分&quot;&gt;&lt;a href=&quot;#7-24-树种统计-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-24 树种统计 (25 分)&quot;&gt;&lt;/a&gt;7-24 树种统计 (25 分)&lt;/h4&gt;&lt;p&gt;随着卫星成像技术的应用，自然资源研究机构可以识别每一棵树的种类。请编写程序帮助研究人员统计每种树的数量，计算每种树占总数的百分比。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出正整数N（≤105），随后N行，每行给出卫星观测到的一棵树的种类名称。种类名称由不超过30个英文字母和空格组成（大小写不区分）。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;按字典序递增输出各种树的种类名称及其所占总数的百分比，其间以空格分隔，保留小数点后4位。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Alder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Aspen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Basswood&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Beech&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Yellow Birch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cherry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cottonwood&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cypress&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Elm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hackberry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;White Oak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hickory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pecan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hard Maple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;White Oak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Soft Maple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Oak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Oak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;White Oak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Poplan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sassafras&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sycamore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Black Walnut&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Willow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Ash 13.7931%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Aspen 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Basswood 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Beech 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Black Walnut 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cherry 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cottonwood 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cypress 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gum 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hackberry 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hard Maple 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hickory 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Pecan 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Poplan 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Alder 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Elm 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Red Oak 6.8966%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sassafras 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Soft Maple 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sycamore 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;White Oak 10.3448%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Willow 3.4483%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Yellow Birch 3.4483%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-23 还原二叉树 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-23/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-23/</id>
    <published>2018-05-06T01:59:00.000Z</published>
    <updated>2019-06-30T04:15:10.652Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-23-还原二叉树-25-分"><a href="#7-23-还原二叉树-25-分" class="headerlink" title="7-23 还原二叉树 (25 分)"></a>7-23 还原二叉树 (25 分)</h4><p>给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出正整数$N$（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为$N$的不包含重复英文字母（区别大小写）的字符串。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出为一个整数，即该二叉树的高度。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">ABDFGHIEC</span><br><span class="line">FDHGIBEAC</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">char</span> data;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TNode</span> *<span class="hljs-title">lchild</span>,*<span class="hljs-title">rchild</span>;</span></span><br><span class="line">&#125; TNode,*Tree;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Tree <span class="hljs-title">CreatTree</span><span class="hljs-params">( <span class="hljs-keyword">char</span> xian[],<span class="hljs-keyword">char</span> zhong[],<span class="hljs-keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">High</span><span class="hljs-params">( Tree t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">char</span> xian[<span class="hljs-number">55</span>];   <span class="hljs-comment">//先序序列</span></span><br><span class="line"><span class="hljs-keyword">char</span> zhong[<span class="hljs-number">55</span>];  <span class="hljs-comment">//中序序列</span></span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,xian);</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,zhong);</span><br><span class="line">    Tree tree = CreatTree( xian,zhong,n);</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,High(tree));</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">Tree <span class="hljs-title">CreatTree</span><span class="hljs-params">( <span class="hljs-keyword">char</span> xian[],<span class="hljs-keyword">char</span> zhong[],<span class="hljs-keyword">int</span> n)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>( n==<span class="hljs-number">0</span> ) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;</span><br><span class="line">    Tree temp = (Tree) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct TNode));</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span>( index &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( zhong[index]==xian[<span class="hljs-number">0</span>]) <span class="hljs-keyword">break</span>;</span><br><span class="line">        index ++;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;data = xian[<span class="hljs-number">0</span>];</span><br><span class="line">    temp-&gt;lchild = CreatTree(xian+<span class="hljs-number">1</span>,zhong,index);</span><br><span class="line">    temp-&gt;rchild = CreatTree(xian+<span class="hljs-number">1</span>+index,zhong+index+<span class="hljs-number">1</span>,n-index<span class="hljs-number">-1</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">High</span><span class="hljs-params">( Tree t)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>( !t ) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> lh = High(t-&gt;lchild);</span><br><span class="line">    <span class="hljs-keyword">int</span> rh = High(t-&gt;rchild);</span><br><span class="line">    <span class="hljs-keyword">if</span>( lh&gt;rh ) <span class="hljs-keyword">return</span> ++lh;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> ++rh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-23-还原二叉树-25-分&quot;&gt;&lt;a href=&quot;#7-23-还原二叉树-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-23 还原二叉树 (25 分)&quot;&gt;&lt;/a&gt;7-23 还原二叉树 (25 分)&lt;/h4&gt;&lt;p&gt;给定一棵二叉树的先序遍历序列和中序遍历序列，要求计算该二叉树的高度。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出正整数$N$（≤50），为树中结点总数。下面两行先后给出先序和中序遍历序列，均是长度为$N$的不包含重复英文字母（区别大小写）的字符串。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;输出为一个整数，即该二叉树的高度。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABDFGHIEC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FDHGIBEAC&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-22 堆栈模拟队列 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-22/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-22/</id>
    <published>2018-05-06T01:58:00.000Z</published>
    <updated>2019-06-30T04:13:03.686Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-22-堆栈模拟队列-25-分"><a href="#7-22-堆栈模拟队列-25-分" class="headerlink" title="7-22 堆栈模拟队列 (25 分)"></a>7-22 堆栈模拟队列 (25 分)</h4><p>设已知有两个堆栈S1和S2，请用这两个堆栈模拟出一个队列Q。</p><p>所谓用堆栈模拟队列，实际上就是通过调用堆栈的下列操作函数:</p><ul><li><code>int IsFull(Stack S)</code>：判断堆栈<code>S</code>是否已满，返回1或0；</li><li><code>int IsEmpty (Stack S )</code>：判断堆栈<code>S</code>是否为空，返回1或0；</li><li><code>void Push(Stack S, ElementType item )</code>：将元素<code>item</code>压入堆栈<code>S</code>；</li><li><code>ElementType Pop(Stack S )</code>：删除并返回<code>S</code>的栈顶元素。</li></ul><p>实现队列的操作，即入队<code>void AddQ(ElementType item)</code>和出队<code>ElementType DeleteQ()</code>。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出两个正整数<code>N1</code>和<code>N2</code>，表示堆栈<code>S1</code>和<code>S2</code>的最大容量。随后给出一系列的队列操作：<code>A  item</code>表示将<code>item</code>入列（这里假设<code>item</code>为整型数字）；<code>D</code>表示出队操作；<code>T</code>表示输入结束。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对输入中的每个<code>D</code>操作，输出相应出队的数字，或者错误信息<code>ERROR:Empty</code>。如果入队操作无法执行，也需要输出<code>ERROR:Full</code>。每个输出占1行。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">A 1 A 2 A 3 A 4 A 5 D A 6 D A 7 D A 8 D D D D T</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ERROR:Full</span><br><span class="line">1</span><br><span class="line">ERROR:Full</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">ERROR:Empty</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> stack1[<span class="hljs-number">1000</span>],stack2[<span class="hljs-number">1000</span>];</span><br><span class="line">    <span class="hljs-keyword">int</span> top1=<span class="hljs-number">-1</span>,top2=<span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">char</span> c;</span><br><span class="line">    <span class="hljs-keyword">int</span> temp;</span><br><span class="line">    <span class="hljs-keyword">int</span> n1,n2;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;n1,&amp;n2);</span><br><span class="line">    <span class="hljs-keyword">if</span>( n1&gt;n2 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//容量小的作为第一个输入栈</span></span><br><span class="line">        temp = n1;</span><br><span class="line">        n1 = n2;</span><br><span class="line">        n2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;c);</span><br><span class="line">        <span class="hljs-keyword">if</span>( c==<span class="hljs-string">'T'</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( c==<span class="hljs-string">'A'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;temp);</span><br><span class="line">            <span class="hljs-keyword">if</span>( top1==n1<span class="hljs-number">-1</span> &amp;&amp; top2!=<span class="hljs-number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-comment">//栈1满，栈2不为空</span></span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ERROR:Full\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( top1==n1<span class="hljs-number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-comment">//栈1满，栈2为空</span></span><br><span class="line">                <span class="hljs-keyword">while</span>( top1&gt;<span class="hljs-number">-1</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">//栈1出栈到栈2</span></span><br><span class="line">                    stack2[++top2] = stack1[top1--];</span><br><span class="line">                &#125;</span><br><span class="line">                stack1[++top1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> stack1[++top1] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( c==<span class="hljs-string">'D'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>( top2!=<span class="hljs-number">-1</span>)</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,stack2[top2--]);</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( top2==<span class="hljs-number">-1</span> &amp;&amp; top1!=<span class="hljs-number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">while</span>(top1&gt;<span class="hljs-number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    stack2[++top2] = stack1[top1--];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,stack2[top2--]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ERROR:Empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-22-堆栈模拟队列-25-分&quot;&gt;&lt;a href=&quot;#7-22-堆栈模拟队列-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-22 堆栈模拟队列 (25 分)&quot;&gt;&lt;/a&gt;7-22 堆栈模拟队列 (25 分)&lt;/h4&gt;&lt;p&gt;设已知有两个堆栈S1和S2，请用这两个堆栈模拟出一个队列Q。&lt;/p&gt;
&lt;p&gt;所谓用堆栈模拟队列，实际上就是通过调用堆栈的下列操作函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int IsFull(Stack S)&lt;/code&gt;：判断堆栈&lt;code&gt;S&lt;/code&gt;是否已满，返回1或0；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int IsEmpty (Stack S )&lt;/code&gt;：判断堆栈&lt;code&gt;S&lt;/code&gt;是否为空，返回1或0；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void Push(Stack S, ElementType item )&lt;/code&gt;：将元素&lt;code&gt;item&lt;/code&gt;压入堆栈&lt;code&gt;S&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElementType Pop(Stack S )&lt;/code&gt;：删除并返回&lt;code&gt;S&lt;/code&gt;的栈顶元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现队列的操作，即入队&lt;code&gt;void AddQ(ElementType item)&lt;/code&gt;和出队&lt;code&gt;ElementType DeleteQ()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出两个正整数&lt;code&gt;N1&lt;/code&gt;和&lt;code&gt;N2&lt;/code&gt;，表示堆栈&lt;code&gt;S1&lt;/code&gt;和&lt;code&gt;S2&lt;/code&gt;的最大容量。随后给出一系列的队列操作：&lt;code&gt;A  item&lt;/code&gt;表示将&lt;code&gt;item&lt;/code&gt;入列（这里假设&lt;code&gt;item&lt;/code&gt;为整型数字）；&lt;code&gt;D&lt;/code&gt;表示出队操作；&lt;code&gt;T&lt;/code&gt;表示输入结束。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;对输入中的每个&lt;code&gt;D&lt;/code&gt;操作，输出相应出队的数字，或者错误信息&lt;code&gt;ERROR:Empty&lt;/code&gt;。如果入队操作无法执行，也需要输出&lt;code&gt;ERROR:Full&lt;/code&gt;。每个输出占1行。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A 1 A 2 A 3 A 4 A 5 D A 6 D A 7 D A 8 D D D D T&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR:Full&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR:Full&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ERROR:Empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-21 求前缀表达式的值 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-21/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-21/</id>
    <published>2018-05-06T01:57:00.000Z</published>
    <updated>2019-06-30T04:11:27.433Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-21-求前缀表达式的值-25-分"><a href="#7-21-求前缀表达式的值-25-分" class="headerlink" title="7-21 求前缀表达式的值 (25 分)"></a>7-21 求前缀表达式的值 (25 分)</h4><p>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。前缀表达式指二元运算符位于两个运算数之前，例如<code>2+3*(7-4)+8/4</code>的前缀表达式是：<code>+ + 2 * 3 - 7 4 / 8 4</code>。请设计程序计算前缀表达式的结果值。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行内给出不超过30个字符的前缀表达式，只包含<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>以及运算数，不同对象（运算数、运算符号）之间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出前缀表达式的运算结果，保留小数点后1位，或错误信息<code>ERROR</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ + 2 * 3 - 7 4 / 8 4</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13.0</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">exp</span><span class="hljs-params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f"</span>,<span class="hljs-built_in">exp</span>());</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">exp</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> a[<span class="hljs-number">10</span>];  <span class="hljs-comment">//存储第一个非空格字符</span></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,a);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( !a[<span class="hljs-number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-comment">//a[1]为空只有一位</span></span><br><span class="line">        <span class="hljs-keyword">switch</span>( a[<span class="hljs-number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span> :</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">exp</span>()+<span class="hljs-built_in">exp</span>();</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span> :</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">exp</span>()-<span class="hljs-built_in">exp</span>();</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span> :</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-built_in">exp</span>()*<span class="hljs-built_in">exp</span>();</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span> :</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">double</span> fenzi = <span class="hljs-built_in">exp</span>();</span><br><span class="line">            <span class="hljs-keyword">double</span> fenmu = <span class="hljs-built_in">exp</span>();</span><br><span class="line">            <span class="hljs-keyword">if</span>(fenmu !=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> fenzi/fenmu;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ERROR"</span>);  <span class="hljs-comment">//分母为0</span></span><br><span class="line">                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);   <span class="hljs-comment">//程序结束</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">default</span> :</span><br><span class="line">            <span class="hljs-keyword">return</span> atof(a);   <span class="hljs-comment">//字符串转换为浮点数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span>( a[<span class="hljs-number">0</span>]==<span class="hljs-string">'-'</span> || a[<span class="hljs-number">0</span>]==<span class="hljs-string">'+'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">char</span> flag = a[<span class="hljs-number">0</span>];  <span class="hljs-comment">//记录符号</span></span><br><span class="line">            <span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span> ;</span><br><span class="line">            <span class="hljs-keyword">while</span>(a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                a[i] = a[i+<span class="hljs-number">1</span>];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>(flag==<span class="hljs-string">'-'</span>)</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>-atof(a);</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> atof(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> atof(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-21-求前缀表达式的值-25-分&quot;&gt;&lt;a href=&quot;#7-21-求前缀表达式的值-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-21 求前缀表达式的值 (25 分)&quot;&gt;&lt;/a&gt;7-21 求前缀表达式的值 (25 分)&lt;/h4&gt;&lt;p&gt;算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。前缀表达式指二元运算符位于两个运算数之前，例如&lt;code&gt;2+3*(7-4)+8/4&lt;/code&gt;的前缀表达式是：&lt;code&gt;+ + 2 * 3 - 7 4 / 8 4&lt;/code&gt;。请设计程序计算前缀表达式的结果值。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入在一行内给出不超过30个字符的前缀表达式，只包含&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;/&lt;/code&gt;以及运算数，不同对象（运算数、运算符号）之间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;输出前缀表达式的运算结果，保留小数点后1位，或错误信息&lt;code&gt;ERROR&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ + 2 * 3 - 7 4 / 8 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;13.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-20 表达式转换 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-20/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-20/</id>
    <published>2018-05-06T01:56:00.000Z</published>
    <updated>2019-06-30T04:09:25.469Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-20-表达式转换-25-分"><a href="#7-20-表达式转换-25-分" class="headerlink" title="7-20 表达式转换 (25 分)"></a>7-20 表达式转换 (25 分)</h4><p>算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行中给出不含空格的中缀表达式，可包含<code>+</code>、<code>-</code>、<code>*</code>、<code>\</code>以及左右括号<code>()</code>，表达式不超过20个字符。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2+3*(7-4)+8/4</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 7 4 - * + 8 4 / +</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsNum</span><span class="hljs-params">( <span class="hljs-keyword">char</span> c)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsZhengfu</span><span class="hljs-params">( <span class="hljs-keyword">char</span> c)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Compare</span><span class="hljs-params">( <span class="hljs-keyword">char</span> a, <span class="hljs-keyword">char</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">char</span> str1[<span class="hljs-number">21</span>];</span><br><span class="line">    <span class="hljs-keyword">char</span> str2[<span class="hljs-number">21</span>];  </span><br><span class="line">    <span class="hljs-keyword">int</span> len;</span><br><span class="line">    <span class="hljs-keyword">int</span> flag =<span class="hljs-number">0</span>;    <span class="hljs-comment">//表示str2是否为空</span></span><br><span class="line">    <span class="hljs-keyword">int</span> i,j;</span><br><span class="line">    <span class="hljs-keyword">int</span> space =<span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,str1);</span><br><span class="line">    len = <span class="hljs-built_in">strlen</span>(str1);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(IsNum(str1[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//str1[i]是数字则输出</span></span><br><span class="line">            <span class="hljs-keyword">if</span>( space )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">                space = <span class="hljs-number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,str1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( IsZhengfu(str1[i]) &amp;&amp; (i? !IsNum(str1[i<span class="hljs-number">-1</span>]) &amp;&amp; str1[i<span class="hljs-number">-1</span>]!=<span class="hljs-string">')'</span>:<span class="hljs-number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//若第一个符号是负号或者出现连续两个符号</span></span><br><span class="line">            <span class="hljs-keyword">if</span>( str1[i]==<span class="hljs-string">'-'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(space)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">                    space = <span class="hljs-number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,str1[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//其他符号</span></span><br><span class="line">            <span class="hljs-keyword">if</span>( flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( str1[i]==<span class="hljs-string">')'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">//str2出栈直至遇到（</span></span><br><span class="line">                    <span class="hljs-keyword">while</span>( flag--)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(str2[flag]==<span class="hljs-string">'('</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %c"</span>,str2[flag]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">while</span>( flag )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-comment">//str2内不为空，比较栈顶与str1[i]的优先级</span></span><br><span class="line">                        <span class="hljs-keyword">if</span>( Compare( str2[flag<span class="hljs-number">-1</span>],str1[i]))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="hljs-comment">//若str1优先级低，出栈</span></span><br><span class="line">                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %c"</span>,str2[--flag]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    str2[flag++] = str1[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> str2[flag++] = str1[i];</span><br><span class="line">            <span class="hljs-keyword">for</span> ( j=<span class="hljs-number">0</span>; j&lt;flag; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>( str2[j]!=<span class="hljs-string">'('</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">//遇见‘（’不输出空格</span></span><br><span class="line">                    space = <span class="hljs-number">1</span>;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %c"</span>,str2[--flag]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsNum</span><span class="hljs-params">( <span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//c是数字，注意题目数据会有小数</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ( c &gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)||c==<span class="hljs-string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">IsZhengfu</span><span class="hljs-params">( <span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> c==<span class="hljs-string">'+'</span> || c==<span class="hljs-string">'-'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Compare</span><span class="hljs-params">( <span class="hljs-keyword">char</span> a, <span class="hljs-keyword">char</span> b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-comment">//比较两个符号优先级</span></span><br><span class="line">    <span class="hljs-comment">//连续的两个case语句表示这两个case是同一种情况</span></span><br><span class="line">    <span class="hljs-keyword">if</span>( b==<span class="hljs-string">')'</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>( b==<span class="hljs-string">'('</span> || a==<span class="hljs-string">'('</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">switch</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>:</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>:</span><br><span class="line">    <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>:</span><br><span class="line">        <span class="hljs-keyword">switch</span>(a)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'+'</span>:</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'-'</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'*'</span>:</span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'/'</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-20-表达式转换-25-分&quot;&gt;&lt;a href=&quot;#7-20-表达式转换-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-20 表达式转换 (25 分)&quot;&gt;&lt;/a&gt;7-20 表达式转换 (25 分)&lt;/h4&gt;&lt;p&gt;算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。日常使用的算术表达式是采用中缀表示法，即二元运算符位于两个运算数中间。请设计程序将中缀表达式转换为后缀表达式。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入在一行中给出不含空格的中缀表达式，可包含&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;\&lt;/code&gt;以及左右括号&lt;code&gt;()&lt;/code&gt;，表达式不超过20个字符。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;在一行中输出转换后的后缀表达式，要求不同对象（运算数、运算符号）之间以空格分隔，但结尾不得有多余空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2+3*(7-4)+8/4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2 3 7 4 - * + 8 4 / +&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-19 求链式线性表的倒数第K项 (20 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-19/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-19/</id>
    <published>2018-05-06T01:55:00.000Z</published>
    <updated>2019-06-30T04:08:06.199Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-19-求链式线性表的倒数第K项-20-分"><a href="#7-19-求链式线性表的倒数第K项-20-分" class="headerlink" title="7-19 求链式线性表的倒数第K项 (20 分)"></a>7-19 求链式线性表的倒数第K项 (20 分)</h4><p>给定一系列正整数，请设计一个尽可能高效的算法，查找倒数第K个位置上的数字。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出一个正整数K，随后是若干正整数，最后以一个负整数表示结尾（该负数不算在序列内，不要处理）。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出倒数第K个位置上的数据。如果这个位置不存在，输出错误信息<code>NULL</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 1 2 3 4 5 6 7 8 9 0 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> data;</span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> temp;</span><br><span class="line">    <span class="hljs-keyword">int</span> k,cnt=<span class="hljs-number">0</span>;</span><br><span class="line">    LinkList L;</span><br><span class="line">    L = (LinkList)<span class="hljs-built_in">malloc</span>( <span class="hljs-keyword">sizeof</span> ( struct LNode));</span><br><span class="line">    LNode *s=L,*r=L,*p;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;k);</span><br><span class="line">    <span class="hljs-keyword">int</span> f=k;   <span class="hljs-comment">//保护k的值</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;temp);</span><br><span class="line">        <span class="hljs-keyword">if</span>( temp&lt;<span class="hljs-number">0</span> )&#123;</span><br><span class="line">            <span class="hljs-keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            p=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));</span><br><span class="line">            p-&gt;data = temp;  </span><br><span class="line">            r-&gt;next = p;  </span><br><span class="line">            r = p;</span><br><span class="line">            k--;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="hljs-keyword">if</span>( k&lt;<span class="hljs-number">1</span>)&#123;</span><br><span class="line">                s= s-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>( f&gt;cnt)&#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"NULL"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,s-&gt;data);</span><br><span class="line"></span><br><span class="line">     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-19-求链式线性表的倒数第K项-20-分&quot;&gt;&lt;a href=&quot;#7-19-求链式线性表的倒数第K项-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-19 求链式线性表的倒数第K项 (20 分)&quot;&gt;&lt;/a&gt;7-19 求链式线性表的倒数第K项 (20 分)&lt;/h4&gt;&lt;p&gt;给定一系列正整数，请设计一个尽可能高效的算法，查找倒数第K个位置上的数字。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出一个正整数K，随后是若干正整数，最后以一个负整数表示结尾（该负数不算在序列内，不要处理）。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;输出倒数第K个位置上的数据。如果这个位置不存在，输出错误信息&lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4 1 2 3 4 5 6 7 8 9 0 -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-18 银行业务队列简单模拟 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-18/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-18/</id>
    <published>2018-05-06T01:54:00.000Z</published>
    <updated>2019-06-30T04:06:13.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-18-银行业务队列简单模拟-25-分"><a href="#7-18-银行业务队列简单模拟-25-分" class="headerlink" title="7-18 银行业务队列简单模拟 (25 分)"></a>7-18 银行业务队列简单模拟 (25 分)</h4><p>设某银行有A、B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍 —— 即当A窗口每处理完2个顾客时，B窗口处理完1个顾客。给定到达银行的顾客序列，请按业务完成的顺序输出顾客序列。假定不考虑顾客先后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口顾客优先输出。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入为一行正整数，其中第1个数字N(≤1000)为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>按业务处理完成的顺序输出顾客的编号。数字间以空格分隔，但最后一个编号后不能有多余的空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 2 1 3 9 4 11 13 15</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 2 9 11 4 13 15</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 1004</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">( <span class="hljs-keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a[MAX];</span><br><span class="line">    <span class="hljs-keyword">int</span> b[MAX];</span><br><span class="line">    <span class="hljs-keyword">int</span> ahead=<span class="hljs-number">0</span>,atail=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> bhead=<span class="hljs-number">0</span>,btail=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-keyword">int</span> temp;</span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;temp);</span><br><span class="line">        <span class="hljs-keyword">if</span>( temp%<span class="hljs-number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[atail++] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b[btail++] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>( ahead&lt;atail || bhead&lt;btail )&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( ahead&lt;atail )   print(a[ahead++]);</span><br><span class="line">        <span class="hljs-keyword">if</span>( ahead&lt;atail )   print(a[ahead++]);</span><br><span class="line">        <span class="hljs-keyword">if</span>( bhead&lt;btail )   print(b[bhead++]);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">( <span class="hljs-keyword">int</span> i)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span>( flag )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    flag++;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-18-银行业务队列简单模拟-25-分&quot;&gt;&lt;a href=&quot;#7-18-银行业务队列简单模拟-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-18 银行业务队列简单模拟 (25 分)&quot;&gt;&lt;/a&gt;7-18 银行业务队列简单模拟 (25 分)&lt;/h4&gt;&lt;p&gt;设某银行有A、B两个业务窗口，且处理业务的速度不一样，其中A窗口处理速度是B窗口的2倍 —— 即当A窗口每处理完2个顾客时，B窗口处理完1个顾客。给定到达银行的顾客序列，请按业务完成的顺序输出顾客序列。假定不考虑顾客先后到达的时间间隔，并且当不同窗口同时处理完2个顾客时，A窗口顾客优先输出。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入为一行正整数，其中第1个数字N(≤1000)为顾客总数，后面跟着N位顾客的编号。编号为奇数的顾客需要到A窗口办理业务，为偶数的顾客则去B窗口。数字间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;按业务处理完成的顺序输出顾客的编号。数字间以空格分隔，但最后一个编号后不能有多余的空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8 2 1 3 9 4 11 13 15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 3 2 9 11 4 13 15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-17 汉诺塔的非递归实现 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-17/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-17/</id>
    <published>2018-05-06T01:53:00.000Z</published>
    <updated>2019-06-30T04:02:49.780Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-17-汉诺塔的非递归实现-25-分"><a href="#7-17-汉诺塔的非递归实现-25-分" class="headerlink" title="7-17 汉诺塔的非递归实现 (25 分)"></a>7-17 汉诺塔的非递归实现 (25 分)</h4><p>借助堆栈以非递归（循环）方式求解汉诺塔的问题（n, a, b, c），即将N个盘子从起始柱（标记为“a”）通过借助柱（标记为“b”）移动到目标柱（标记为“c”），并保证每个移动符合汉诺塔问题的要求。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入为一个正整数N，即起始柱上的盘数。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>每个操作（移动）占一行，按<code>柱1 -&gt; 柱2</code>的格式输出。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a -&gt; c</span><br><span class="line">a -&gt; b</span><br><span class="line">c -&gt; b</span><br><span class="line">a -&gt; c</span><br><span class="line">b -&gt; a</span><br><span class="line">b -&gt; c</span><br><span class="line">a -&gt; c</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> i;</span><br><span class="line">    <span class="hljs-keyword">int</span> n;</span><br><span class="line">    <span class="hljs-keyword">int</span> topa = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> topb = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> topc = <span class="hljs-number">-1</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> temp;</span><br><span class="line">    <span class="hljs-keyword">int</span> to = <span class="hljs-number">1</span>;  <span class="hljs-comment">//用to表示当前最小值所在的柱子，1为a，2为b</span></span><br><span class="line">    <span class="hljs-keyword">int</span> count ;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="hljs-keyword">int</span> a[n];</span><br><span class="line">    <span class="hljs-keyword">int</span> b[n];</span><br><span class="line">    <span class="hljs-keyword">int</span> c[n];</span><br><span class="line"></span><br><span class="line">    count = <span class="hljs-number">0</span>;  <span class="hljs-comment">//如果n是偶数，那运行完成后C柱上有n个元素，奇数的话B柱上有n个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>( i=n; i&gt;<span class="hljs-number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        a[++topa] = i;   <span class="hljs-comment">//初始化低层数值大</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>( <span class="hljs-number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//这里主要处理n为偶数第一步放在b上</span></span><br><span class="line">            <span class="hljs-keyword">if</span>( to==<span class="hljs-number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-comment">//当前最小值在a上,往前移一步</span></span><br><span class="line">                temp = a[topa--];</span><br><span class="line">                b[++topb] = temp;</span><br><span class="line">                to = <span class="hljs-number">2</span>;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a -&gt; b\n"</span>);</span><br><span class="line">                <span class="hljs-keyword">if</span>( a[topa]&lt;c[topc] || c[topc]==<span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">//如果a的最小值&lt;c的最小值或者c为空,则将a的最小值移到c</span></span><br><span class="line">                    temp = a[topa--];</span><br><span class="line">                    c[++topc] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a -&gt; c\n"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(count==n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">//否则将c的最小值移动到a</span></span><br><span class="line">                    temp = c[topc--];</span><br><span class="line">                    a[++topa] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"c -&gt; a\n"</span>);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( to==<span class="hljs-number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = b[topb--];</span><br><span class="line">                c[++topc] = temp;</span><br><span class="line">                to = <span class="hljs-number">3</span>;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"b -&gt; c\n"</span>);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="hljs-keyword">if</span>(count==n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span>( a[topa]&lt;b[topc] || b[topb]==<span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = a[topa--];</span><br><span class="line">                    b[++topb] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a -&gt; b\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = b[topb--];</span><br><span class="line">                    a[++topa] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"b -&gt; a\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( to==<span class="hljs-number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = c[topc--];</span><br><span class="line">                a[++topa] = temp;</span><br><span class="line">                to = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"c -&gt; a\n"</span>);</span><br><span class="line">                count--;</span><br><span class="line">                <span class="hljs-keyword">if</span>( b[topa]&lt;c[topc] || c[topc]==<span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = b[topb--];</span><br><span class="line">                    c[++topc] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"b -&gt; c\n"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(count==n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = c[topc--];</span><br><span class="line">                    b[++topb] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"c -&gt; b\n"</span>);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-comment">//这里主要处理n为奇数第一步放在c上</span></span><br><span class="line">            <span class="hljs-keyword">if</span>( to==<span class="hljs-number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = a[topa--];</span><br><span class="line">                b[++topb] = temp;</span><br><span class="line">                to = <span class="hljs-number">2</span>;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a -&gt; c\n"</span>);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="hljs-keyword">if</span>(count==n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span>( a[topa]&lt;c[topc] || c[topc]==<span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = a[topa--];</span><br><span class="line">                    c[++topc] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a -&gt; b\n"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = c[topc--];</span><br><span class="line">                    a[++topa] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"b -&gt; a\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( to==<span class="hljs-number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = b[topb--];</span><br><span class="line">                c[++topc] = temp;</span><br><span class="line">                to = <span class="hljs-number">3</span>;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"c -&gt; b\n"</span>);</span><br><span class="line">                count--;</span><br><span class="line">                <span class="hljs-keyword">if</span>( a[topa]&lt;b[topc] || b[topb]==<span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = a[topa--];</span><br><span class="line">                    b[++topb] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"a -&gt; c\n"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(count==n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = b[topb--];</span><br><span class="line">                    a[++topa] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"c -&gt; a\n"</span>);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( to==<span class="hljs-number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = c[topc--];</span><br><span class="line">                a[++topa] = temp;</span><br><span class="line">                to = <span class="hljs-number">1</span>;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"b -&gt; a\n"</span>);</span><br><span class="line">                <span class="hljs-keyword">if</span>( b[topa]&lt;c[topc] || c[topc]==<span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = b[topb--];</span><br><span class="line">                    c[++topc] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"c -&gt; b\n"</span>);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp = c[topc--];</span><br><span class="line">                    b[++topb] = temp;</span><br><span class="line">                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"b -&gt; c\n"</span>);</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(count==n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-17-汉诺塔的非递归实现-25-分&quot;&gt;&lt;a href=&quot;#7-17-汉诺塔的非递归实现-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-17 汉诺塔的非递归实现 (25 分)&quot;&gt;&lt;/a&gt;7-17 汉诺塔的非递归实现 (25 分)&lt;/h4&gt;&lt;p&gt;借助堆栈以非递归（循环）方式求解汉诺塔的问题（n, a, b, c），即将N个盘子从起始柱（标记为“a”）通过借助柱（标记为“b”）移动到目标柱（标记为“c”），并保证每个移动符合汉诺塔问题的要求。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入为一个正整数N，即起始柱上的盘数。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;每个操作（移动）占一行，按&lt;code&gt;柱1 -&amp;gt; 柱2&lt;/code&gt;的格式输出。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a -&amp;gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a -&amp;gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c -&amp;gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a -&amp;gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b -&amp;gt; c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a -&amp;gt; c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-16 一元多项式求导 (20 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-16/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-16/</id>
    <published>2018-05-06T01:52:00.000Z</published>
    <updated>2019-06-30T04:01:28.920Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-16-一元多项式求导-20-分"><a href="#7-16-一元多项式求导-20-分" class="headerlink" title="7-16 一元多项式求导 (20 分)"></a>7-16 一元多项式求导 (20 分)</h4><p>设计函数求一元多项式的导数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> xi,zi;  <span class="hljs-comment">//系数，指数</span></span><br><span class="line">    <span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>,&amp;xi,&amp;zi)!=EOF)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>( zi )&#123;</span><br><span class="line">           <span class="hljs-keyword">if</span>( flag )</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);  <span class="hljs-comment">//如果不是第一个数就先输出一个空格</span></span><br><span class="line">           <span class="hljs-keyword">else</span></span><br><span class="line">                flag =<span class="hljs-number">1</span>;</span><br><span class="line">           <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d"</span>,xi*zi,zi<span class="hljs-number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>( flag==<span class="hljs-number">0</span> )&#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0 0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-16-一元多项式求导-20-分&quot;&gt;&lt;a href=&quot;#7-16-一元多项式求导-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-16 一元多项式求导 (20 分)&quot;&gt;&lt;/a&gt;7-16 一元多项式求导 (20 分)&lt;/h4&gt;&lt;p&gt;设计函数求一元多项式的导数。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 4 -5 2 6 1 -2 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;12 3 -10 1 6 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>auhanjie&#39;s Blog</title>
  
  <subtitle>ad astra per aspera</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://auhanjie.github.io/"/>
  <updated>2018-09-08T12:06:39.960Z</updated>
  <id>http://auhanjie.github.io/</id>
  
  <author>
    <name>auhanjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>service和serviceImpl的选择</title>
    <link href="http://auhanjie.github.io/2018/09/08/service%E5%92%8CserviceImpl%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://auhanjie.github.io/2018/09/08/service和serviceImpl的选择/</id>
    <published>2018-09-08T01:30:00.000Z</published>
    <updated>2018-09-08T12:06:39.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="service和serviceImpl的选择"><a href="#service和serviceImpl的选择" class="headerlink" title="service和serviceImpl的选择"></a>service和serviceImpl的选择</h1><p>有些同行公司代码风格使用service层=service接口+serviceImpl实现类；</p><p>而有的同行公司的代码风格是service层=service类；</p><p>网上有人说是因为当项目的业务逻辑简单时，可选择service层=service类；</p><p>当项目的业务复杂时，可选择service层=service接口+serviceImpl实现类；</p><p>至于复杂和简单的度得自己把握；</p><p>今天在看 spring实战（第4版）的时候，看到解释</p><p>如下：</p><p>spring鼓励应用程序的各个层以接口的形式暴露功能，在service层，可以使用service接口+serviceImple实现类，也可以使用service类，但考虑到“接口时实现松耦合的关键”，所以更加推荐使用</p><p>service接口+serviceImple实现类的方式来写service层代码。</p><p>核心是“松耦合”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;service和serviceImpl的选择&quot;&gt;&lt;a href=&quot;#service和serviceImpl的选择&quot; class=&quot;headerlink&quot; title=&quot;service和serviceImpl的选择&quot;&gt;&lt;/a&gt;service和serviceImpl的
      
    
    </summary>
    
      <category term="个人观点" scheme="http://auhanjie.github.io/categories/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
    
      <category term="个人观点" scheme="http://auhanjie.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>longest-substring-without-repeating-characters</title>
    <link href="http://auhanjie.github.io/2018/09/04/leetcode-longest-substring-without-repeating-characters/"/>
    <id>http://auhanjie.github.io/2018/09/04/leetcode-longest-substring-without-repeating-characters/</id>
    <published>2018-09-04T01:26:00.000Z</published>
    <updated>2019-06-03T15:31:08.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Given a string, find the length of the longest substring without   repeating characters. For example, the longest substring without   repeating letters for “abcabcbb” is “abc”, which   the length is 3. For “bbbbb” the longest substring is   “b”, with the length of 1. </p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">unordered_map</span> &lt;<span class="hljs-keyword">char</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> leftBound=<span class="hljs-number">0</span>,Max=<span class="hljs-number">0</span>;</span><br><span class="line">         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">             <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.find(s[i]) != <span class="hljs-built_in">map</span>.end())</span><br><span class="line">                    leftBound = max(leftBound,<span class="hljs-built_in">map</span>[s[i]]+<span class="hljs-number">1</span>);</span><br><span class="line">                 Max = max(Max,i-leftBound+<span class="hljs-number">1</span>);</span><br><span class="line">                 <span class="hljs-built_in">map</span>[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">//新建一个map进行存储char</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        <span class="hljs-keyword">int</span> leftBound = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="hljs-keyword">char</span>  c = s.charAt(i);</span><br><span class="line">            <span class="hljs-comment">//窗口左边可能为下一个char，或者不变</span></span><br><span class="line">            leftBound = Math.max(leftBound,(map.containsKey(c))? map.get(c)+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);</span><br><span class="line">            max = Math.max(max, i-leftBound+<span class="hljs-number">1</span>);<span class="hljs-comment">//当前窗口长度</span></span><br><span class="line">            map.put(c,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> max;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;Given a string, find the length of the longest substring without   repeating characters. For example, the longest substring without   repeating letters for “abcabcbb” is “abc”, which   the length is 3. For “bbbbb” the longest substring is   “b”, with the length of 1. &lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;unordered_map&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; leftBound=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,Max=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;.find(s[i]) != &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;.end())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    leftBound = max(leftBound,&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;[s[i]]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 Max = max(Max,i-leftBound+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;[s[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Max;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>median-of-two-sorted-arrays</title>
    <link href="http://auhanjie.github.io/2018/09/03/leetcode-median-of-two-sorted-arrays/"/>
    <id>http://auhanjie.github.io/2018/09/03/leetcode-median-of-two-sorted-arrays/</id>
    <published>2018-09-03T01:00:00.000Z</published>
    <updated>2019-06-03T15:31:16.901Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">链接：https:<span class="hljs-comment">//www.nowcoder.com/questionTerminal/82c11b9392b14f3abfbf257f79a76025</span></span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kthMin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n &lt; m)</span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(B, n, A, m, k);</span><br><span class="line">        <span class="hljs-keyword">if</span>(m == <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> B[k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> min(A[<span class="hljs-number">0</span>], B[<span class="hljs-number">0</span>]);</span><br><span class="line">        <span class="hljs-keyword">int</span> pa = min(m, k / <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">int</span> pb = k - pa;</span><br><span class="line">        <span class="hljs-keyword">if</span>(A[pa - <span class="hljs-number">1</span>] == B[pb - <span class="hljs-number">1</span>]) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> A[pa - <span class="hljs-number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[pa - <span class="hljs-number">1</span>] &lt; B[pb - <span class="hljs-number">1</span>])</span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(A + pa, m - pa, B, n, k - pa);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(A, m, B + pb, n - pb, k - pb);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(m &lt;= <span class="hljs-number">0</span> &amp;&amp; n &lt;= <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> (kthMin(A, m, B, n, (m + n + <span class="hljs-number">2</span>) &gt;&gt; <span class="hljs-number">1</span>) + kthMin(A, m, B, n, (m + n + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> m = A.length, n = B.length;</span><br><span class="line">        <span class="hljs-comment">// 不论总数是奇数还是偶数，以l和r为下标的两数的均值都是medium</span></span><br><span class="line">        <span class="hljs-keyword">int</span> l = (m + n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> r = (m + n + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">return</span> (getkth(A, <span class="hljs-number">0</span>, B, <span class="hljs-number">0</span>, l) + getkth(A, <span class="hljs-number">0</span>, B, <span class="hljs-number">0</span>, r)) / <span class="hljs-number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getkth</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span> aStart, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span> bStart, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (aStart &gt;= A.length)</span><br><span class="line">            <span class="hljs-keyword">return</span> B[bStart + k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (bStart &gt;= B.length)</span><br><span class="line">            <span class="hljs-keyword">return</span> A[aStart + k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> Math.min(A[aStart], B[bStart]);</span><br><span class="line">        <span class="hljs-keyword">int</span> aMin = Integer.MAX_VALUE, bMin = Integer.MAX_VALUE;</span><br><span class="line">        <span class="hljs-keyword">if</span> (aStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; A.length)</span><br><span class="line">            aMin = A[aStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (bStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; B.length)</span><br><span class="line">            bMin = B[bStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">if</span> (aMin &lt; bMin)</span><br><span class="line">            <span class="hljs-keyword">return</span> getkth(A, aStart + k / <span class="hljs-number">2</span>, B, bStart, k - k / <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> getkth(A, aStart, B, bStart + k / <span class="hljs-number">2</span>, k - k / <span class="hljs-number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;链接：https:&lt;span class=&quot;hljs-comment&quot;&gt;//www.nowcoder.com/questionTerminal/82c11b9392b14f3abfbf257f79a76025&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：牛客网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;kthMin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; B[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(B, n, A, m, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; B[k - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min(A[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], B[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; pa = min(m, k / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; pb = k - pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == B[pb - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt; B[pb - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(A + pa, m - pa, B, n, k - pa);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(A, m, B + pb, n - pb, k - pb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; B[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; n &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (kthMin(A, m, B, n, (m + n + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + kthMin(A, m, B, n, (m + n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) / &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>add-two-numbers</title>
    <link href="http://auhanjie.github.io/2018/09/02/leetcode-add-two-numbers/"/>
    <id>http://auhanjie.github.io/2018/09/02/leetcode-add-two-numbers/</id>
    <published>2018-09-02T01:00:00.000Z</published>
    <updated>2019-06-03T15:30:58.419Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p><strong>Input:</strong> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br><strong>Output:</strong> 7 -&gt; 0 -&gt; 8</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode *next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function">ListNode *<span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, carry=<span class="hljs-number">0</span>, sum=<span class="hljs-number">0</span>;</span><br><span class="line">        ListNode *h=<span class="hljs-literal">NULL</span>, **t=&amp;h;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">while</span> (l1!=<span class="hljs-literal">NULL</span> || l2!=<span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">            x = getValueAndMoveNext(l1);</span><br><span class="line">            y = getValueAndMoveNext(l2);</span><br><span class="line">            </span><br><span class="line">            sum = carry + x + y;</span><br><span class="line">            </span><br><span class="line">            ListNode *node = <span class="hljs-keyword">new</span> ListNode(sum%<span class="hljs-number">10</span>);</span><br><span class="line">            *t = node;</span><br><span class="line">            t = (&amp;node-&gt;next);</span><br><span class="line">            </span><br><span class="line">            carry = sum/<span class="hljs-number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            ListNode *node = <span class="hljs-keyword">new</span> ListNode(carry%<span class="hljs-number">10</span>);</span><br><span class="line">            *t = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValueAndMoveNext</span><span class="hljs-params">(ListNode* &amp;l)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l != <span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">            x = l-&gt;val;</span><br><span class="line">            l = l-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="hljs-comment"> *         val = x;</span></span><br><span class="line"><span class="hljs-comment"> *         next = null;</span></span><br><span class="line"><span class="hljs-comment"> *     &#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span> || q != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = (p != <span class="hljs-keyword">null</span>) ? p.val : <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> y = (q != <span class="hljs-keyword">null</span>) ? q.val : <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="hljs-number">10</span>;</span><br><span class="line">        curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="hljs-keyword">if</span> (p != <span class="hljs-keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q != <span class="hljs-keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="hljs-keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;br&gt;&lt;strong&gt;Output:&lt;/strong&gt; 7 -&amp;gt; 0 -&amp;gt; 8&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * struct ListNode &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     int val;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     ListNode *next;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     ListNode(int x) : val(x), next(NULL) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;ListNode *&lt;span class=&quot;hljs-title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ListNode *l1, ListNode *l2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, y=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, carry=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sum=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode *h=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, **t=&amp;amp;h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (l1!=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; || l2!=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = getValueAndMoveNext(l1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            y = getValueAndMoveNext(l2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum = carry + x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ListNode *node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ListNode(sum%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *t = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = (&amp;amp;node-&amp;gt;next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            carry = sum/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (carry &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ListNode *node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ListNode(carry%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *t = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getValueAndMoveNext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ListNode* &amp;amp;l)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = l-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l = l-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>two-sum</title>
    <link href="http://auhanjie.github.io/2018/09/01/leetcode-two-sum/"/>
    <id>http://auhanjie.github.io/2018/09/01/leetcode-two-sum/</id>
    <published>2018-09-01T01:26:00.000Z</published>
    <updated>2018-09-17T12:23:34.180Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p><p>You may assume that each input would have exactly one solution.</p><p><strong>Input:</strong> numbers={2, 7, 11, 15}, target=9<br><strong>Output:</strong> index1=1, index2=2</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; twoSum(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;numbers, <span class="hljs-keyword">int</span> target) &#123;</span><br><span class="line">       <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;numbers.size();i++)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (m.find(numbers[i])==m.end() ) &#123; </span><br><span class="line">                m[target - numbers[i]] =i;</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                result.push_back(m[numbers[i]]+<span class="hljs-number">1</span>);</span><br><span class="line">                result.push_back(i+<span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="hljs-keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;Given an array of integers, find two numbers such that they ad
      
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>java面试</title>
    <link href="http://auhanjie.github.io/2018/08/23/java/"/>
    <id>http://auhanjie.github.io/2018/08/23/java/</id>
    <published>2018-08-23T01:26:00.000Z</published>
    <updated>2018-08-27T23:50:15.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Spring-Bean-的生命周期"><a href="#1、Spring-Bean-的生命周期" class="headerlink" title="1、Spring Bean 的生命周期"></a>1、Spring Bean 的生命周期</h4><ol><li><p>Spring 容器 从 XML 文件中读取 bean 的定义，并实例化 bean。</p></li><li><p>Spring 根据 bean 的定义填充所有的属性。</p></li><li><p>如果 bean 实现了 BeanNameAware 接口， Spring 传递 bean 的 ID 到setBeanName 方法。</p></li><li><p>如果 Bean 实现了 BeanFactoryAware 接口， Spring 传递 beanfactory 给setBeanFactory 方法。</p></li><li><p>如果有任何与bean相关联的BeanPostProcessors ， Spring 会 在postProcesserBeforeInitialization()方法内调用它们。</p></li><li><p>如果 bean 实现 IntializingBean 了，调用它的 afterPropertySet 方法，如果 bean</p><p>声明了初始化方法，调用此初始化方法。</p></li><li><p>如 果 有BeanPostProcessors和bean关 联 ， 这 些bean的postProcessAfterInitialization() 方法将被调用。</p></li><li>如果 bean 实现了 DisposableBean，它将调用 destroy()方法。</li></ol><h4 id="2、反射机制"><a href="#2、反射机制" class="headerlink" title="2、反射机制"></a>2、反射机制</h4><p>Spring 是依赖反射机制的，</p><p>那到底什么是反射机制呢： 反射机制就是利用（dom4j=java 反射机制） userBean ub = Class.forName（com.bean.<em>*</em>）这里是 com 全路径 所以在 Spring 配置文件中 bean 的 id 属性和 class 属性中要写全路径。 </p><p><bean id="adminBean" class="com.service.AdminBean"> <property name="name" value="乐乐"></property> <property name="id" value="1"></property></bean></p><h4 id="3、HashSet底层实现"><a href="#3、HashSet底层实现" class="headerlink" title="3、HashSet底层实现"></a>3、HashSet底层实现</h4><p>对于HashSet而言，它是基于HashMap实现的，HashSet底层使用HashMap来保存所有元素，因此HashSet 的实现比较简单，相关HashSet的操作，基本上都是直接调用底层HashMap的相关方法来完成，在HashSet中，元素都存到HashMap键值对的Key上面，而Value时有一个统一的值<code>private static final Object PRESENT = new Object();。</code></p><h4 id="4、TreeSet-底层源码有看过吗？"><a href="#4、TreeSet-底层源码有看过吗？" class="headerlink" title="4、TreeSet 底层源码有看过吗？"></a>4、TreeSet 底层源码有看过吗？</h4><p>类似于HashMap和HashSet之间的关系，HashSet底层依赖于HashMap实现，TreeSet底层则采用一个NavigableMap来保存TreeSet集合的元素。但实际上，由于NavigableMap只是一个接口，<code>因此底层依然是使用TreeMap来包含Set集合中的所有元素</code>。</p><h4 id="5、重载和重写区别"><a href="#5、重载和重写区别" class="headerlink" title="5、重载和重写区别"></a>5、重载和重写区别</h4><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实 现的是运行时的多态性。 扩展；</p><p>重载(Overloading)</p><p>重载的时候，方法名要一样，但是参数类型和个数不一样，返回值类型可以相同也可以</p><p>不相同。无法以返回型别作为重载函数的区分标准。</p><p>重写（Overriding）</p><p>父类与子类之间的多态性，对父类的函数进行重新定义。如果在子类中定义某方法与其 父类有相同的名称和参数，我们说该方法被重写 (Overriding)。在 Java 中，子类可继承父类 中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法， 而是想作一定的修改，这就需要采用方法的重写。 方法重写又称方法覆盖</p><p>（2）若子类中的方法与父类中的某一方法具有相同的方法名、返回类型和参数表，则 新方法将覆盖原有的方法。 如需父类中原有的方法，可使用 super 关键字，该关键字引用了当前类的父类。</p><p>（3）子类函数的访问修饰权限不能少于父类的；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、Spring-Bean-的生命周期&quot;&gt;&lt;a href=&quot;#1、Spring-Bean-的生命周期&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Bean 的生命周期&quot;&gt;&lt;/a&gt;1、Spring Bean 的生命周期&lt;/h4&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="java面试" scheme="http://auhanjie.github.io/categories/java%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java面试" scheme="http://auhanjie.github.io/tags/java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://auhanjie.github.io/2018/08/15/resume/"/>
    <id>http://auhanjie.github.io/2018/08/15/resume/</id>
    <published>2018-08-15T13:37:00.000Z</published>
    <updated>2019-06-03T15:20:24.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><ul><li>手机：1820206<em>*</em></li><li>Email：*@gmail.com</li><li>QQ：42417658*</li></ul><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul><li>黄汉杰/男/1991 </li><li>本科/广州大学计算机系</li><li>工作年限：2年</li><li>技术博客：<a href="http://auhanjie.github.io">http://auhanjie.github.io</a> </li><li>Github：<a href="http://github.com/auhanjie" target="_blank" rel="noopener">http://github.com/auhanjie</a></li><li>期望职位：JAVA开发程序员</li><li>期望薪资：税前月薪7k，特别喜欢的公司可例外</li><li>期望城市：珠海，深圳，广州</li><li>获奖证经历：2016-2017 全国大学英语四级考试514分/2016-2017 获得过校级一等奖学金，并被评为优秀大学生</li></ul><h1 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h1><p>2015/09~2017/06，广州大学 计算机科学与技术专业，获得学士学位<br>2010/09~2013/06，广东科学技术职业学院 软体技术专业，大专毕业</p><h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><p>2018/03~2018/06 Java后台开发工程师 珠海时杰信息科技有限公司 负责后台系统的API开发、实现和维护，负责和前端开发对接。</p><p>2017/09~2017/11 Java后台开发工程师 珠海启裕软件科技有限公司 负责后台系统的API开发、实现和维护，负责和前端开发对接。</p><p>2016/09~2016/10 实习生 广州静远科技开发有限公司 从事FOXTABLE软体开发工作，开发能耗统计分析系统，认真完成项目中的每一项任务。 </p><p>2013/07~2014/07 Java软件开发工程师 易达通网络科技公司 从事Linux环境下的Java软件软件开发工作，工作期间，认真完成项目中的每一项任务。</p><p>2013/02~2013/06 Java Web实习生 珠海联迪软体系统有限公司 从事Java web开发，认真完成项目中的每一项任务。实习期间，参与开发清远市信访前后端系统。</p><h2 id="易达通网络科技公司（-2013年7月-2014年7月-）"><a href="#易达通网络科技公司（-2013年7月-2014年7月-）" class="headerlink" title="易达通网络科技公司（ 2013年7月 ~ 2014年7月 ）"></a>易达通网络科技公司（ 2013年7月 ~ 2014年7月 ）</h2><h3 id="黑龙江教育标引平台"><a href="#黑龙江教育标引平台" class="headerlink" title="黑龙江教育标引平台"></a>黑龙江教育标引平台</h3><p>该项目对书籍进行标引管理，提供标引信息可以获取书籍信息，而且可以通过pdf,equb,txt等自动识别标引进行标注，让教育后台管理人员更加易用的管理。</p><p>此系统整体采用MVC模式的Spring框架，持久层使用的是Mybatis实现，数据源利用的是SpringIoC注入；模型层严格按照JavaBean规范要求；用Spring进行流程的控制，并实现了shiro权限控制管理，采用Redis 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势（查找和操作的时间快）。数据库采用Mysql，适当建立索引机制，进行优化查询。而且采用MongoDB，它包括了一个可以显示数据库中每个操作性能特点的数据库分析器。通过这个分析器你可以找到比预期慢的查询(或写操作);利用这一信息，比如，可以确定是否需要添加索引。</p><h3 id="广州银联的代收付平台系统"><a href="#广州银联的代收付平台系统" class="headerlink" title="广州银联的代收付平台系统"></a>广州银联的代收付平台系统</h3><p>在本项目中本人是高效的执行者角色。本人独立完成了整个项目的数据库索引优化工作，并参与开发与测试等环节中。作为核心程序员，我还完成了系统权限管理、报表查询设计的开发工作。</p><p>此系统整体采用MVC模式的Spring框架，持久层使用的是Spring的HibernateTemplate实现，数据源利用的是SpringIoC注入；模型层严格按照JavaBean规范要求；用Spring进行流程的控制，并实现了国际化，JSP用纯标签进行页面显示。为达到用户名唯一的目的用户注册采用Ajax技术进行后台校验。运用SpringIoC的注入对各层解耦，大大提高了程序的可扩展性，易于维护。本项目采用maven项目管理和构建自动化工具。数据库采用oracle11g开发设计。</p><p>通过拦截器实现了系统权限管理功能，提高安全性。同时通过拦截器记录请求信息，以便进行信息监控和信息统计；检查权限，比如监测请求进入之前是否登录，如果没有可以返回登录页面；监控性能，比如可以通过拦截器记录请求进入处理器的开始时间，在处理后再记录结束时间，由此可以统计该请求的处理时间。Hibernatre的优化，结合数据库，调整批处理的条数，比如batch-size参数是设定每次从数据库中取出的记录条数，一般设置为30,50,100，一般的说法是Oracle 数据库的JDBC驱动的默认值是15，当设置为30或50时，性能就明显提升,如果继续增长，超过100，则性能提升就不明显了。</p><h3 id="SMS-短信收发平台系统"><a href="#SMS-短信收发平台系统" class="headerlink" title="SMS-短信收发平台系统"></a>SMS-短信收发平台系统</h3><p>该系统主要功能是SMS是个集多种短讯业务管理功能于一体的多功能短讯服务运营平台，具有稳定可靠、模组化、开放性、灵活性等特点。Web SMS系统无需安装任何软体，即可轻松管理客户名单及发送短讯，既可加强与客户的联系，可减低市场推广及行政上的资源及成本，是最佳的通讯及宣传工具。2013年，我参与了SMS-短信收发平台系统的开发。</p><p>作为核心程序员之一，我不但完成了发送短信界面设计、权限控制和报表查询的开发工作，更提出了高效的查询下拉列表插件，通过个性化提升了操作员查询体验。 </p><p>该项目对Hibernate进行优化，适当地建立索引，如果数据量很大就少用关联，或者适当地建分区。在适合的的时间点清除缓存，一般会有大量的数据保存在session的一级缓存中，如果缓存太大时就会拖累性能，所以在必要时使用session.Clear()或者session.Erict(Object)清除全部缓存或某个对象。通过优化一对多的映射关系，提高性能，通过设置inverse在多的一方优化查询操作。遇到高并发和大访问量的情况，一、减少http请求（比如Js合并，css合并，图片合并，虽然文件大了，但是减少请求）二、添加异步请求（比如不太重要的东西先不展示，用户需要的时候再放一些事件，jQuery等添加异步请求获取）三、启用游览器缓冲和文件压缩。四、CDN加速（把前端的文件，前端的资源全部放到cdn中，用户就近访问，从而提高访问速度，从一定意义也解决了流量不够用的问题）。</p><h3 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h3><p>easylink好易联支付平台系统<br>LBN易联通支付平台系统<br>SMC商户管理平台系统<br>能耗统计分析系统项⽬<br>清远市信访管理平台系统</p><h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：JSP/PHP/HTML5</li><li>系统框架：Mybatis/Hibernate/Struts2/StringMvc/String/Shiro/ThinkPHP</li><li>前端框架：Bootstrap/Jquery</li><li>数据库相关：MySQL/Oracle</li><li>版本管理、文档和自动化部署工具：Svn/Git/Maven</li><li>单元测试：Junit4</li></ul><h1 id="个⼈评价"><a href="#个⼈评价" class="headerlink" title="个⼈评价"></a>个⼈评价</h1><p>谦虚、谨慎而富有挑战精神，希望您能给我一个展示自我的机会。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;联系方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;手机：1820206&lt;em&gt;*&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Email：*@gmail.com&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="个人简历" scheme="http://auhanjie.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
    
      <category term="个人简历" scheme="http://auhanjie.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>6-1 单链表逆转（20 分）</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou6-2/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou6-2/</id>
    <published>2018-05-06T01:27:00.000Z</published>
    <updated>2019-06-04T22:34:29.035Z</updated>
    
    <content type="html"><![CDATA[<h4 id="6-2-顺序表操作集-20-分"><a href="#6-2-顺序表操作集-20-分" class="headerlink" title="6-2 顺序表操作集 (20 分)"></a>6-2 顺序表操作集 (20 分)</h4><p>本题要求实现顺序表的操作集。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function">List <span class="hljs-title">MakeEmpty</span><span class="hljs-params">()</span></span>; </span><br><span class="line"><span class="hljs-function">Position <span class="hljs-title">Find</span><span class="hljs-params">( List L, ElementType X )</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Insert</span><span class="hljs-params">( List L, ElementType X, Position P )</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Delete</span><span class="hljs-params">( List L, Position P )</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>List</code>结构定义如下：</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Position;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">List</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; <span class="hljs-comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>各个操作函数的定义为：</p><p><code>List MakeEmpty()</code>：创建并返回一个空的线性表；</p><p><code>Position Find( List L, ElementType X )</code>：返回线性表中X的位置。若找不到则返回ERROR；</p><p><code>bool Insert( List L, ElementType X, Position P )</code>：将X插入在位置P并返回true。若空间已满，则打印“FULL”并返回false；如果参数P指向非法位置，则打印“ILLEGAL POSITION”并返回false；</p><p><code>bool Delete( List L, Position P )</code>：将位置P的元素删除并返回true。若参数P指向非法位置，则打印“POSITION P EMPTY”（其中P是参数值）并返回false。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXSIZE 5</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> &#123;<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">bool</span>;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElementType;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Position;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">List</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> &#123;</span></span><br><span class="line">    ElementType Data[MAXSIZE];</span><br><span class="line">    Position Last; <span class="hljs-comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">MakeEmpty</span><span class="hljs-params">()</span></span>; </span><br><span class="line"><span class="hljs-function">Position <span class="hljs-title">Find</span><span class="hljs-params">( List L, ElementType X )</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Insert</span><span class="hljs-params">( List L, ElementType X, Position P )</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Delete</span><span class="hljs-params">( List L, Position P )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    List L;</span><br><span class="line">    ElementType X;</span><br><span class="line">    Position P;</span><br><span class="line">    <span class="hljs-keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    L = MakeEmpty();</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="hljs-keyword">while</span> ( N-- ) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;X);</span><br><span class="line">        <span class="hljs-keyword">if</span> ( Insert(L, X, <span class="hljs-number">0</span>)==<span class="hljs-literal">false</span> )</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" Insertion Error: %d is not in.\n"</span>, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="hljs-keyword">while</span> ( N-- ) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;X);</span><br><span class="line">        P = Find(L, X);</span><br><span class="line">        <span class="hljs-keyword">if</span> ( P == ERROR )</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Finding Error: %d is not in.\n"</span>, X);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d is at position %d.\n"</span>, X, P);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="hljs-keyword">while</span> ( N-- ) &#123;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;P);</span><br><span class="line">        <span class="hljs-keyword">if</span> ( Delete(L, P)==<span class="hljs-literal">false</span> )</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" Deletion Error.\n"</span>);</span><br><span class="line">        <span class="hljs-keyword">if</span> ( Insert(L, <span class="hljs-number">0</span>, P)==<span class="hljs-literal">false</span> )</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" Insertion Error: 0 is not in.\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">3</span><br><span class="line">6 5 1</span><br><span class="line">2</span><br><span class="line">-1 6</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FULL Insertion Error: 6 is not in.</span><br><span class="line">Finding Error: 6 is not in.</span><br><span class="line">5 is at position 0.</span><br><span class="line">1 is at position 4.</span><br><span class="line">POSITION -1 EMPTY Deletion Error.</span><br><span class="line">FULL Insertion Error: 0 is not in.</span><br><span class="line">POSITION 6 EMPTY Deletion Error.</span><br><span class="line">FULL Insertion Error: 0 is not in.</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElementType;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">PtrToNode</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">typedef</span> PtrToNode List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 细节在此不表 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( List L )</span></span>; <span class="hljs-comment">/* 细节在此不表 */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Reverse</span><span class="hljs-params">( List L )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    List L1, L2;</span><br><span class="line">    L1 = Read();</span><br><span class="line">    L2 = Reverse(L1);</span><br><span class="line">    Print(L1);</span><br><span class="line">    Print(L2);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">PtrToNode head=<span class="hljs-literal">NULL</span>;</span><br><span class="line">PtrToNode <span class="hljs-built_in">list</span>=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> len;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;len);</span><br><span class="line"><span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);</span><br><span class="line">head=(PtrToNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Node));</span><br><span class="line">head-&gt;Data=num;</span><br><span class="line">head-&gt;Next=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-built_in">list</span>=head;</span><br><span class="line">len--;</span><br><span class="line"><span class="hljs-keyword">while</span>(len)</span><br><span class="line">&#123;</span><br><span class="line">     PtrToNode node=(PtrToNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);</span><br><span class="line">node-&gt;Data=num;</span><br><span class="line">node-&gt;Next=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-built_in">list</span>-&gt;Next=node;</span><br><span class="line"><span class="hljs-built_in">list</span>=node;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( List L )</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> ;</span><br><span class="line"><span class="hljs-keyword">while</span>(L!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,L-&gt;Data);</span><br><span class="line">    L=L-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Reverse</span><span class="hljs-params">( List L )</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">PtrToNode l1=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-comment">//PtrToNode l3=L;</span></span><br><span class="line">PtrToNode l2=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(L!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">l1=L-&gt;Next;</span><br><span class="line">L-&gt;Next=l2;</span><br><span class="line">l2=L;</span><br><span class="line">L=l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> l2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;6-2-顺序表操作集-20-分&quot;&gt;&lt;a href=&quot;#6-2-顺序表操作集-20-分&quot; class=&quot;headerlink&quot; title=&quot;6-2 顺序表操作集 (20 分)&quot;&gt;&lt;/a&gt;6-2 顺序表操作集 (20 分)&lt;/h4&gt;&lt;p&gt;本题要求实现顺序表的操作集。&lt;/p&gt;
&lt;h3 id=&quot;函数接口定义：&quot;&gt;&lt;a href=&quot;#函数接口定义：&quot; class=&quot;headerlink&quot; title=&quot;函数接口定义：&quot;&gt;&lt;/a&gt;函数接口定义：&lt;/h3&gt;&lt;figure class=&quot;highlight c++ hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;List &lt;span class=&quot;hljs-title&quot;&gt;MakeEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Position &lt;span class=&quot;hljs-title&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L, ElementType X )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L, ElementType X, Position P )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L, Position P )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;List&lt;/code&gt;结构定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++ hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; Position;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LNode&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;List&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElementType Data[MAXSIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Position Last; &lt;span class=&quot;hljs-comment&quot;&gt;/* 保存线性表中最后一个元素的位置 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;各个操作函数的定义为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List MakeEmpty()&lt;/code&gt;：创建并返回一个空的线性表；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Position Find( List L, ElementType X )&lt;/code&gt;：返回线性表中X的位置。若找不到则返回ERROR；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bool Insert( List L, ElementType X, Position P )&lt;/code&gt;：将X插入在位置P并返回true。若空间已满，则打印“FULL”并返回false；如果参数P指向非法位置，则打印“ILLEGAL POSITION”并返回false；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bool Delete( List L, Position P )&lt;/code&gt;：将位置P的元素删除并返回true。若参数P指向非法位置，则打印“POSITION P EMPTY”（其中P是参数值）并返回false。&lt;/p&gt;
&lt;h3 id=&quot;裁判测试程序样例：&quot;&gt;&lt;a href=&quot;#裁判测试程序样例：&quot; class=&quot;headerlink&quot; title=&quot;裁判测试程序样例：&quot;&gt;&lt;/a&gt;裁判测试程序样例：&lt;/h3&gt;&lt;figure class=&quot;highlight c++ hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;define&lt;/span&gt; MAXSIZE 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;define&lt;/span&gt; ERROR -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;enum&lt;/span&gt; &amp;#123;&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;&amp;#125; &lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ElementType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; Position;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LNode&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;List&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;LNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElementType Data[MAXSIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Position Last; &lt;span class=&quot;hljs-comment&quot;&gt;/* 保存线性表中最后一个元素的位置 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;List &lt;span class=&quot;hljs-title&quot;&gt;MakeEmpty&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;Position &lt;span class=&quot;hljs-title&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L, ElementType X )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L, ElementType X, Position P )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L, Position P )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List L;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElementType X;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Position P;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; N;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    L = MakeEmpty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( N-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( Insert(L, X, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)==&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; Insertion Error: %d is not in.\n&quot;&lt;/span&gt;, X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( N-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        P = Find(L, X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( P == ERROR )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Finding Error: %d is not in.\n&quot;&lt;/span&gt;, X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d is at position %d.\n&quot;&lt;/span&gt;, X, P);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ( N-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;P);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( Delete(L, P)==&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; Deletion Error.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; ( Insert(L, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, P)==&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot; Insertion Error: 0 is not in.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* 你的代码将被嵌在这里 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 2 3 4 5 6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 5 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FULL Insertion Error: 6 is not in.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finding Error: 6 is not in.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 is at position 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 is at position 4.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSITION -1 EMPTY Deletion Error.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FULL Insertion Error: 0 is not in.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;POSITION 6 EMPTY Deletion Error.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FULL Insertion Error: 0 is not in.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>6-1 单链表逆转（20 分）</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou6-1/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou6-1/</id>
    <published>2018-05-06T01:26:00.000Z</published>
    <updated>2018-05-06T01:29:24.143Z</updated>
    
    <content type="html"><![CDATA[<h4 id="6-1-单链表逆转（20-分）"><a href="#6-1-单链表逆转（20-分）" class="headerlink" title="6-1 单链表逆转（20 分）"></a>6-1 单链表逆转（20 分）</h4><p>本题要求实现一个函数，将给定的单链表逆转。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List Reverse( List L );</span><br></pre></td></tr></table></figure><p>其中<code>List</code>结构定义如下：</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">PtrToNode</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data; <span class="hljs-comment">/* 存储结点数据 */</span></span><br><span class="line">    PtrToNode   Next; <span class="hljs-comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">typedef</span> PtrToNode List; <span class="hljs-comment">/* 定义单链表类型 */</span></span><br></pre></td></tr></table></figure><p><code>L</code>是给定单链表，函数<code>Reverse</code>要返回被逆转后的链表。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElementType;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">PtrToNode</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">typedef</span> PtrToNode List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 细节在此不表 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( List L )</span></span>; <span class="hljs-comment">/* 细节在此不表 */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Reverse</span><span class="hljs-params">( List L )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    List L1, L2;</span><br><span class="line">    L1 = Read();</span><br><span class="line">    L2 = Reverse(L1);</span><br><span class="line">    Print(L1);</span><br><span class="line">    Print(L2);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 4 5 2</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2 5 4 3 1</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElementType;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">PtrToNode</span>;</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    PtrToNode   Next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">typedef</span> PtrToNode List;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">/* 细节在此不表 */</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( List L )</span></span>; <span class="hljs-comment">/* 细节在此不表 */</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Reverse</span><span class="hljs-params">( List L )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    List L1, L2;</span><br><span class="line">    L1 = Read();</span><br><span class="line">    L2 = Reverse(L1);</span><br><span class="line">    Print(L1);</span><br><span class="line">    Print(L2);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">PtrToNode head=<span class="hljs-literal">NULL</span>;</span><br><span class="line">PtrToNode <span class="hljs-built_in">list</span>=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> len;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;len);</span><br><span class="line"><span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);</span><br><span class="line">head=(PtrToNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Node));</span><br><span class="line">head-&gt;Data=num;</span><br><span class="line">head-&gt;Next=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-built_in">list</span>=head;</span><br><span class="line">len--;</span><br><span class="line"><span class="hljs-keyword">while</span>(len)</span><br><span class="line">&#123;</span><br><span class="line">     PtrToNode node=(PtrToNode)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct Node));</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);</span><br><span class="line">node-&gt;Data=num;</span><br><span class="line">node-&gt;Next=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-built_in">list</span>-&gt;Next=node;</span><br><span class="line"><span class="hljs-built_in">list</span>=node;</span><br><span class="line">len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">( List L )</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> ;</span><br><span class="line"><span class="hljs-keyword">while</span>(L!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>,L-&gt;Data);</span><br><span class="line">    L=L-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">putchar</span>(<span class="hljs-string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">List <span class="hljs-title">Reverse</span><span class="hljs-params">( List L )</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">PtrToNode l1=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-comment">//PtrToNode l3=L;</span></span><br><span class="line">PtrToNode l2=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(L!=<span class="hljs-literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">l1=L-&gt;Next;</span><br><span class="line">L-&gt;Next=l2;</span><br><span class="line">l2=L;</span><br><span class="line">L=l1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> l2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;6-1-单链表逆转（20-分）&quot;&gt;&lt;a href=&quot;#6-1-单链表逆转（20-分）&quot; class=&quot;headerlink&quot; title=&quot;6-1 单链表逆转（20 分）&quot;&gt;&lt;/a&gt;6-1 单链表逆转（20 分）&lt;/h4&gt;&lt;p&gt;本题要求实现一个函数，将给定的单链表逆转。&lt;/p&gt;
&lt;h3 id=&quot;函数接口定义：&quot;&gt;&lt;a href=&quot;#函数接口定义：&quot; class=&quot;headerlink&quot; title=&quot;函数接口定义：&quot;&gt;&lt;/a&gt;函数接口定义：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List Reverse( List L );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;List&lt;/code&gt;结构定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;PtrToNode&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElementType Data; &lt;span class=&quot;hljs-comment&quot;&gt;/* 存储结点数据 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PtrToNode   Next; &lt;span class=&quot;hljs-comment&quot;&gt;/* 指向下一个结点的指针 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; PtrToNode List; &lt;span class=&quot;hljs-comment&quot;&gt;/* 定义单链表类型 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt;是给定单链表，函数&lt;code&gt;Reverse&lt;/code&gt;要返回被逆转后的链表。&lt;/p&gt;
&lt;h3 id=&quot;裁判测试程序样例：&quot;&gt;&lt;a href=&quot;#裁判测试程序样例：&quot; class=&quot;headerlink&quot; title=&quot;裁判测试程序样例：&quot;&gt;&lt;/a&gt;裁判测试程序样例：&lt;/h3&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;#&lt;span class=&quot;hljs-meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;hljs-meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; ElementType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt; *&lt;span class=&quot;hljs-title&quot;&gt;PtrToNode&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ElementType Data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PtrToNode   Next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;typedef&lt;/span&gt; PtrToNode List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;List &lt;span class=&quot;hljs-title&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* 细节在此不表 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L )&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;hljs-comment&quot;&gt;/* 细节在此不表 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;List &lt;span class=&quot;hljs-title&quot;&gt;Reverse&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;( List L )&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List L1, L2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    L1 = Read();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    L2 = Reverse(L1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Print(L1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Print(L2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/* 你的代码将被嵌在这里 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 4 5 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 5 4 3 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-38 数列求和-加强版（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-38/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-38/</id>
    <published>2018-04-15T13:38:00.000Z</published>
    <updated>2019-06-04T22:59:37.305Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-38-数列求和-加强版（20-分）"><a href="#7-38-数列求和-加强版（20-分）" class="headerlink" title="7-38 数列求和-加强版（20 分）"></a>7-38 数列求和-加强版（20 分）</h4><p>给定某数字$A(1 \leq A \leq 9)$以及非负整数$N(0 \leq N \leq 100000)$，求数列之和$S=A+A A+A A A+\cdots+A A \cdots A(N \text{个} A)。$例如$A=1, N=3$时，$S=1+11+111=123$。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入数字A与非负整数N。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出其N项数列之和S的值。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"><span class="hljs-keyword">int</span> num[<span class="hljs-number">1000000</span>]; </span><br><span class="line"> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span></span><br><span class="line"><span class="hljs-function"></span>&#123; </span><br><span class="line"> <span class="hljs-keyword">int</span> A; </span><br><span class="line"> <span class="hljs-keyword">int</span> N;</span><br><span class="line"> <span class="hljs-keyword">int</span> i; </span><br><span class="line"> <span class="hljs-keyword">int</span> j; </span><br><span class="line"> <span class="hljs-keyword">int</span> t; </span><br><span class="line"> <span class="hljs-keyword">int</span> flag; </span><br><span class="line"> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;A,&amp;N); </span><br><span class="line"> <span class="hljs-keyword">if</span>(N == <span class="hljs-number">0</span>) </span><br><span class="line"> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"0\n"</span>); </span><br><span class="line"> <span class="hljs-keyword">else</span> </span><br><span class="line"> &#123; </span><br><span class="line">flag = <span class="hljs-number">0</span>; </span><br><span class="line"><span class="hljs-keyword">for</span>(i=N, j=<span class="hljs-number">0</span>; i&gt;=<span class="hljs-number">1</span>; i--, j++) </span><br><span class="line"> &#123; </span><br><span class="line">t = A*i + flag; </span><br><span class="line">flag = t / <span class="hljs-number">10</span>; </span><br><span class="line">num[j] = t % <span class="hljs-number">10</span>; </span><br><span class="line">&#125; </span><br><span class="line"> <span class="hljs-keyword">if</span>(flag &gt; <span class="hljs-number">0</span>)</span><br><span class="line"> &#123; </span><br><span class="line"> num[j] = flag; </span><br><span class="line"> j++; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="hljs-keyword">for</span>(i=j<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) </span><br><span class="line">&#123; </span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,num[i]); </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-38-数列求和-加强版（20-分）&quot;&gt;&lt;a href=&quot;#7-38-数列求和-加强版（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-38 数列求和-加强版（20 分）&quot;&gt;&lt;/a&gt;7-38 数列求和-加强版（20 分）&lt;/h4&gt;&lt;p&gt;给定某数字$A(1 \leq A \leq 9)$以及非负整数$N(0 \leq N \leq 100000)$，求数列之和$S=A+A A+A A A+\cdots+A A \cdots A(N \text{个} A)。$例如$A=1, N=3$时，$S=1+11+111=123$。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入数字A与非负整数N。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;输出其N项数列之和S的值。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-37 整数分解为若干项之和（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-37/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-37/</id>
    <published>2018-04-15T13:37:00.000Z</published>
    <updated>2019-06-05T01:44:35.910Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-37-整数分解为若干项之和（20-分）"><a href="#7-37-整数分解为若干项之和（20-分）" class="headerlink" title="7-37 整数分解为若干项之和（20 分）"></a>7-37 整数分解为若干项之和（20 分）</h4><p>将一个正整数N分解成几个正整数相加，可以有多种分解方法，例如$17=6+1, \quad 7=5+2, \quad 7=5+1+1, \dots$。编程求出正整数N的所有整数分解式子。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含一个测试用例，即正整数$N (0\lt N\leq 30)$。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按递增顺序输出N的所有整数分解式子。递增顺序是指：对于两个分解序列N1={n1,n2,⋯}和N2={m1,m2,⋯}，若存在i使得n1=m1,⋯,ni=mi，但是ni+1&lt;mi+1,则N1序列必定在N2序列之前输出。每个式子由小到大相加，式子间用分号隔开，且每输出4个式子后换行。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7=1+1+1+1+1+1+1;7=1+1+1+1+1+2;7=1+1+1+1+3;7=1+1+1+2+2</span><br><span class="line">7=1+1+1+4;7=1+1+2+3;7=1+1+5;7=1+2+2+2</span><br><span class="line">7=1+2+4;7=1+3+3;7=1+6;7=2+2+3</span><br><span class="line">7=2+5;7=3+4;7=7</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">深度优先搜索</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">int</span> item[<span class="hljs-number">31</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> top=<span class="hljs-number">0</span>;<span class="hljs-comment">/*当前数组元素个数*/</span></span><br><span class="line"><span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<span class="hljs-comment">/*累加和*/</span></span><br><span class="line"><span class="hljs-keyword">int</span> n;<span class="hljs-comment">/*所给的数*/</span></span><br><span class="line"><span class="hljs-keyword">int</span> k;<span class="hljs-comment">/*记录每行输出是否满了四个*/</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">   <span class="hljs-keyword">if</span>(sum==n)&#123;</span><br><span class="line">       k++;</span><br><span class="line">       <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d=%d"</span>,n,item[<span class="hljs-number">0</span>]);</span><br><span class="line">       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=top<span class="hljs-number">-1</span>;i++)</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"+%d"</span>,item[i]);</span><br><span class="line">       <span class="hljs-keyword">if</span>(k%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>||top==<span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">       <span class="hljs-keyword">else</span></span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">";"</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">if</span>(sum&gt;n)&#123;</span><br><span class="line">       <span class="hljs-keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=number;i&lt;=n;i++)&#123;</span><br><span class="line">       sum=sum+i;</span><br><span class="line">       item[top++]=i;</span><br><span class="line">       dfs(i);</span><br><span class="line">       sum=sum-i;</span><br><span class="line">       top--;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    dfs(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-37-整数分解为若干项之和（20-分）&quot;&gt;&lt;a href=&quot;#7-37-整数分解为若干项之和（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-37 整数分解为若干项之和（20 分）&quot;&gt;&lt;/a&gt;7-37 整数分解为若干项之和（20 分）&lt;/h4&gt;&lt;p&gt;将一个正整数N分解成几个正整数相加，可以有多种分解方法，例如$17=6+1, \quad 7=5+2, \quad 7=5+1+1, \dots$。编程求出正整数N的所有整数分解式子。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;每个输入包含一个测试用例，即正整数$N (0\lt N\leq 30)$。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;按递增顺序输出N的所有整数分解式子。递增顺序是指：对于两个分解序列N1={n1,n2,⋯}和N2={m1,m2,⋯}，若存在i使得n1=m1,⋯,ni=mi，但是ni+1&amp;lt;mi+1,则N1序列必定在N2序列之前输出。每个式子由小到大相加，式子间用分号隔开，且每输出4个式子后换行。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7=1+1+1+1+1+1+1;7=1+1+1+1+1+2;7=1+1+1+1+3;7=1+1+1+2+2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7=1+1+1+4;7=1+1+2+3;7=1+1+5;7=1+2+2+2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7=1+2+4;7=1+3+3;7=1+6;7=2+2+3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7=2+5;7=3+4;7=7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-36 复数四则运算（15 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-36/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-36/</id>
    <published>2018-04-15T13:36:00.000Z</published>
    <updated>2018-04-15T14:09:42.701Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-36-复数四则运算（15-分）"><a href="#7-36-复数四则运算（15-分）" class="headerlink" title="7-36 复数四则运算（15 分）"></a>7-36 复数四则运算（15 分）</h4><p>本题要求编写程序，计算2个复数的和、差、积、商。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中按照<code>a1 b1 a2 b2</code>的格式给出2个复数C1=<code>a1+b1i</code>和C2=<code>a2+b2i</code>的实部和虚部。题目保证C2不为0。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>分别在4行中按照<code>(a1+b1i) 运算符 (a2+b2i) = 结果</code>的格式顺序输出2个复数的和、差、积、商，数字精确到小数点后1位。如果结果的实部或者虚部为0，则不输出。如果结果为0，则输出0.0。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3.08 -2.04 5.06</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(2.0+3.1i) + (-2.0+5.1i) = 8.1i</span><br><span class="line">(2.0+3.1i) - (-2.0+5.1i) = 4.0-2.0i</span><br><span class="line">(2.0+3.1i) * (-2.0+5.1i) = -19.7+3.8i</span><br><span class="line">(2.0+3.1i) / (-2.0+5.1i) = 0.4-0.6i</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 -1 -1.01</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1.0+1.0i) + (-1.0-1.0i) = 0.0</span><br><span class="line">(1.0+1.0i) - (-1.0-1.0i) = 2.0+2.0i</span><br><span class="line">(1.0+1.0i) * (-1.0-1.0i) = -2.0i</span><br><span class="line">(1.0+1.0i) / (-1.0-1.0i) = -1.0</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//两个复数运算前不变化，但输出时要保留后一位；</span></span><br><span class="line"><span class="hljs-comment">//运算结果，由题意，要先保留一位小数</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">double</span> num1;</span><br><span class="line"><span class="hljs-keyword">double</span> num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-keyword">char</span> item[<span class="hljs-number">4</span>]=<span class="hljs-string">"+-*/"</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myprintf</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num1,<span class="hljs-keyword">double</span> num2,<span class="hljs-keyword">int</span> flag)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-comment">//运算结果输出</span></span><br><span class="line"> <span class="hljs-keyword">if</span>(num1==<span class="hljs-number">0</span>&amp;&amp;num2==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0.0"</span>);</span><br><span class="line"> <span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(num1!=<span class="hljs-number">0</span>&amp;&amp;num2==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f"</span>,num1);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num1==<span class="hljs-number">0</span>&amp;&amp;num2!=<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1fi"</span>,num2);</span><br><span class="line"><span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f"</span>,num1);</span><br><span class="line"><span class="hljs-keyword">if</span>(num2&gt;<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"+%.1fi"</span>,num2);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1fi"</span>,num2);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//复数输出</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num2&lt;<span class="hljs-number">0</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f%.1fi"</span>,num1,num2);</span><br><span class="line">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f+%.1fi"</span>,num1,num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">simpl</span><span class="hljs-params">(<span class="hljs-keyword">double</span> num)</span></span>&#123;<span class="hljs-comment">//运算结果保留一位小数</span></span><br><span class="line"><span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>)</span><br><span class="line">num=(<span class="hljs-keyword">double</span>)<span class="hljs-built_in">floor</span>((num+<span class="hljs-number">0.05</span>)*<span class="hljs-number">10</span>)/<span class="hljs-number">10</span>;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num&lt;<span class="hljs-number">0</span>)&#123;</span><br><span class="line">num=<span class="hljs-built_in">fabs</span>(num);</span><br><span class="line">num=-(<span class="hljs-keyword">double</span>)<span class="hljs-built_in">floor</span>((num+<span class="hljs-number">0.05</span>)*<span class="hljs-number">10</span>)/<span class="hljs-number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getresult</span><span class="hljs-params">(struct data cal[],<span class="hljs-keyword">int</span> time)</span><span class="hljs-comment">//运算</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"> <span class="hljs-keyword">double</span> temp1,temp2,temp;</span><br><span class="line"> <span class="hljs-keyword">switch</span>(time)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:cal[<span class="hljs-number">2</span>].num1=cal[<span class="hljs-number">0</span>].num1+cal[<span class="hljs-number">1</span>].num1;</span><br><span class="line">cal[<span class="hljs-number">2</span>].num2=cal[<span class="hljs-number">0</span>].num2+cal[<span class="hljs-number">1</span>].num2;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"> <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:cal[<span class="hljs-number">2</span>].num1=cal[<span class="hljs-number">0</span>].num1-cal[<span class="hljs-number">1</span>].num1;</span><br><span class="line">cal[<span class="hljs-number">2</span>].num2=cal[<span class="hljs-number">0</span>].num2-cal[<span class="hljs-number">1</span>].num2;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"> <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:cal[<span class="hljs-number">2</span>].num1=cal[<span class="hljs-number">0</span>].num1*cal[<span class="hljs-number">1</span>].num1-cal[<span class="hljs-number">0</span>].num2*cal[<span class="hljs-number">1</span>].num2;</span><br><span class="line">cal[<span class="hljs-number">2</span>].num2=cal[<span class="hljs-number">0</span>].num1*cal[<span class="hljs-number">1</span>].num2+cal[<span class="hljs-number">0</span>].num2*cal[<span class="hljs-number">1</span>].num1;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"> <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:temp1=cal[<span class="hljs-number">0</span>].num1*cal[<span class="hljs-number">1</span>].num1+cal[<span class="hljs-number">0</span>].num2*cal[<span class="hljs-number">1</span>].num2;</span><br><span class="line">temp2=cal[<span class="hljs-number">0</span>].num2*cal[<span class="hljs-number">1</span>].num1-cal[<span class="hljs-number">0</span>].num1*cal[<span class="hljs-number">1</span>].num2;</span><br><span class="line">temp=cal[<span class="hljs-number">1</span>].num2*cal[<span class="hljs-number">1</span>].num2+cal[<span class="hljs-number">1</span>].num1*cal[<span class="hljs-number">1</span>].num1;</span><br><span class="line">cal[<span class="hljs-number">2</span>].num1=temp1/temp;</span><br><span class="line">cal[<span class="hljs-number">2</span>].num2=temp2/temp;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> cal[<span class="hljs-number">2</span>].num1=simpl(cal[<span class="hljs-number">2</span>].num1);</span><br><span class="line"> cal[<span class="hljs-number">2</span>].num2=simpl(cal[<span class="hljs-number">2</span>].num2);</span><br><span class="line"> myprintf(cal[<span class="hljs-number">2</span>].num1,cal[<span class="hljs-number">2</span>].num2,<span class="hljs-number">1</span>);</span><br><span class="line"> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span> <span class="hljs-title">cal</span>[3];</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lf%lf"</span>,&amp;cal[i].num1,&amp;cal[i].num2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"("</span>);</span><br><span class="line">myprintf(cal[<span class="hljs-number">0</span>].num1,cal[<span class="hljs-number">0</span>].num2,<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">")"</span>);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">" %c "</span>,item[i]);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"("</span>);</span><br><span class="line">myprintf(cal[<span class="hljs-number">1</span>].num1,cal[<span class="hljs-number">1</span>].num2,<span class="hljs-number">0</span>);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">") = "</span>);</span><br><span class="line"><span class="hljs-comment">//printf(" = ",item[i]);</span></span><br><span class="line">getresult(cal,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-36-复数四则运算（15-分）&quot;&gt;&lt;a href=&quot;#7-36-复数四则运算（15-分）&quot; class=&quot;headerlink&quot; title=&quot;7-36 复数四则运算（15 分）&quot;&gt;&lt;/a&gt;7-36 复数四则运算（15 分）&lt;/h4&gt;&lt;p&gt;本题要求编写程序，计算2个复数的和、差、积、商。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在一行中按照&lt;code&gt;a1 b1 a2 b2&lt;/code&gt;的格式给出2个复数C1=&lt;code&gt;a1+b1i&lt;/code&gt;和C2=&lt;code&gt;a2+b2i&lt;/code&gt;的实部和虚部。题目保证C2不为0。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;分别在4行中按照&lt;code&gt;(a1+b1i) 运算符 (a2+b2i) = 结果&lt;/code&gt;的格式顺序输出2个复数的和、差、积、商，数字精确到小数点后1位。如果结果的实部或者虚部为0，则不输出。如果结果为0，则输出0.0。&lt;/p&gt;
&lt;h3 id=&quot;输入样例1：&quot;&gt;&lt;a href=&quot;#输入样例1：&quot; class=&quot;headerlink&quot; title=&quot;输入样例1：&quot;&gt;&lt;/a&gt;输入样例1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2 3.08 -2.04 5.06&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例1：&quot;&gt;&lt;a href=&quot;#输出样例1：&quot; class=&quot;headerlink&quot; title=&quot;输出样例1：&quot;&gt;&lt;/a&gt;输出样例1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(2.0+3.1i) + (-2.0+5.1i) = 8.1i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2.0+3.1i) - (-2.0+5.1i) = 4.0-2.0i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2.0+3.1i) * (-2.0+5.1i) = -19.7+3.8i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2.0+3.1i) / (-2.0+5.1i) = 0.4-0.6i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例2：&quot;&gt;&lt;a href=&quot;#输入样例2：&quot; class=&quot;headerlink&quot; title=&quot;输入样例2：&quot;&gt;&lt;/a&gt;输入样例2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 1 -1 -1.01&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例2：&quot;&gt;&lt;a href=&quot;#输出样例2：&quot; class=&quot;headerlink&quot; title=&quot;输出样例2：&quot;&gt;&lt;/a&gt;输出样例2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1.0+1.0i) + (-1.0-1.0i) = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1.0+1.0i) - (-1.0-1.0i) = 2.0+2.0i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1.0+1.0i) * (-1.0-1.0i) = -2.0i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1.0+1.0i) / (-1.0-1.0i) = -1.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-35 有理数均值（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-35/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-35/</id>
    <published>2018-04-15T13:34:00.000Z</published>
    <updated>2019-06-04T23:08:34.587Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-35-有理数均值（20-分）"><a href="#7-35-有理数均值（20-分）" class="headerlink" title="7-35 有理数均值（20 分）"></a>7-35 有理数均值（20 分）</h4><p>本题要求编写程序，计算N个有理数的平均值。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数$N（\leq 100）$；第二行中按照<code>a1/b1 a2/b2 …</code>的格式给出N个分数形式的有理数，其中分子和分母全是整形范围内的整数；如果是负数，则负号一定出现在最前面。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按照<code>a/b</code>的格式输出N个有理数的平均值。注意必须是该有理数的最简分数形式，若分母为1，则只输出分子。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1/2 1/6 3/6 -5/10</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1/6</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> q)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span> (q==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> p;</span><br><span class="line"><span class="hljs-keyword">int</span> r = p%q;</span><br><span class="line"><span class="hljs-keyword">return</span> gcd(q,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> N,sumA=<span class="hljs-number">0</span>,sumB=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;N);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>,b=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d/%d"</span>,&amp;a,&amp;b);</span><br><span class="line">sumA *= b;</span><br><span class="line">sumA += a*sumB;</span><br><span class="line">sumB *= b;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(i==N<span class="hljs-number">-1</span>) sumB*=N;</span><br><span class="line"><span class="hljs-keyword">int</span> divisor = gcd(sumA,sumB);</span><br><span class="line">sumA/=divisor;sumB/=divisor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (sumA==<span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"0"</span>);</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sumB==<span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,sumA);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d/%d"</span>,sumA,sumB);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-35-有理数均值（20-分）&quot;&gt;&lt;a href=&quot;#7-35-有理数均值（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-35 有理数均值（20 分）&quot;&gt;&lt;/a&gt;7-35 有理数均值（20 分）&lt;/h4&gt;&lt;p&gt;本题要求编写程序，计算N个有理数的平均值。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入第一行给出正整数$N（\leq 100）$；第二行中按照&lt;code&gt;a1/b1 a2/b2 …&lt;/code&gt;的格式给出N个分数形式的有理数，其中分子和分母全是整形范围内的整数；如果是负数，则负号一定出现在最前面。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;在一行中按照&lt;code&gt;a/b&lt;/code&gt;的格式输出N个有理数的平均值。注意必须是该有理数的最简分数形式，若分母为1，则只输出分子。&lt;/p&gt;
&lt;h3 id=&quot;输入样例1：&quot;&gt;&lt;a href=&quot;#输入样例1：&quot; class=&quot;headerlink&quot; title=&quot;输入样例1：&quot;&gt;&lt;/a&gt;输入样例1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1/2 1/6 3/6 -5/10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例1：&quot;&gt;&lt;a href=&quot;#输出样例1：&quot; class=&quot;headerlink&quot; title=&quot;输出样例1：&quot;&gt;&lt;/a&gt;输出样例1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1/6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例2：&quot;&gt;&lt;a href=&quot;#输入样例2：&quot; class=&quot;headerlink&quot; title=&quot;输入样例2：&quot;&gt;&lt;/a&gt;输入样例2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4/3 2/3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例2：&quot;&gt;&lt;a href=&quot;#输出样例2：&quot; class=&quot;headerlink&quot; title=&quot;输出样例2：&quot;&gt;&lt;/a&gt;输出样例2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-34 通讯录的录入与显示（10 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-34/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-34/</id>
    <published>2018-04-15T13:33:00.000Z</published>
    <updated>2019-06-04T23:08:40.724Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-34-通讯录的录入与显示（10-分）"><a href="#7-34-通讯录的录入与显示（10-分）" class="headerlink" title="7-34 通讯录的录入与显示（10 分）"></a>7-34 通讯录的录入与显示（10 分）</h4><p>通讯录中的一条记录包含下述基本信息：朋友的姓名、出生日期、性别、固定电话号码、移动电话号码。 本题要求编写程序，录入N条记录，并且根据要求显示任意某条记录。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数$N（\leq 10）$；随后N行，每行按照格式<code>姓名 生日 性别 固话 手机</code>给出一条记录。其中<code>姓名</code>是不超过10个字符、不包含空格的非空字符串；生日按<code>yyyy/mm/dd</code>的格式给出年月日；性别用<code>M</code>表示“男”、<code>F</code>表示“女”；<code>固话</code>和<code>手机</code>均为不超过15位的连续数字，前面有可能出现<code>+</code>。</p><p>在通讯录记录输入完成后，最后一行给出正整数K，并且随后给出K个整数，表示要查询的记录编号（从0到N−1顺序编号）。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每一条要查询的记录编号，在一行中按照<code>姓名 固话 手机 性别 生日</code>的格式输出该记录。若要查询的记录不存在，则输出<code>Not Found</code>。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Chris 1984/03/10 F +86181779452 13707010007</span><br><span class="line">LaoLao 1967/11/30 F 057187951100 +8618618623333</span><br><span class="line">QiaoLin 1980/01/01 M 84172333 10086</span><br><span class="line">2 1 7</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LaoLao 057187951100 +8618618623333 F 1967/11/30</span><br><span class="line">Not Found</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>&#123;</span></span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">11</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> birthday[<span class="hljs-number">11</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> sex;</span><br><span class="line"><span class="hljs-keyword">char</span> num[<span class="hljs-number">17</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> phone[<span class="hljs-number">17</span>];</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">next</span>;</span></span><br><span class="line">&#125;type;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(type* head,<span class="hljs-keyword">int</span> N)</span></span>;</span><br><span class="line"><span class="hljs-function">type* <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;    </span><br><span class="line">type *head;</span><br><span class="line"><span class="hljs-keyword">int</span> N;</span><br><span class="line"><span class="hljs-comment">//int i=0,j=0;</span></span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;N);</span><br><span class="line">head=input(N);</span><br><span class="line">output(head,N);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">type* <span class="hljs-title">input</span><span class="hljs-params">(<span class="hljs-keyword">int</span> N)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">type *p,*q,*head;</span><br><span class="line"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;</span><br><span class="line">p=q=(type*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(type));</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++)    &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %s %c %s %s\n"</span>,p-&gt;name,p-&gt;birthday,&amp;(p-&gt;sex),p-&gt;num,p-&gt;phone);</span><br><span class="line"><span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)    &#123;</span><br><span class="line">head=p;</span><br><span class="line">&#125;    <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">q-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line">q=p;</span><br><span class="line">p=(type*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(type));</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;next=<span class="hljs-literal">NULL</span>;</span><br><span class="line">p-&gt;next=<span class="hljs-literal">NULL</span>;</span><br><span class="line"><span class="hljs-keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">output</span><span class="hljs-params">(type* head,<span class="hljs-keyword">int</span> N)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;    </span><br><span class="line"><span class="hljs-keyword">int</span> K,i,j;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;K);</span><br><span class="line"><span class="hljs-keyword">int</span> a[K];</span><br><span class="line">type *q;</span><br><span class="line"><span class="hljs-comment">//p=q=(type*)malloc(sizeof(type));</span></span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;K;i++)    &#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;K;i++)    &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]&lt;N&amp;&amp;a[i]&gt;=<span class="hljs-number">0</span>)    &#123;</span><br><span class="line">q=head;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;a[i];j++)    &#123;</span><br><span class="line">q=q-&gt;next;                </span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s %s %s %c %s\n"</span>,q-&gt;name,q-&gt;num,q-&gt;phone,q-&gt;sex,q-&gt;birthday);    </span><br><span class="line">&#125;    <span class="hljs-keyword">else</span>    &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Not Found\n"</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-34-通讯录的录入与显示（10-分）&quot;&gt;&lt;a href=&quot;#7-34-通讯录的录入与显示（10-分）&quot; class=&quot;headerlink&quot; title=&quot;7-34 通讯录的录入与显示（10 分）&quot;&gt;&lt;/a&gt;7-34 通讯录的录入与显示（10 分）&lt;/h4&gt;&lt;p&gt;通讯录中的一条记录包含下述基本信息：朋友的姓名、出生日期、性别、固定电话号码、移动电话号码。 本题要求编写程序，录入N条记录，并且根据要求显示任意某条记录。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在第一行给出正整数$N（\leq 10）$；随后N行，每行按照格式&lt;code&gt;姓名 生日 性别 固话 手机&lt;/code&gt;给出一条记录。其中&lt;code&gt;姓名&lt;/code&gt;是不超过10个字符、不包含空格的非空字符串；生日按&lt;code&gt;yyyy/mm/dd&lt;/code&gt;的格式给出年月日；性别用&lt;code&gt;M&lt;/code&gt;表示“男”、&lt;code&gt;F&lt;/code&gt;表示“女”；&lt;code&gt;固话&lt;/code&gt;和&lt;code&gt;手机&lt;/code&gt;均为不超过15位的连续数字，前面有可能出现&lt;code&gt;+&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在通讯录记录输入完成后，最后一行给出正整数K，并且随后给出K个整数，表示要查询的记录编号（从0到N−1顺序编号）。数字间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;对每一条要查询的记录编号，在一行中按照&lt;code&gt;姓名 固话 手机 性别 生日&lt;/code&gt;的格式输出该记录。若要查询的记录不存在，则输出&lt;code&gt;Not Found&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Chris 1984/03/10 F +86181779452 13707010007&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LaoLao 1967/11/30 F 057187951100 +8618618623333&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;QiaoLin 1980/01/01 M 84172333 10086&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 1 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LaoLao 057187951100 +8618618623333 F 1967/11/30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Not Found&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-33 有理数加法（15 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-33/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-33/</id>
    <published>2018-04-15T13:31:00.000Z</published>
    <updated>2018-04-15T13:32:13.944Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-33-有理数加法（15-分）"><a href="#7-33-有理数加法（15-分）" class="headerlink" title="7-33 有理数加法（15 分）"></a>7-33 有理数加法（15 分）</h4><p>本题要求编写程序，计算两个有理数的和。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中按照<code>a1/b1 a2/b2</code>的格式给出两个分数形式的有理数，其中分子和分母全是整形范围内的正整数。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按照<code>a/b</code>的格式输出两个有理数的和。注意必须是该有理数的最简分数形式，若分母为1，则只输出分子。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1/3 1/6</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1/2</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fraction</span>&#123;</span></span><br><span class="line"><span class="hljs-keyword">int</span> a;   <span class="hljs-comment">//分子</span></span><br><span class="line"><span class="hljs-keyword">int</span> b;  <span class="hljs-comment">//分母</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fraction</span> <span class="hljs-title">f1</span>, <span class="hljs-title">f2</span>, <span class="hljs-title">f3</span>;</span></span><br><span class="line"><span class="hljs-keyword">int</span> g;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d/%d %d/%d"</span>, &amp;f1.a, &amp;f1.b, &amp;f2.a, &amp;f2.b);</span><br><span class="line">f3.a = f1.a*f2.b + f2.a*f1.b;</span><br><span class="line">f3.b = f1.b*f2.b;</span><br><span class="line">g = gcd(f3.a, f3.b);</span><br><span class="line">f3.a /= g;</span><br><span class="line">f3.b /= g;</span><br><span class="line"><span class="hljs-keyword">if</span> (f3.b == <span class="hljs-number">1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, f3.a);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d/%d"</span>, f3.a, f3.b);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> r;</span><br><span class="line"><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">r = x%y;</span><br><span class="line"><span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>)</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">x = y;</span><br><span class="line">y = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-33-有理数加法（15-分）&quot;&gt;&lt;a href=&quot;#7-33-有理数加法（15-分）&quot; class=&quot;headerlink&quot; title=&quot;7-33 有理数加法（15 分）&quot;&gt;&lt;/a&gt;7-33 有理数加法（15 分）&lt;/h4&gt;&lt;p&gt;本题要求编写程序，计算两个有理数的和。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在一行中按照&lt;code&gt;a1/b1 a2/b2&lt;/code&gt;的格式给出两个分数形式的有理数，其中分子和分母全是整形范围内的正整数。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;在一行中按照&lt;code&gt;a/b&lt;/code&gt;的格式输出两个有理数的和。注意必须是该有理数的最简分数形式，若分母为1，则只输出分子。&lt;/p&gt;
&lt;h3 id=&quot;输入样例1：&quot;&gt;&lt;a href=&quot;#输入样例1：&quot; class=&quot;headerlink&quot; title=&quot;输入样例1：&quot;&gt;&lt;/a&gt;输入样例1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1/3 1/6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例1：&quot;&gt;&lt;a href=&quot;#输出样例1：&quot; class=&quot;headerlink&quot; title=&quot;输出样例1：&quot;&gt;&lt;/a&gt;输出样例1：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1/2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例2：&quot;&gt;&lt;a href=&quot;#输入样例2：&quot; class=&quot;headerlink&quot; title=&quot;输入样例2：&quot;&gt;&lt;/a&gt;输入样例2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4/3 2/3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例2：&quot;&gt;&lt;a href=&quot;#输出样例2：&quot; class=&quot;headerlink&quot; title=&quot;输出样例2：&quot;&gt;&lt;/a&gt;输出样例2：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-32 说反话-加强版（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-32/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-32/</id>
    <published>2018-04-15T13:30:00.000Z</published>
    <updated>2018-04-15T13:30:28.734Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-32-说反话-加强版（20-分）"><a href="#7-32-说反话-加强版（20-分）" class="headerlink" title="7-32 说反话-加强版（20 分）"></a>7-32 说反话-加强版（20 分）</h4><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有1个空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World   Here I Come</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">500001</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> *p;</span><br><span class="line"><span class="hljs-keyword">int</span> i;</span><br><span class="line"><span class="hljs-keyword">int</span> m=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;    </span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500001</span>;i++)&#123;   <span class="hljs-comment">//此处i&lt;500000就会在最后一个测试点报错</span></span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;a[i]);</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">'\n'</span>)&#123;</span><br><span class="line">m=i;</span><br><span class="line">a[i]=<span class="hljs-string">'\0'</span>;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;<span class="hljs-comment">//从a[0]到a[i-1]共有i个字符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span>(i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i]!=<span class="hljs-string">' '</span>&amp;&amp;a[i<span class="hljs-number">-1</span>]!=<span class="hljs-string">' '</span>&amp;&amp;i!=<span class="hljs-number">0</span>)&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]!=<span class="hljs-string">' '</span>&amp;&amp;a[i<span class="hljs-number">-1</span>]==<span class="hljs-string">' '</span>)&#123;</span><br><span class="line">num++;</span><br><span class="line">flag++;</span><br><span class="line">p=&amp;a[i];</span><br><span class="line">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]!=<span class="hljs-string">' '</span>&amp;&amp;i==<span class="hljs-number">0</span>)&#123;</span><br><span class="line">num++;</span><br><span class="line">flag++;</span><br><span class="line">p=&amp;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>&amp;&amp;num!=<span class="hljs-number">0</span>)&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(;num&gt;<span class="hljs-number">0</span>;num--)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,*p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line">num=<span class="hljs-number">0</span>;</span><br><span class="line">flag++;<span class="hljs-comment">//防止重复判断flag==1的情况</span></span><br><span class="line">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag&gt;<span class="hljs-number">1</span>&amp;&amp;num!=<span class="hljs-number">0</span>)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a[i<span class="hljs-number">-1</span>]==<span class="hljs-string">' '</span>||i==<span class="hljs-number">0</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(;num&gt;<span class="hljs-number">0</span>;num--)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,*p);</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line">num=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-32-说反话-加强版（20-分）&quot;&gt;&lt;a href=&quot;#7-32-说反话-加强版（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-32 说反话-加强版（20 分）&quot;&gt;&lt;/a&gt;7-32 说反话-加强版（20 分）&lt;/h4&gt;&lt;p&gt;给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有1个空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello World   Here I Come&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Come I Here World Hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-31 字符串循环左移（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-31/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-31/</id>
    <published>2018-04-15T13:28:00.000Z</published>
    <updated>2018-04-15T13:28:59.109Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-31-字符串循环左移（20-分）"><a href="#7-31-字符串循环左移（20-分）" class="headerlink" title="7-31 字符串循环左移（20 分）"></a>7-31 字符串循环左移（20 分）</h4><p>输入一个字符串和一个非负整数N，要求将字符串循环左移N次。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第1行中给出一个不超过100个字符长度的、以回车结束的非空字符串；第2行给出非负整数N。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出循环左移N次后的字符串。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llo World!He</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> str[<span class="hljs-number">101</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> c;</span><br><span class="line"><span class="hljs-keyword">while</span>((c=getchar()) != <span class="hljs-string">'\n'</span>)&#123;<span class="hljs-comment">// 记录字符串</span></span><br><span class="line">str[i] = (<span class="hljs-keyword">char</span>) c;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">str[i] = <span class="hljs-string">'\0'</span>;</span><br><span class="line"><span class="hljs-keyword">char</span> *start;</span><br><span class="line">start = &amp;str[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> sp;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;sp);</span><br><span class="line"><span class="hljs-keyword">char</span> sa[<span class="hljs-number">101</span>]; <span class="hljs-comment">//生成新的字符串</span></span><br><span class="line"></span><br><span class="line">sp = sp%(<span class="hljs-built_in">strlen</span>(str));</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(sa, start+sp);</span><br><span class="line"> *(start + sp) = <span class="hljs-string">'\0'</span>;</span><br><span class="line"><span class="hljs-built_in">strcat</span>(sa, start);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, sa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-31-字符串循环左移（20-分）&quot;&gt;&lt;a href=&quot;#7-31-字符串循环左移（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-31 字符串循环左移（20 分）&quot;&gt;&lt;/a&gt;7-31 字符串循环左移（20 分）&lt;/h4&gt;&lt;p&gt;输入一个字符串和一个非负整数N，要求将字符串循环左移N次。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在第1行中给出一个不超过100个字符长度的、以回车结束的非空字符串；第2行给出非负整数N。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;在一行中输出循环左移N次后的字符串。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello World!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;llo World!He&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-30 字符串的冒泡排序（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-30/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-30/</id>
    <published>2018-04-15T13:22:00.000Z</published>
    <updated>2019-06-04T23:09:53.786Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-30-字符串的冒泡排序（20-分）"><a href="#7-30-字符串的冒泡排序（20-分）" class="headerlink" title="7-30 字符串的冒泡排序（20 分）"></a>7-30 字符串的冒泡排序（20 分）</h4><p>我们已经知道了将N个整数按从小到大排序的冒泡排序法。本题要求将此方法用于字符串序列，并对任意给定的$K（\lt N）$，输出扫描完第K遍后的中间结果序列。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第1行中给出N和$K（1\leq K\lt N\leq 100）$，此后N行，每行包含一个长度不超过10的、仅由小写英文字母组成的非空字符串。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出冒泡排序法扫描完第K遍后的中间结果序列，每行包含一个字符串。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">best</span><br><span class="line">cat</span><br><span class="line">east</span><br><span class="line">a</span><br><span class="line">free</span><br><span class="line">day</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">best</span><br><span class="line">a</span><br><span class="line">cat</span><br><span class="line">day</span><br><span class="line">east</span><br><span class="line">free</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m,n;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;m,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> a[<span class="hljs-number">101</span>][<span class="hljs-number">11</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> b[<span class="hljs-number">11</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,&amp;*a[i]);</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m<span class="hljs-number">-1</span>-j;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(a[i],a[i+<span class="hljs-number">1</span>])&gt;<span class="hljs-number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(b,a[i]);</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(a[i],a[i+<span class="hljs-number">1</span>]);</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(a[i+<span class="hljs-number">1</span>],b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">     <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-30-字符串的冒泡排序（20-分）&quot;&gt;&lt;a href=&quot;#7-30-字符串的冒泡排序（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-30 字符串的冒泡排序（20 分）&quot;&gt;&lt;/a&gt;7-30 字符串的冒泡排序（20 分）&lt;/h4&gt;&lt;p&gt;我们已经知道了将N个整数按从小到大排序的冒泡排序法。本题要求将此方法用于字符串序列，并对任意给定的$K（\lt N）$，输出扫描完第K遍后的中间结果序列。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在第1行中给出N和$K（1\leq K\lt N\leq 100）$，此后N行，每行包含一个长度不超过10的、仅由小写英文字母组成的非空字符串。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;输出冒泡排序法扫描完第K遍后的中间结果序列，每行包含一个字符串。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;best&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;east&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;free&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;day&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;best&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;day&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;east&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;free&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-29 删除字符串中的子串（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-29/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-29/</id>
    <published>2018-04-15T13:20:00.000Z</published>
    <updated>2018-04-15T13:21:08.970Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-29-删除字符串中的子串（20-分）"><a href="#7-29-删除字符串中的子串（20-分）" class="headerlink" title="7-29 删除字符串中的子串（20 分）"></a>7-29 删除字符串中的子串（20 分）</h4><p>输入2个字符串S1和S2，要求删除字符串S1中出现的所有子串S2，即结果字符串中不能包含S2。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在2行中分别给出不超过80个字符长度的、以回车结束的2个非空字符串，对应S1和S2。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出删除字符串S1中出现的所有子串S2后的结果字符串。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Tomcat is a male ccatat</span><br><span class="line">cat</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tom is a male</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">char</span> s1[<span class="hljs-number">80</span>]=&#123;<span class="hljs-string">""</span>&#125;;</span><br><span class="line"><span class="hljs-keyword">char</span> s2[<span class="hljs-number">80</span>]=&#123;<span class="hljs-string">""</span>&#125;;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;    </span><br><span class="line"><span class="hljs-keyword">int</span> i,j;</span><br><span class="line"><span class="hljs-keyword">int</span> m=<span class="hljs-number">0</span>;<span class="hljs-comment">//s1共输入m个字符</span></span><br><span class="line"><span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<span class="hljs-comment">//s2共输入n个字符</span></span><br><span class="line"><span class="hljs-keyword">int</span> comp=<span class="hljs-number">0</span>;<span class="hljs-comment">//用于标记是否重复</span></span><br><span class="line"><span class="hljs-keyword">int</span> a,b;</span><br><span class="line"><span class="hljs-keyword">int</span> c;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;s1[i]);</span><br><span class="line"><span class="hljs-keyword">if</span>(s1[i]==<span class="hljs-string">'\n'</span>)&#123;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;;j++)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>,&amp;s2[j]);</span><br><span class="line"><span class="hljs-keyword">if</span>(s2[j]==<span class="hljs-string">'\n'</span>)&#123;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(a=<span class="hljs-number">0</span>;a&lt;m;a++)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(s1[a]==s2[<span class="hljs-number">0</span>])&#123;</span><br><span class="line">comp=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(b=<span class="hljs-number">0</span>;b&lt;=n<span class="hljs-number">-1</span>;b++)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(s1[a+b]!=s2[b])&#123;</span><br><span class="line">comp=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(comp==<span class="hljs-number">1</span>)&#123;</span><br><span class="line">m=m-n;</span><br><span class="line"><span class="hljs-keyword">for</span>(c=a;c&lt;m;c++)&#123;</span><br><span class="line">s1[c]=s1[c+n];</span><br><span class="line">&#125;</span><br><span class="line">a=<span class="hljs-number">-1</span>;<span class="hljs-comment">//此处a=-1而不是0，防止s1数组初始位置开始即与s2重合</span></span><br><span class="line">s1[m]=<span class="hljs-string">'\0'</span>;</span><br><span class="line">comp=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>,s1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-29-删除字符串中的子串（20-分）&quot;&gt;&lt;a href=&quot;#7-29-删除字符串中的子串（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-29 删除字符串中的子串（20 分）&quot;&gt;&lt;/a&gt;7-29 删除字符串中的子串（20 分）&lt;/h4&gt;&lt;p&gt;输入2个字符串S1和S2，要求删除字符串S1中出现的所有子串S2，即结果字符串中不能包含S2。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在2行中分别给出不超过80个字符长度的、以回车结束的2个非空字符串，对应S1和S2。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;在一行中输出删除字符串S1中出现的所有子串S2后的结果字符串。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Tomcat is a male ccatat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Tom is a male&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>7-28 猴子选大王（20 分）</title>
    <link href="http://auhanjie.github.io/2018/04/15/jichu7-28/"/>
    <id>http://auhanjie.github.io/2018/04/15/jichu7-28/</id>
    <published>2018-04-15T13:18:00.000Z</published>
    <updated>2019-06-04T23:10:42.427Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-28-猴子选大王（20-分）"><a href="#7-28-猴子选大王（20-分）" class="headerlink" title="7-28 猴子选大王（20 分）"></a>7-28 猴子选大王（20 分）</h4><p>一群猴子要选新猴王。新猴王的选择方法是：让N只候选猴子围成一圈，从某位置起顺序编号为1~N号。从第1号开始报数，每轮从1报到3，凡报到3的猴子即退出圈子，接着又从紧邻的下一只猴子开始同样的报数。如此不断循环，最后剩下的一只猴子就选为猴王。请问是原来第几号猴子当选猴王？</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给一个正整数$N（\leq 1000）$。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出当选猴王的编号。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> m,i,s=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span> ; i&lt;=m ; i++)</span><br><span class="line">   s = (s+<span class="hljs-number">3</span>) % i ;</span><br><span class="line"> <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,s+<span class="hljs-number">1</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-28-猴子选大王（20-分）&quot;&gt;&lt;a href=&quot;#7-28-猴子选大王（20-分）&quot; class=&quot;headerlink&quot; title=&quot;7-28 猴子选大王（20 分）&quot;&gt;&lt;/a&gt;7-28 猴子选大王（20 分）&lt;/h4&gt;&lt;p&gt;一群猴子要选新猴王。新猴王的选择方法是：让N只候选猴子围成一圈，从某位置起顺序编号为1~N号。从第1号开始报数，每轮从1报到3，凡报到3的猴子即退出圈子，接着又从紧邻的下一只猴子开始同样的报数。如此不断循环，最后剩下的一只猴子就选为猴王。请问是原来第几号猴子当选猴王？&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;输入在一行中给一个正整数$N（\leq 1000）$。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;在一行中输出当选猴王的编号。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/categories/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
    
      <category term="基础编程题目集" scheme="http://auhanjie.github.io/tags/%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9B%AE%E9%9B%86/"/>
    
  </entry>
  
</feed>

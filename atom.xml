<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>auhanjie&#39;s Blog</title>
  
  <subtitle>ad astra per aspera</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://auhanjie.github.io/"/>
  <updated>2018-09-08T12:06:39.960Z</updated>
  <id>http://auhanjie.github.io/</id>
  
  <author>
    <name>auhanjie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>service和serviceImpl的选择</title>
    <link href="http://auhanjie.github.io/2018/09/08/service%E5%92%8CserviceImpl%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://auhanjie.github.io/2018/09/08/service和serviceImpl的选择/</id>
    <published>2018-09-08T01:30:00.000Z</published>
    <updated>2018-09-08T12:06:39.960Z</updated>
    
    <content type="html"><![CDATA[<h1 id="service和serviceImpl的选择"><a href="#service和serviceImpl的选择" class="headerlink" title="service和serviceImpl的选择"></a>service和serviceImpl的选择</h1><p>有些同行公司代码风格使用service层=service接口+serviceImpl实现类；</p><p>而有的同行公司的代码风格是service层=service类；</p><p>网上有人说是因为当项目的业务逻辑简单时，可选择service层=service类；</p><p>当项目的业务复杂时，可选择service层=service接口+serviceImpl实现类；</p><p>至于复杂和简单的度得自己把握；</p><p>今天在看 spring实战（第4版）的时候，看到解释</p><p>如下：</p><p>spring鼓励应用程序的各个层以接口的形式暴露功能，在service层，可以使用service接口+serviceImple实现类，也可以使用service类，但考虑到“接口时实现松耦合的关键”，所以更加推荐使用</p><p>service接口+serviceImple实现类的方式来写service层代码。</p><p>核心是“松耦合”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;service和serviceImpl的选择&quot;&gt;&lt;a href=&quot;#service和serviceImpl的选择&quot; class=&quot;headerlink&quot; title=&quot;service和serviceImpl的选择&quot;&gt;&lt;/a&gt;service和serviceImpl的
      
    
    </summary>
    
      <category term="个人观点" scheme="http://auhanjie.github.io/categories/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
    
      <category term="个人观点" scheme="http://auhanjie.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>longest-substring-without-repeating-characters</title>
    <link href="http://auhanjie.github.io/2018/09/04/leetcode-longest-substring-without-repeating-characters/"/>
    <id>http://auhanjie.github.io/2018/09/04/leetcode-longest-substring-without-repeating-characters/</id>
    <published>2018-09-04T01:26:00.000Z</published>
    <updated>2019-06-03T15:31:08.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Given a string, find the length of the longest substring without   repeating characters. For example, the longest substring without   repeating letters for “abcabcbb” is “abc”, which   the length is 3. For “bbbbb” the longest substring is   “b”, with the length of 1. </p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">unordered_map</span> &lt;<span class="hljs-keyword">char</span>,<span class="hljs-keyword">int</span>&gt; <span class="hljs-built_in">map</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> leftBound=<span class="hljs-number">0</span>,Max=<span class="hljs-number">0</span>;</span><br><span class="line">         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">             <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.find(s[i]) != <span class="hljs-built_in">map</span>.end())</span><br><span class="line">                    leftBound = max(leftBound,<span class="hljs-built_in">map</span>[s[i]]+<span class="hljs-number">1</span>);</span><br><span class="line">                 Max = max(Max,i-leftBound+<span class="hljs-number">1</span>);</span><br><span class="line">                 <span class="hljs-built_in">map</span>[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-comment">//新建一个map进行存储char</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        <span class="hljs-keyword">int</span> leftBound = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="hljs-keyword">char</span>  c = s.charAt(i);</span><br><span class="line">            <span class="hljs-comment">//窗口左边可能为下一个char，或者不变</span></span><br><span class="line">            leftBound = Math.max(leftBound,(map.containsKey(c))? map.get(c)+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);</span><br><span class="line">            max = Math.max(max, i-leftBound+<span class="hljs-number">1</span>);<span class="hljs-comment">//当前窗口长度</span></span><br><span class="line">            map.put(c,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> max;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;Given a string, find the length of the longest substring without   repeating characters. For example, the longest substring without   repeating letters for “abcabcbb” is “abc”, which   the length is 3. For “bbbbb” the longest substring is   “b”, with the length of 1. &lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;string&lt;/span&gt; s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-built_in&quot;&gt;unordered_map&lt;/span&gt; &amp;lt;&lt;span class=&quot;hljs-keyword&quot;&gt;char&lt;/span&gt;,&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; leftBound=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;,Max=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;i&amp;lt;s.length();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;.find(s[i]) != &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;.end())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    leftBound = max(leftBound,&lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;[s[i]]+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 Max = max(Max,i-leftBound+&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 &lt;span class=&quot;hljs-built_in&quot;&gt;map&lt;/span&gt;[s[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; Max;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>median-of-two-sorted-arrays</title>
    <link href="http://auhanjie.github.io/2018/09/03/leetcode-median-of-two-sorted-arrays/"/>
    <id>http://auhanjie.github.io/2018/09/03/leetcode-median-of-two-sorted-arrays/</id>
    <published>2018-09-03T01:00:00.000Z</published>
    <updated>2019-06-03T15:31:16.901Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">链接：https:<span class="hljs-comment">//www.nowcoder.com/questionTerminal/82c11b9392b14f3abfbf257f79a76025</span></span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">kthMin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(n &lt; m)</span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(B, n, A, m, k);</span><br><span class="line">        <span class="hljs-keyword">if</span>(m == <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> B[k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> min(A[<span class="hljs-number">0</span>], B[<span class="hljs-number">0</span>]);</span><br><span class="line">        <span class="hljs-keyword">int</span> pa = min(m, k / <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">int</span> pb = k - pa;</span><br><span class="line">        <span class="hljs-keyword">if</span>(A[pa - <span class="hljs-number">1</span>] == B[pb - <span class="hljs-number">1</span>]) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> A[pa - <span class="hljs-number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[pa - <span class="hljs-number">1</span>] &lt; B[pb - <span class="hljs-number">1</span>])</span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(A + pa, m - pa, B, n, k - pa);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> kthMin(A, m, B + pb, n - pb, k - pb);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(m &lt;= <span class="hljs-number">0</span> &amp;&amp; n &lt;= <span class="hljs-number">0</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> (kthMin(A, m, B, n, (m + n + <span class="hljs-number">2</span>) &gt;&gt; <span class="hljs-number">1</span>) + kthMin(A, m, B, n, (m + n + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> m = A.length, n = B.length;</span><br><span class="line">        <span class="hljs-comment">// 不论总数是奇数还是偶数，以l和r为下标的两数的均值都是medium</span></span><br><span class="line">        <span class="hljs-keyword">int</span> l = (m + n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> r = (m + n + <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">return</span> (getkth(A, <span class="hljs-number">0</span>, B, <span class="hljs-number">0</span>, l) + getkth(A, <span class="hljs-number">0</span>, B, <span class="hljs-number">0</span>, r)) / <span class="hljs-number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getkth</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span> aStart, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span> bStart, <span class="hljs-keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (aStart &gt;= A.length)</span><br><span class="line">            <span class="hljs-keyword">return</span> B[bStart + k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (bStart &gt;= B.length)</span><br><span class="line">            <span class="hljs-keyword">return</span> A[aStart + k - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)</span><br><span class="line">            <span class="hljs-keyword">return</span> Math.min(A[aStart], B[bStart]);</span><br><span class="line">        <span class="hljs-keyword">int</span> aMin = Integer.MAX_VALUE, bMin = Integer.MAX_VALUE;</span><br><span class="line">        <span class="hljs-keyword">if</span> (aStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; A.length)</span><br><span class="line">            aMin = A[aStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];</span><br><span class="line">        <span class="hljs-keyword">if</span> (bStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt; B.length)</span><br><span class="line">            bMin = B[bStart + k / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">if</span> (aMin &lt; bMin)</span><br><span class="line">            <span class="hljs-keyword">return</span> getkth(A, aStart + k / <span class="hljs-number">2</span>, B, bStart, k - k / <span class="hljs-number">2</span>);</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            <span class="hljs-keyword">return</span> getkth(A, aStart, B, bStart + k / <span class="hljs-number">2</span>, k - k / <span class="hljs-number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;链接：https:&lt;span class=&quot;hljs-comment&quot;&gt;//www.nowcoder.com/questionTerminal/82c11b9392b14f3abfbf257f79a76025&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;来源：牛客网&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;kthMin&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; B[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(n &amp;lt; m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(B, n, A, m, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; B[k - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; min(A[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;], B[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; pa = min(m, k / &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; pb = k - pa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] == B[pb - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(A[pa - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] &amp;lt; B[pb - &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(A + pa, m - pa, B, n, k - pa);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; kthMin(A, m, B + pb, n - pb, k - pb);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;findMedianSortedArrays&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; A[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; m, &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; B[], &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(m &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; n &amp;lt;= &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (kthMin(A, m, B, n, (m + n + &lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) + kthMin(A, m, B, n, (m + n + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;)) / &lt;span class=&quot;hljs-number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>add-two-numbers</title>
    <link href="http://auhanjie.github.io/2018/09/02/leetcode-add-two-numbers/"/>
    <id>http://auhanjie.github.io/2018/09/02/leetcode-add-two-numbers/</id>
    <published>2018-09-02T01:00:00.000Z</published>
    <updated>2019-06-03T15:30:58.419Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p><strong>Input:</strong> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br><strong>Output:</strong> 7 -&gt; 0 -&gt; 8</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode *next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function">ListNode *<span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, carry=<span class="hljs-number">0</span>, sum=<span class="hljs-number">0</span>;</span><br><span class="line">        ListNode *h=<span class="hljs-literal">NULL</span>, **t=&amp;h;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">while</span> (l1!=<span class="hljs-literal">NULL</span> || l2!=<span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">            x = getValueAndMoveNext(l1);</span><br><span class="line">            y = getValueAndMoveNext(l2);</span><br><span class="line">            </span><br><span class="line">            sum = carry + x + y;</span><br><span class="line">            </span><br><span class="line">            ListNode *node = <span class="hljs-keyword">new</span> ListNode(sum%<span class="hljs-number">10</span>);</span><br><span class="line">            *t = node;</span><br><span class="line">            t = (&amp;node-&gt;next);</span><br><span class="line">            </span><br><span class="line">            carry = sum/<span class="hljs-number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">            ListNode *node = <span class="hljs-keyword">new</span> ListNode(carry%<span class="hljs-number">10</span>);</span><br><span class="line">            *t = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getValueAndMoveNext</span><span class="hljs-params">(ListNode* &amp;l)</span></span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span> (l != <span class="hljs-literal">NULL</span>)&#123;</span><br><span class="line">            x = l-&gt;val;</span><br><span class="line">            l = l-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><a id="more"></a><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="hljs-comment"> *         val = x;</span></span><br><span class="line"><span class="hljs-comment"> *         next = null;</span></span><br><span class="line"><span class="hljs-comment"> *     &#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (p != <span class="hljs-keyword">null</span> || q != <span class="hljs-keyword">null</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x = (p != <span class="hljs-keyword">null</span>) ? p.val : <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> y = (q != <span class="hljs-keyword">null</span>) ? q.val : <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="hljs-number">10</span>;</span><br><span class="line">        curr.next = <span class="hljs-keyword">new</span> ListNode(sum % <span class="hljs-number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="hljs-keyword">if</span> (p != <span class="hljs-keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="hljs-keyword">if</span> (q != <span class="hljs-keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (carry &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="hljs-keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)&lt;br&gt;&lt;strong&gt;Output:&lt;/strong&gt; 7 -&amp;gt; 0 -&amp;gt; 8&lt;/p&gt;
&lt;h4 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h4&gt;&lt;figure class=&quot;highlight c hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * Definition for singly-linked list.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * struct ListNode &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     int val;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     ListNode *next;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; *     ListNode(int x) : val(x), next(NULL) &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; * &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;ListNode *&lt;span class=&quot;hljs-title&quot;&gt;addTwoNumbers&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ListNode *l1, ListNode *l2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, y=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, carry=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, sum=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListNode *h=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;, **t=&amp;amp;h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; (l1!=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt; || l2!=&lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = getValueAndMoveNext(l1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            y = getValueAndMoveNext(l2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum = carry + x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ListNode *node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ListNode(sum%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *t = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = (&amp;amp;node-&amp;gt;next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            carry = sum/&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (carry &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ListNode *node = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ListNode(carry%&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            *t = node;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; h;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getValueAndMoveNext&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(ListNode* &amp;amp;l)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; x = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (l != &lt;span class=&quot;hljs-literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            x = l-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            l = l-&amp;gt;next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h4&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>two-sum</title>
    <link href="http://auhanjie.github.io/2018/09/01/leetcode-two-sum/"/>
    <id>http://auhanjie.github.io/2018/09/01/leetcode-two-sum/</id>
    <published>2018-09-01T01:26:00.000Z</published>
    <updated>2018-09-17T12:23:34.180Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p><p>You may assume that each input would have exactly one solution.</p><p><strong>Input:</strong> numbers={2, 7, 11, 15}, target=9<br><strong>Output:</strong> index1=1, index2=2</p><h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; twoSum(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;numbers, <span class="hljs-keyword">int</span> target) &#123;</span><br><span class="line">       <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; result;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;numbers.size();i++)&#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (m.find(numbers[i])==m.end() ) &#123; </span><br><span class="line">                m[target - numbers[i]] =i;</span><br><span class="line">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">                result.push_back(m[numbers[i]]+<span class="hljs-number">1</span>);</span><br><span class="line">                result.push_back(i+<span class="hljs-number">1</span>);</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> complement = target - nums[i];</span><br><span class="line">        <span class="hljs-keyword">if</span> (map.containsKey(complement)) &#123;</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; map.get(complement), i &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"No two sum solution"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;Given an array of integers, find two numbers such that they ad
      
    
    </summary>
    
      <category term="leetcode" scheme="http://auhanjie.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://auhanjie.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>java面试</title>
    <link href="http://auhanjie.github.io/2018/08/23/java/"/>
    <id>http://auhanjie.github.io/2018/08/23/java/</id>
    <published>2018-08-23T01:26:00.000Z</published>
    <updated>2018-08-27T23:50:15.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Spring-Bean-的生命周期"><a href="#1、Spring-Bean-的生命周期" class="headerlink" title="1、Spring Bean 的生命周期"></a>1、Spring Bean 的生命周期</h4><ol><li><p>Spring 容器 从 XML 文件中读取 bean 的定义，并实例化 bean。</p></li><li><p>Spring 根据 bean 的定义填充所有的属性。</p></li><li><p>如果 bean 实现了 BeanNameAware 接口， Spring 传递 bean 的 ID 到setBeanName 方法。</p></li><li><p>如果 Bean 实现了 BeanFactoryAware 接口， Spring 传递 beanfactory 给setBeanFactory 方法。</p></li><li><p>如果有任何与bean相关联的BeanPostProcessors ， Spring 会 在postProcesserBeforeInitialization()方法内调用它们。</p></li><li><p>如果 bean 实现 IntializingBean 了，调用它的 afterPropertySet 方法，如果 bean</p><p>声明了初始化方法，调用此初始化方法。</p></li><li><p>如 果 有BeanPostProcessors和bean关 联 ， 这 些bean的postProcessAfterInitialization() 方法将被调用。</p></li><li>如果 bean 实现了 DisposableBean，它将调用 destroy()方法。</li></ol><h4 id="2、反射机制"><a href="#2、反射机制" class="headerlink" title="2、反射机制"></a>2、反射机制</h4><p>Spring 是依赖反射机制的，</p><p>那到底什么是反射机制呢： 反射机制就是利用（dom4j=java 反射机制） userBean ub = Class.forName（com.bean.<em>*</em>）这里是 com 全路径 所以在 Spring 配置文件中 bean 的 id 属性和 class 属性中要写全路径。 </p><p><bean id="adminBean" class="com.service.AdminBean"> <property name="name" value="乐乐"></property> <property name="id" value="1"></property></bean></p><h4 id="3、HashSet底层实现"><a href="#3、HashSet底层实现" class="headerlink" title="3、HashSet底层实现"></a>3、HashSet底层实现</h4><p>对于HashSet而言，它是基于HashMap实现的，HashSet底层使用HashMap来保存所有元素，因此HashSet 的实现比较简单，相关HashSet的操作，基本上都是直接调用底层HashMap的相关方法来完成，在HashSet中，元素都存到HashMap键值对的Key上面，而Value时有一个统一的值<code>private static final Object PRESENT = new Object();。</code></p><h4 id="4、TreeSet-底层源码有看过吗？"><a href="#4、TreeSet-底层源码有看过吗？" class="headerlink" title="4、TreeSet 底层源码有看过吗？"></a>4、TreeSet 底层源码有看过吗？</h4><p>类似于HashMap和HashSet之间的关系，HashSet底层依赖于HashMap实现，TreeSet底层则采用一个NavigableMap来保存TreeSet集合的元素。但实际上，由于NavigableMap只是一个接口，<code>因此底层依然是使用TreeMap来包含Set集合中的所有元素</code>。</p><h4 id="5、重载和重写区别"><a href="#5、重载和重写区别" class="headerlink" title="5、重载和重写区别"></a>5、重载和重写区别</h4><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实 现的是运行时的多态性。 扩展；</p><p>重载(Overloading)</p><p>重载的时候，方法名要一样，但是参数类型和个数不一样，返回值类型可以相同也可以</p><p>不相同。无法以返回型别作为重载函数的区分标准。</p><p>重写（Overriding）</p><p>父类与子类之间的多态性，对父类的函数进行重新定义。如果在子类中定义某方法与其 父类有相同的名称和参数，我们说该方法被重写 (Overriding)。在 Java 中，子类可继承父类 中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法， 而是想作一定的修改，这就需要采用方法的重写。 方法重写又称方法覆盖</p><p>（2）若子类中的方法与父类中的某一方法具有相同的方法名、返回类型和参数表，则 新方法将覆盖原有的方法。 如需父类中原有的方法，可使用 super 关键字，该关键字引用了当前类的父类。</p><p>（3）子类函数的访问修饰权限不能少于父类的；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1、Spring-Bean-的生命周期&quot;&gt;&lt;a href=&quot;#1、Spring-Bean-的生命周期&quot; class=&quot;headerlink&quot; title=&quot;1、Spring Bean 的生命周期&quot;&gt;&lt;/a&gt;1、Spring Bean 的生命周期&lt;/h4&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="java面试" scheme="http://auhanjie.github.io/categories/java%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="java面试" scheme="http://auhanjie.github.io/tags/java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://auhanjie.github.io/2018/08/15/resume/"/>
    <id>http://auhanjie.github.io/2018/08/15/resume/</id>
    <published>2018-08-15T13:37:00.000Z</published>
    <updated>2019-06-03T15:20:24.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><ul><li>手机：1820206<em>*</em></li><li>Email：*@gmail.com</li><li>QQ：42417658*</li></ul><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul><li>黄汉杰/男/1991 </li><li>本科/广州大学计算机系</li><li>工作年限：2年</li><li>技术博客：<a href="http://auhanjie.github.io">http://auhanjie.github.io</a> </li><li>Github：<a href="http://github.com/auhanjie" target="_blank" rel="noopener">http://github.com/auhanjie</a></li><li>期望职位：JAVA开发程序员</li><li>期望薪资：税前月薪7k，特别喜欢的公司可例外</li><li>期望城市：珠海，深圳，广州</li><li>获奖证经历：2016-2017 全国大学英语四级考试514分/2016-2017 获得过校级一等奖学金，并被评为优秀大学生</li></ul><h1 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h1><p>2015/09~2017/06，广州大学 计算机科学与技术专业，获得学士学位<br>2010/09~2013/06，广东科学技术职业学院 软体技术专业，大专毕业</p><h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><p>2018/03~2018/06 Java后台开发工程师 珠海时杰信息科技有限公司 负责后台系统的API开发、实现和维护，负责和前端开发对接。</p><p>2017/09~2017/11 Java后台开发工程师 珠海启裕软件科技有限公司 负责后台系统的API开发、实现和维护，负责和前端开发对接。</p><p>2016/09~2016/10 实习生 广州静远科技开发有限公司 从事FOXTABLE软体开发工作，开发能耗统计分析系统，认真完成项目中的每一项任务。 </p><p>2013/07~2014/07 Java软件开发工程师 易达通网络科技公司 从事Linux环境下的Java软件软件开发工作，工作期间，认真完成项目中的每一项任务。</p><p>2013/02~2013/06 Java Web实习生 珠海联迪软体系统有限公司 从事Java web开发，认真完成项目中的每一项任务。实习期间，参与开发清远市信访前后端系统。</p><h2 id="易达通网络科技公司（-2013年7月-2014年7月-）"><a href="#易达通网络科技公司（-2013年7月-2014年7月-）" class="headerlink" title="易达通网络科技公司（ 2013年7月 ~ 2014年7月 ）"></a>易达通网络科技公司（ 2013年7月 ~ 2014年7月 ）</h2><h3 id="黑龙江教育标引平台"><a href="#黑龙江教育标引平台" class="headerlink" title="黑龙江教育标引平台"></a>黑龙江教育标引平台</h3><p>该项目对书籍进行标引管理，提供标引信息可以获取书籍信息，而且可以通过pdf,equb,txt等自动识别标引进行标注，让教育后台管理人员更加易用的管理。</p><p>此系统整体采用MVC模式的Spring框架，持久层使用的是Mybatis实现，数据源利用的是SpringIoC注入；模型层严格按照JavaBean规范要求；用Spring进行流程的控制，并实现了shiro权限控制管理，采用Redis 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势（查找和操作的时间快）。数据库采用Mysql，适当建立索引机制，进行优化查询。而且采用MongoDB，它包括了一个可以显示数据库中每个操作性能特点的数据库分析器。通过这个分析器你可以找到比预期慢的查询(或写操作);利用这一信息，比如，可以确定是否需要添加索引。</p><h3 id="广州银联的代收付平台系统"><a href="#广州银联的代收付平台系统" class="headerlink" title="广州银联的代收付平台系统"></a>广州银联的代收付平台系统</h3><p>在本项目中本人是高效的执行者角色。本人独立完成了整个项目的数据库索引优化工作，并参与开发与测试等环节中。作为核心程序员，我还完成了系统权限管理、报表查询设计的开发工作。</p><p>此系统整体采用MVC模式的Spring框架，持久层使用的是Spring的HibernateTemplate实现，数据源利用的是SpringIoC注入；模型层严格按照JavaBean规范要求；用Spring进行流程的控制，并实现了国际化，JSP用纯标签进行页面显示。为达到用户名唯一的目的用户注册采用Ajax技术进行后台校验。运用SpringIoC的注入对各层解耦，大大提高了程序的可扩展性，易于维护。本项目采用maven项目管理和构建自动化工具。数据库采用oracle11g开发设计。</p><p>通过拦截器实现了系统权限管理功能，提高安全性。同时通过拦截器记录请求信息，以便进行信息监控和信息统计；检查权限，比如监测请求进入之前是否登录，如果没有可以返回登录页面；监控性能，比如可以通过拦截器记录请求进入处理器的开始时间，在处理后再记录结束时间，由此可以统计该请求的处理时间。Hibernatre的优化，结合数据库，调整批处理的条数，比如batch-size参数是设定每次从数据库中取出的记录条数，一般设置为30,50,100，一般的说法是Oracle 数据库的JDBC驱动的默认值是15，当设置为30或50时，性能就明显提升,如果继续增长，超过100，则性能提升就不明显了。</p><h3 id="SMS-短信收发平台系统"><a href="#SMS-短信收发平台系统" class="headerlink" title="SMS-短信收发平台系统"></a>SMS-短信收发平台系统</h3><p>该系统主要功能是SMS是个集多种短讯业务管理功能于一体的多功能短讯服务运营平台，具有稳定可靠、模组化、开放性、灵活性等特点。Web SMS系统无需安装任何软体，即可轻松管理客户名单及发送短讯，既可加强与客户的联系，可减低市场推广及行政上的资源及成本，是最佳的通讯及宣传工具。2013年，我参与了SMS-短信收发平台系统的开发。</p><p>作为核心程序员之一，我不但完成了发送短信界面设计、权限控制和报表查询的开发工作，更提出了高效的查询下拉列表插件，通过个性化提升了操作员查询体验。 </p><p>该项目对Hibernate进行优化，适当地建立索引，如果数据量很大就少用关联，或者适当地建分区。在适合的的时间点清除缓存，一般会有大量的数据保存在session的一级缓存中，如果缓存太大时就会拖累性能，所以在必要时使用session.Clear()或者session.Erict(Object)清除全部缓存或某个对象。通过优化一对多的映射关系，提高性能，通过设置inverse在多的一方优化查询操作。遇到高并发和大访问量的情况，一、减少http请求（比如Js合并，css合并，图片合并，虽然文件大了，但是减少请求）二、添加异步请求（比如不太重要的东西先不展示，用户需要的时候再放一些事件，jQuery等添加异步请求获取）三、启用游览器缓冲和文件压缩。四、CDN加速（把前端的文件，前端的资源全部放到cdn中，用户就近访问，从而提高访问速度，从一定意义也解决了流量不够用的问题）。</p><h3 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h3><p>easylink好易联支付平台系统<br>LBN易联通支付平台系统<br>SMC商户管理平台系统<br>能耗统计分析系统项⽬<br>清远市信访管理平台系统</p><h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><p>以下均为我熟练使用的技能</p><ul><li>Web开发：JSP/PHP/HTML5</li><li>系统框架：Mybatis/Hibernate/Struts2/StringMvc/String/Shiro/ThinkPHP</li><li>前端框架：Bootstrap/Jquery</li><li>数据库相关：MySQL/Oracle</li><li>版本管理、文档和自动化部署工具：Svn/Git/Maven</li><li>单元测试：Junit4</li></ul><h1 id="个⼈评价"><a href="#个⼈评价" class="headerlink" title="个⼈评价"></a>个⼈评价</h1><p>谦虚、谨慎而富有挑战精神，希望您能给我一个展示自我的机会。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;联系方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;手机：1820206&lt;em&gt;*&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Email：*@gmail.com&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="个人简历" scheme="http://auhanjie.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
    
      <category term="个人简历" scheme="http://auhanjie.github.io/tags/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>7-53 两个有序序列的中位数 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-53/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-53/</id>
    <published>2018-05-06T02:26:00.000Z</published>
    <updated>2019-07-18T02:35:45.996Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-53-两个有序序列的中位数-25-分"><a href="#7-53-两个有序序列的中位数-25-分" class="headerlink" title="7-53 两个有序序列的中位数 (25 分)"></a>7-53 两个有序序列的中位数 (25 分)</h4><p>已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列<em>A</em>0,<em>A</em>1,⋯,<em>A**N</em>−1的中位数指<em>A</em>(<em>N</em>−1)/2的值,即第⌊(<em>N</em>+1)/2⌋个数（<em>A</em>0为第1个数）。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分三行。第一行给出序列的公共长度N（0&lt;N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出两个输入序列的并集序列的中位数。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3 5 7 9</span><br><span class="line">2 3 4 5 6</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">-100 -10 1 1 1 1</span><br><span class="line">-50 0 2 3 4 5</span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="hljs-keyword">int</span> a[<span class="hljs-number">200020</span>];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> n,m;</span><br><span class="line">  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">  <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line">    a[x++]=m;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line">    a[x++]=m;</span><br><span class="line">  &#125;</span><br><span class="line">  f(a,<span class="hljs-number">0</span>,x<span class="hljs-number">-1</span>);</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,a[(<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[],<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">   <span class="hljs-keyword">int</span> x=a[left],i=left,j=right;</span><br><span class="line">   <span class="hljs-keyword">if</span> (i&gt;=j)</span><br><span class="line">   &#123;<span class="hljs-keyword">return</span>;&#125;</span><br><span class="line">   <span class="hljs-keyword">while</span> (i&lt;j)</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;a[j]&gt;=x)</span><br><span class="line">     j--;</span><br><span class="line">     a[i]=a[j];</span><br><span class="line">     <span class="hljs-keyword">while</span> (i&lt;j&amp;&amp;a[i]&lt;=x)</span><br><span class="line">     i++;</span><br><span class="line">     a[j]=a[i];</span><br><span class="line">   &#125;</span><br><span class="line">   a[i]=x;</span><br><span class="line">   f(a,left,i<span class="hljs-number">-1</span>);</span><br><span class="line">   f(a,i+<span class="hljs-number">1</span>,right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-53-两个有序序列的中位数-25-分&quot;&gt;&lt;a href=&quot;#7-53-两个有序序列的中位数-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-53 两个有序序列的中位数 (25 分)&quot;&gt;&lt;/a&gt;7-53 两个有序序列的中位数 (25 分)&lt;/h4&gt;&lt;p&gt;已知有两个等长的非降序序列S1, S2, 设计函数求S1与S2并集的中位数。有序序列&lt;em&gt;A&lt;/em&gt;0,&lt;em&gt;A&lt;/em&gt;1,⋯,&lt;em&gt;A**N&lt;/em&gt;−1的中位数指&lt;em&gt;A&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;−1)/2的值,即第⌊(&lt;em&gt;N&lt;/em&gt;+1)/2⌋个数（&lt;em&gt;A&lt;/em&gt;0为第1个数）。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入分三行。第一行给出序列的公共长度N（0&amp;lt;N≤100000），随后每行输入一个序列的信息，即N个非降序排列的整数。数字用空格间隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;在一行中输出两个输入序列的并集序列的中位数。&lt;/p&gt;
&lt;h3 id=&quot;输入样例1&quot;&gt;&lt;a href=&quot;#输入样例1&quot; class=&quot;headerlink&quot; title=&quot;输入样例1:&quot;&gt;&lt;/a&gt;输入样例1:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 5 7 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 3 4 5 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例1&quot;&gt;&lt;a href=&quot;#输出样例1&quot; class=&quot;headerlink&quot; title=&quot;输出样例1:&quot;&gt;&lt;/a&gt;输出样例1:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例2&quot;&gt;&lt;a href=&quot;#输入样例2&quot; class=&quot;headerlink&quot; title=&quot;输入样例2:&quot;&gt;&lt;/a&gt;输入样例2:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-100 -10 1 1 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-50 0 2 3 4 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例2&quot;&gt;&lt;a href=&quot;#输出样例2&quot; class=&quot;headerlink&quot; title=&quot;输出样例2:&quot;&gt;&lt;/a&gt;输出样例2:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-52 两个有序链表序列的交集 (20 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-52/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-52/</id>
    <published>2018-05-06T02:25:00.000Z</published>
    <updated>2019-07-18T02:30:51.501Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-52-两个有序链表序列的交集-20-分"><a href="#7-52-两个有序链表序列的交集-20-分" class="headerlink" title="7-52 两个有序链表序列的交集 (20 分)"></a>7-52 两个有序链表序列的交集 (20 分)</h4><p>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2的交集新链表S3。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出两个输入序列的交集序列，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出<code>NULL</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 5 -1</span><br><span class="line">2 4 5 8 10 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 5</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; A,B;</span><br><span class="line"><span class="hljs-keyword">int</span> flag=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SameSet</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(i&lt;A.size()&amp;&amp;j&lt;B.size())&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(A[i]&lt;B[j]) i++;</span><br><span class="line"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[i]&gt;B[j]) j++;</span><br><span class="line"><span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>,A[i]);</span><br><span class="line">flag=<span class="hljs-number">1</span>;</span><br><span class="line">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>,A[i]);</span><br><span class="line">&#125;</span><br><span class="line">i++,j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="hljs-keyword">if</span>(num==<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">A.push_back(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;num);</span><br><span class="line"><span class="hljs-keyword">if</span>(num==<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;</span><br><span class="line">B.push_back(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(A.size()==<span class="hljs-number">0</span>||B.size()==<span class="hljs-number">0</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"NULL"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">SameSet();</span><br><span class="line"><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"NULL"</span>);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-52-两个有序链表序列的交集-20-分&quot;&gt;&lt;a href=&quot;#7-52-两个有序链表序列的交集-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-52 两个有序链表序列的交集 (20 分)&quot;&gt;&lt;/a&gt;7-52 两个有序链表序列的交集 (20 分)&lt;/h4&gt;&lt;p&gt;已知两个非降序链表序列S1与S2，设计函数构造出S1与S2的交集新链表S3。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;在一行中输出两个输入序列的交集序列，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出&lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 2 5 -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 4 5 8 10 -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-51 两个有序链表序列的合并 (20 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-51/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-51/</id>
    <published>2018-05-06T02:24:00.000Z</published>
    <updated>2019-07-18T02:29:17.290Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-51-两个有序链表序列的合并-20-分"><a href="#7-51-两个有序链表序列的合并-20-分" class="headerlink" title="7-51 两个有序链表序列的合并 (20 分)"></a>7-51 两个有序链表序列的合并 (20 分)</h4><p>已知两个非降序链表序列S1与S2，设计函数构造出S1与S2合并后的新的非降序链表S3。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出合并后新的非降序链表，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出<code>NULL</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 -1</span><br><span class="line">2 4 6 8 10 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 8 10</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;</span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span></span><br><span class="line">    ElemType Data; <span class="hljs-comment">/* 存储结点数据 */</span></span><br><span class="line">    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">Next</span>;</span> <span class="hljs-comment">/* 指向下一个结点的指针 */</span></span><br><span class="line">&#125;LNode, *LinkList; <span class="hljs-comment">/* 定义单链表类型 */</span></span><br><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;</span><br><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">Merge</span><span class="hljs-params">(LinkList La, LinkList Lb)</span></span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(LinkList L)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    LinkList La, Lb, Lc;</span><br><span class="line">    La = Read();</span><br><span class="line">    Lb = Read();</span><br><span class="line">    Lc = Merge(La, Lb);</span><br><span class="line">    Print(Lc);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">Read</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123; <span class="hljs-comment">/* 读入链表元素，以-1位结束标志*/</span></span><br><span class="line">    LinkList L,rear, temp;</span><br><span class="line">    ElemType data;</span><br><span class="line">    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode)); <span class="hljs-comment">/* 链表头空结点*/</span></span><br><span class="line">    L-&gt;Data = <span class="hljs-number">-1</span>;</span><br><span class="line">    L-&gt;Next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    rear = L;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;data);</span><br><span class="line">    <span class="hljs-keyword">while</span>(data!=<span class="hljs-number">-1</span>)&#123;</span><br><span class="line">        temp = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));</span><br><span class="line">        temp-&gt;Data = data;</span><br><span class="line">        <span class="hljs-comment">//printf("Write:%d\n", temp-&gt;Data);</span></span><br><span class="line">        temp-&gt;Next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">        rear-&gt;Next = temp;</span><br><span class="line">        rear = rear-&gt;Next;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> L; <span class="hljs-comment">/* 返回带头空结点的链表 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">LinkList <span class="hljs-title">Merge</span><span class="hljs-params">(LinkList La, LinkList Lb)</span></span>&#123;</span><br><span class="line">    <span class="hljs-comment">/* 输入两个有序链表的头指针，返回合并后有序链表的头指针*/</span></span><br><span class="line">    LinkList L, pa, pb, rear;</span><br><span class="line">    L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;Data = <span class="hljs-number">-1</span>;</span><br><span class="line">    L-&gt;Next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    rear = L; <span class="hljs-comment">/* 尾插法，rear初始指向头结点*/</span></span><br><span class="line">    pa = La-&gt;Next;</span><br><span class="line">    pb = Lb-&gt;Next;</span><br><span class="line">    <span class="hljs-comment">//printf("Start Merging...\n");</span></span><br><span class="line">    <span class="hljs-keyword">while</span>(pa&amp;&amp;pb)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(pa-&gt;Data &lt; pb-&gt;Data)&#123;</span><br><span class="line">            rear-&gt;Next = pa;</span><br><span class="line">            <span class="hljs-comment">//printf("Get:%d\n", pa-&gt;Data);</span></span><br><span class="line">            pa = pa-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            rear-&gt;Next = pb;</span><br><span class="line">            <span class="hljs-comment">//printf("Get:%d\n", pb-&gt;Data);</span></span><br><span class="line">            pb = pb-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">        rear = rear-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(pa)&#123;</span><br><span class="line">        rear-&gt;Next = pa;</span><br><span class="line">        <span class="hljs-comment">//printf("Get:%d\n", pa-&gt;Data);</span></span><br><span class="line">        pa = pa-&gt;Next;</span><br><span class="line">        rear = rear-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">while</span>(pb)&#123;</span><br><span class="line">        rear-&gt;Next = pb;</span><br><span class="line">        <span class="hljs-comment">//printf("Get:%d\n", pb-&gt;Data);</span></span><br><span class="line">        pb = pb-&gt;Next;</span><br><span class="line">        rear = rear-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    rear-&gt;Next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">    <span class="hljs-comment">/* 不删除原链表的头结点*/</span></span><br><span class="line">    <span class="hljs-keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(LinkList L)</span></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="hljs-keyword">int</span> tag = <span class="hljs-number">1</span>;</span><br><span class="line">    p = L-&gt;Next;</span><br><span class="line">    <span class="hljs-keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(tag)&#123; <span class="hljs-comment">/* 第一个元素前面不带空格*/</span></span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, p-&gt;Data);</span><br><span class="line">            tag = <span class="hljs-number">0</span>;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span>&#123;</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>, p-&gt;Data);</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span>(tag)&#123;</span><br><span class="line">        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"NULL"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-51-两个有序链表序列的合并-20-分&quot;&gt;&lt;a href=&quot;#7-51-两个有序链表序列的合并-20-分&quot; class=&quot;headerlink&quot; title=&quot;7-51 两个有序链表序列的合并 (20 分)&quot;&gt;&lt;/a&gt;7-51 两个有序链表序列的合并 (20 分)&lt;/h4&gt;&lt;p&gt;已知两个非降序链表序列S1与S2，设计函数构造出S1与S2合并后的新的非降序链表S3。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入分两行，分别在每行给出由若干个正整数构成的非降序序列，用−1表示序列的结尾（−1不属于这个序列）。数字用空格间隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;在一行中输出合并后新的非降序链表，数字间用空格分开，结尾不能有多余空格；若新链表为空，输出&lt;code&gt;NULL&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 3 5 -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 4 6 8 10 -1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 2 3 4 5 6 8 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-50 畅通工程之局部最小花费问题 (35 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-50/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-50/</id>
    <published>2018-05-06T02:23:00.000Z</published>
    <updated>2019-07-18T02:29:26.641Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-50-畅通工程之局部最小花费问题-35-分"><a href="#7-50-畅通工程之局部最小花费问题-35-分" class="headerlink" title="7-50 畅通工程之局部最小花费问题 (35 分)"></a>7-50 畅通工程之局部最小花费问题 (35 分)</h4><p>某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了任意两城镇间修建快速路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全地区畅通需要的最低成本。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行给出村庄数目$N$ (1≤$N$≤100)；随后的$N$($N$−1)/2行对应村庄间道路的成本及修建状态：每行给出4个正整数，分别是两个村庄的编号（从1编号到$N$），此两村庄间道路的成本，以及修建状态 — 1表示已建，0表示未建。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出全省畅通需要的最低成本。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 1 1</span><br><span class="line">1 3 4 0</span><br><span class="line">1 4 1 1</span><br><span class="line">2 3 3 0</span><br><span class="line">2 4 2 1</span><br><span class="line">3 4 5 0</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> maxn=<span class="hljs-number">105</span>;</span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> n;</span><br><span class="line"><span class="hljs-keyword">int</span> d[maxn];</span><br><span class="line"><span class="hljs-keyword">int</span> vis[maxn];</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">edge</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> e,sp;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-built_in">vector</span> &lt;edge&gt; ve[maxn];</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span> <span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;maxn;i++)</span><br><span class="line">        d[i]=INF;</span><br><span class="line">    d[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-built_in">memset</span> (vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="hljs-keyword">int</span> maxx=INF;</span><br><span class="line">       <span class="hljs-keyword">int</span> u=<span class="hljs-number">-1</span>;</span><br><span class="line">       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="hljs-keyword">if</span>(!vis[i]&amp;&amp;maxx&gt;d[i])</span><br><span class="line">           &#123;</span><br><span class="line">               maxx=d[i];</span><br><span class="line">               u=i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="hljs-keyword">if</span>(u==<span class="hljs-number">-1</span>)</span><br><span class="line">        <span class="hljs-keyword">break</span>;</span><br><span class="line">       vis[u]=<span class="hljs-number">1</span>;</span><br><span class="line">       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;ve[u].size();i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="hljs-keyword">int</span> v=ve[u][i].e;</span><br><span class="line">           <span class="hljs-keyword">if</span>(!vis[v]&amp;&amp;d[v]&gt;ve[u][i].sp)</span><br><span class="line">           &#123;</span><br><span class="line">               d[v]=ve[u][i].sp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;</span><br><span class="line">   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">        sum+=d[i];</span><br><span class="line">   <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,sum);</span><br><span class="line">   <span class="hljs-keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">    init();</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> x,y,sp,is;</span><br><span class="line">        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;sp,&amp;is);</span><br><span class="line">        edge temp1,temp2;</span><br><span class="line">        temp1.e=y; temp2.e=x;</span><br><span class="line">        <span class="hljs-comment">//判断是否已将建造，根据情况进行修改</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(is)</span><br><span class="line">          temp1.sp=temp2.sp=<span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">          temp1.sp=temp2.sp=sp;</span><br><span class="line">        ve[x].push_back(temp1);</span><br><span class="line">        ve[y].push_back(temp2);</span><br><span class="line">    &#125;</span><br><span class="line">    prim();</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-50-畅通工程之局部最小花费问题-35-分&quot;&gt;&lt;a href=&quot;#7-50-畅通工程之局部最小花费问题-35-分&quot; class=&quot;headerlink&quot; title=&quot;7-50 畅通工程之局部最小花费问题 (35 分)&quot;&gt;&lt;/a&gt;7-50 畅通工程之局部最小花费问题 (35 分)&lt;/h4&gt;&lt;p&gt;某地区经过对城镇交通状况的调查，得到现有城镇间快速道路的统计数据，并提出“畅通工程”的目标：使整个地区任何两个城镇间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到城镇道路统计表，表中列出了任意两城镇间修建快速路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全地区畅通需要的最低成本。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行给出村庄数目$N$ (1≤$N$≤100)；随后的$N$($N$−1)/2行对应村庄间道路的成本及修建状态：每行给出4个正整数，分别是两个村庄的编号（从1编号到$N$），此两村庄间道路的成本，以及修建状态 — 1表示已建，0表示未建。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;输出全省畅通需要的最低成本。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 2 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3 4 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 4 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 3 3 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 4 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 4 5 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-49 打印学生选课清单 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-49/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-49/</id>
    <published>2018-05-06T02:22:00.000Z</published>
    <updated>2019-07-18T02:23:59.268Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-49-打印学生选课清单-25-分"><a href="#7-49-打印学生选课清单-25-分" class="headerlink" title="7-49 打印学生选课清单 (25 分)"></a>7-49 打印学生选课清单 (25 分)</h4><p>假设全校有最多40000名学生和最多2500门课程。现给出每门课的选课学生名单，要求输出每个前来查询的学生的选课清单。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行是两个正整数：N（≤40000），为前来查询课表的学生总数；K（≤2500），为总课程数。此后顺序给出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号（简单起见，课程从1到K编号）和选课学生总数（之间用空格分隔），之后在第二行给出学生名单，相邻两个学生名字用1个空格分隔。学生姓名由3个大写英文字母+1位数字组成。选课信息之后，在一行内给出了N个前来查询课表的学生的名字，相邻两个学生名字用1个空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对每位前来查询课表的学生，首先输出其名字，随后在同一行中输出一个正整数C，代表该生所选的课程门数，随后按递增顺序输出C个课程的编号。相邻数据用1个空格分隔，注意行末不能输出多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">1 4</span><br><span class="line">ANN0 BOB5 JAY9 LOR6</span><br><span class="line">2 7</span><br><span class="line">ANN0 BOB5 FRA8 JAY9 JOE4 KAT3 LOR6</span><br><span class="line">3 1</span><br><span class="line">BOB5</span><br><span class="line">4 7</span><br><span class="line">BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1</span><br><span class="line">5 9</span><br><span class="line">AMY7 ANN0 BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1</span><br><span class="line">ZOE1 ANN0 BOB5 JOE4 JAY9 FRA8 DON2 AMY7 KAT3 LOR6</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ZOE1 2 4 5</span><br><span class="line">ANN0 3 1 2 5</span><br><span class="line">BOB5 5 1 2 3 4 5</span><br><span class="line">JOE4 1 2</span><br><span class="line">JAY9 4 1 2 4 5</span><br><span class="line">FRA8 3 2 4 5</span><br><span class="line">DON2 2 4 5</span><br><span class="line">AMY7 1 5</span><br><span class="line">KAT3 3 2 4 5</span><br><span class="line">LOR6 4 1 2 4 5</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mem(a,b) memset(a,b,sizeof a);</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmp</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> a&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">priority_queue&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;,cmp&gt; pq,tpq;</span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>,priority_queue&lt;<span class="hljs-keyword">int</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;,cmp&gt; &gt; mp;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> n,m;</span><br><span class="line">    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        <span class="hljs-keyword">int</span> id,k;</span><br><span class="line">        <span class="hljs-keyword">char</span> name[<span class="hljs-number">7</span>];</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d"</span>,&amp;id,&amp;k);</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;k;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,name);</span><br><span class="line">                mp[name].push(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>,name);</span><br><span class="line">            tpq=mp[name];</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>,name);</span><br><span class="line">            <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>,tpq.size());</span><br><span class="line">            <span class="hljs-keyword">while</span>(!tpq.empty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-built_in">printf</span>(<span class="hljs-string">" %d"</span>,tpq.top());</span><br><span class="line">                tpq.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-49-打印学生选课清单-25-分&quot;&gt;&lt;a href=&quot;#7-49-打印学生选课清单-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-49 打印学生选课清单 (25 分)&quot;&gt;&lt;/a&gt;7-49 打印学生选课清单 (25 分)&lt;/h4&gt;&lt;p&gt;假设全校有最多40000名学生和最多2500门课程。现给出每门课的选课学生名单，要求输出每个前来查询的学生的选课清单。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行是两个正整数：N（≤40000），为前来查询课表的学生总数；K（≤2500），为总课程数。此后顺序给出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号（简单起见，课程从1到K编号）和选课学生总数（之间用空格分隔），之后在第二行给出学生名单，相邻两个学生名字用1个空格分隔。学生姓名由3个大写英文字母+1位数字组成。选课信息之后，在一行内给出了N个前来查询课表的学生的名字，相邻两个学生名字用1个空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;对每位前来查询课表的学生，首先输出其名字，随后在同一行中输出一个正整数C，代表该生所选的课程门数，随后按递增顺序输出C个课程的编号。相邻数据用1个空格分隔，注意行末不能输出多余空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0 BOB5 JAY9 LOR6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0 BOB5 FRA8 JAY9 JOE4 KAT3 LOR6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AMY7 ANN0 BOB5 DON2 FRA8 JAY9 KAT3 LOR6 ZOE1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZOE1 ANN0 BOB5 JOE4 JAY9 FRA8 DON2 AMY7 KAT3 LOR6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ZOE1 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0 3 1 2 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5 5 1 2 3 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOE4 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAY9 4 1 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FRA8 3 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DON2 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AMY7 1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KAT3 3 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOR6 4 1 2 4 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-48 银行排队问题之单窗口“夹塞”版 (30 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-48/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-48/</id>
    <published>2018-05-06T02:21:00.000Z</published>
    <updated>2019-07-18T02:21:37.521Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-48-银行排队问题之单窗口“夹塞”版-30-分"><a href="#7-48-银行排队问题之单窗口“夹塞”版-30-分" class="headerlink" title="7-48 银行排队问题之单窗口“夹塞”版 (30 分)"></a>7-48 银行排队问题之单窗口“夹塞”版 (30 分)</h4><p>排队“夹塞”是引起大家强烈不满的行为，但是这种现象时常存在。在银行的单窗口排队问题中，假设银行只有1个窗口提供服务，所有顾客按到达时间排成一条长龙。当窗口空闲时，下一位顾客即去该窗口处理事务。此时如果已知第$i$位顾客与排在后面的第$j$位顾客是好朋友，并且愿意替朋友办理事务的话，那么第$i$位顾客的事务处理时间就是自己的事务加朋友的事务所耗时间的总和。在这种情况下，顾客的等待时间就可能被影响。假设所有人到达银行时，若没有空窗口，都会请求排在最前面的朋友帮忙（包括正在窗口接受服务的朋友）；当有不止一位朋友请求某位顾客帮忙时，该顾客会根据自己朋友请求的顺序来依次处理事务。试编写程序模拟这种现象，并计算顾客的平均等待时间。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行是两个整数：1≤$N$≤10000，为顾客总数；0≤$M$≤100，为彼此不相交的朋友圈子个数。若$M$非0，则此后$M$行，每行先给出正整数2≤$L$≤100，代表该圈子里朋友的总数，随后给出该朋友圈里的$L$位朋友的名字。名字由3个大写英文字母组成，名字间用1个空格分隔。最后$N$行给出$N$位顾客的姓名、到达时间$T$和事务处理时间$P$（以分钟为单位），之间用1个空格分隔。简单起见，这里假设顾客信息是按照到达时间先后顺序给出的（有并列时间的按照给出顺序排队），并且假设每个事务最多占用窗口服务60分钟（如果超过则按60分钟计算）。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>按顾客接受服务的顺序输出顾客名字，每个名字占1行。最后一行输出所有顾客的平均等待时间，保留到小数点后1位。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">3 ANN BOB JOE</span><br><span class="line">2 JIM ZOE</span><br><span class="line">JIM 0 20</span><br><span class="line">BOB 0 15</span><br><span class="line">ANN 0 30</span><br><span class="line">AMY 0 2</span><br><span class="line">ZOE 1 61</span><br><span class="line">JOE 3 10</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JIM</span><br><span class="line">ZOE</span><br><span class="line">BOB</span><br><span class="line">ANN</span><br><span class="line">JOE</span><br><span class="line">AMY</span><br><span class="line">75.2</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">customer</span> &#123;</span><span class="hljs-comment">//定义顾客结构体 </span></span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">4</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> arriveTime, processTime;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> N, M;</span><br><span class="line"><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; friendMap, customerId;<span class="hljs-comment">//friendMap存储每个人所属的朋友圈编号，customerId存储每个人名的到达顺序 </span></span><br><span class="line"><span class="hljs-keyword">bool</span> visited[<span class="hljs-number">10000</span>];<span class="hljs-comment">//visited[]数组标记第i个到达的人是否已经被处理过 </span></span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; friends[<span class="hljs-number">100</span>], result;<span class="hljs-comment">//friends[i]存储朋友圈编号为i的朋友名，result存储结果 </span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">fill(visited, visited + N, <span class="hljs-literal">false</span>); </span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> L;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;L);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; L; j++) &#123;</span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">4</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, name);</span><br><span class="line">friendMap[name] = i;</span><br><span class="line">friends[i].push_back(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">customer customers[N];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">4</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %d %d"</span>, name, &amp;customers[i].arriveTime, &amp;customers[i].processTime);</span><br><span class="line"><span class="hljs-keyword">if</span>(customers[i].processTime &gt; <span class="hljs-number">60</span>) &#123;<span class="hljs-comment">//如果单次处理时间超过60，当作60处理 </span></span><br><span class="line">customers[i].processTime = <span class="hljs-number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(customers[i].name, name);</span><br><span class="line">customerId[name] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> totalTime = <span class="hljs-number">0</span>;<span class="hljs-comment">//总等待时间 </span></span><br><span class="line"><span class="hljs-keyword">int</span> window = customers[<span class="hljs-number">0</span>].arriveTime;<span class="hljs-comment">//一开始的窗口时间应该设置为最先到达的顾客的到达时间 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(visited[i]) &#123;<span class="hljs-comment">//如果该顾客已经被处理过了，则跳过本次循环 </span></span><br><span class="line"><span class="hljs-keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(friendMap.find(customers[i].name) == friendMap.end()) &#123;<span class="hljs-comment">//如果该顾客不属于任何一个朋友圈 </span></span><br><span class="line"><span class="hljs-keyword">if</span>(window &gt; customers[i].arriveTime) &#123;<span class="hljs-comment">//如果窗口时间大于顾客的到达时间 </span></span><br><span class="line">totalTime += window - customers[i].arriveTime;<span class="hljs-comment">//总等待时间增加 </span></span><br><span class="line">window += customers[i].processTime;<span class="hljs-comment">//窗口时间加上该顾客的处理时间 </span></span><br><span class="line">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line">window = customers[i].arriveTime + customers[i].processTime;<span class="hljs-comment">//窗口时间更新为顾客的到达时间加上该顾客的处理时间 </span></span><br><span class="line">&#125;</span><br><span class="line">visited[i] = <span class="hljs-literal">true</span>;</span><br><span class="line">result.push_back(customers[i].name);</span><br><span class="line"><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//跳过本次循环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> friendID = friendMap[customers[i].name];</span><br><span class="line">sort(friends[friendID].begin(), friends[friendID].end(), cmp);<span class="hljs-comment">//对该顾客所属朋友圈的朋友按到达顺序进行排序 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; friends[friendID].size(); j++) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> id = customerId[friends[friendID][j]];</span><br><span class="line"><span class="hljs-keyword">if</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; customers[id].arriveTime &gt; window)&#123;<span class="hljs-comment">//如果下一个朋友的在window的空闲时间之前没有到达，则无法插队 </span></span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(visited[id])&#123;</span><br><span class="line"><span class="hljs-keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(window &gt; customers[id].arriveTime) &#123;</span><br><span class="line">totalTime += window - customers[id].arriveTime;</span><br><span class="line">window += customers[id].processTime;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">window = customers[id].arriveTime + customers[id].processTime;</span><br><span class="line">&#125;</span><br><span class="line">visited[id] = <span class="hljs-literal">true</span>;</span><br><span class="line">result.push_back(friends[friendID][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; result.size(); i++) &#123;<span class="hljs-comment">//输出结果 </span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, result[i].c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f\n"</span>, totalTime * <span class="hljs-number">1.0</span> / N);</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s1, <span class="hljs-built_in">string</span> s2)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">return</span> customerId[s1] &lt; customerId[s2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-48-银行排队问题之单窗口“夹塞”版-30-分&quot;&gt;&lt;a href=&quot;#7-48-银行排队问题之单窗口“夹塞”版-30-分&quot; class=&quot;headerlink&quot; title=&quot;7-48 银行排队问题之单窗口“夹塞”版 (30 分)&quot;&gt;&lt;/a&gt;7-48 银行排队问题之单窗口“夹塞”版 (30 分)&lt;/h4&gt;&lt;p&gt;排队“夹塞”是引起大家强烈不满的行为，但是这种现象时常存在。在银行的单窗口排队问题中，假设银行只有1个窗口提供服务，所有顾客按到达时间排成一条长龙。当窗口空闲时，下一位顾客即去该窗口处理事务。此时如果已知第$i$位顾客与排在后面的第$j$位顾客是好朋友，并且愿意替朋友办理事务的话，那么第$i$位顾客的事务处理时间就是自己的事务加朋友的事务所耗时间的总和。在这种情况下，顾客的等待时间就可能被影响。假设所有人到达银行时，若没有空窗口，都会请求排在最前面的朋友帮忙（包括正在窗口接受服务的朋友）；当有不止一位朋友请求某位顾客帮忙时，该顾客会根据自己朋友请求的顺序来依次处理事务。试编写程序模拟这种现象，并计算顾客的平均等待时间。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行是两个整数：1≤$N$≤10000，为顾客总数；0≤$M$≤100，为彼此不相交的朋友圈子个数。若$M$非0，则此后$M$行，每行先给出正整数2≤$L$≤100，代表该圈子里朋友的总数，随后给出该朋友圈里的$L$位朋友的名字。名字由3个大写英文字母组成，名字间用1个空格分隔。最后$N$行给出$N$位顾客的姓名、到达时间$T$和事务处理时间$P$（以分钟为单位），之间用1个空格分隔。简单起见，这里假设顾客信息是按照到达时间先后顺序给出的（有并列时间的按照给出顺序排队），并且假设每个事务最多占用窗口服务60分钟（如果超过则按60分钟计算）。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;按顾客接受服务的顺序输出顾客名字，每个名字占1行。最后一行输出所有顾客的平均等待时间，保留到小数点后1位。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 ANN BOB JOE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 JIM ZOE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JIM 0 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB 0 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN 0 30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AMY 0 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZOE 1 61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOE 3 10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JIM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZOE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AMY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-47 打印选课学生名单 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-47/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-47/</id>
    <published>2018-05-06T02:20:00.000Z</published>
    <updated>2019-07-18T02:19:03.646Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-47-打印选课学生名单-25-分"><a href="#7-47-打印选课学生名单-25-分" class="headerlink" title="7-47 打印选课学生名单 (25 分)"></a>7-47 打印选课学生名单 (25 分)</h4><p>假设全校有最多40000名学生和最多2500门课程。现给出每个学生的选课清单，要求输出每门课的选课学生名单。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行是两个正整数：N（≤40000），为全校学生总数；K（≤2500），为总课程数。此后N行，每行包括一个学生姓名（3个大写英文字母+1位数字）、一个正整数C（≤20）代表该生所选的课程门数、随后是C个课程编号。简单起见，课程从1到K编号。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>顺序输出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号和选课学生总数（之间用空格分隔），之后在第二行按字典序输出学生名单，每个学生名字占一行。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">ZOE1 2 4 5</span><br><span class="line">ANN0 3 5 2 1</span><br><span class="line">BOB5 5 3 4 2 1 5</span><br><span class="line">JOE4 1 2</span><br><span class="line">JAY9 4 1 2 5 4</span><br><span class="line">FRA8 3 4 2 5</span><br><span class="line">DON2 2 4 5</span><br><span class="line">AMY7 1 5</span><br><span class="line">KAT3 3 5 4 2</span><br><span class="line">LOR6 4 2 4 1 5</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1 4</span><br><span class="line">ANN0</span><br><span class="line">BOB5</span><br><span class="line">JAY9</span><br><span class="line">LOR6</span><br><span class="line">2 7</span><br><span class="line">ANN0</span><br><span class="line">BOB5</span><br><span class="line">FRA8</span><br><span class="line">JAY9</span><br><span class="line">JOE4</span><br><span class="line">KAT3</span><br><span class="line">LOR6</span><br><span class="line">3 1</span><br><span class="line">BOB5</span><br><span class="line">4 7</span><br><span class="line">BOB5</span><br><span class="line">DON2</span><br><span class="line">FRA8</span><br><span class="line">JAY9</span><br><span class="line">KAT3</span><br><span class="line">LOR6</span><br><span class="line">ZOE1</span><br><span class="line">5 9</span><br><span class="line">AMY7</span><br><span class="line">ANN0</span><br><span class="line">BOB5</span><br><span class="line">DON2</span><br><span class="line">FRA8</span><br><span class="line">JAY9</span><br><span class="line">KAT3</span><br><span class="line">LOR6</span><br><span class="line">ZOE1</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> N, K;</span><br><span class="line"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; course[<span class="hljs-number">2501</span>];</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;N, &amp;K);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">5</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, name);</span><br><span class="line"><span class="hljs-keyword">int</span> C;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;C);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; C; j++)&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;num);</span><br><span class="line">course[num].push_back(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= K; i++)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, i, course[i].size());</span><br><span class="line">sort(course[i].begin(), course[i].end());</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; course[i].size(); j++)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, course[i][j].c_str());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-47-打印选课学生名单-25-分&quot;&gt;&lt;a href=&quot;#7-47-打印选课学生名单-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-47 打印选课学生名单 (25 分)&quot;&gt;&lt;/a&gt;7-47 打印选课学生名单 (25 分)&lt;/h4&gt;&lt;p&gt;假设全校有最多40000名学生和最多2500门课程。现给出每个学生的选课清单，要求输出每门课的选课学生名单。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行是两个正整数：N（≤40000），为全校学生总数；K（≤2500），为总课程数。此后N行，每行包括一个学生姓名（3个大写英文字母+1位数字）、一个正整数C（≤20）代表该生所选的课程门数、随后是C个课程编号。简单起见，课程从1到K编号。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;顺序输出课程1到K的选课学生名单。格式为：对每一门课，首先在一行中输出课程编号和选课学生总数（之间用空格分隔），之后在第二行按字典序输出学生名单，每个学生名字占一行。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZOE1 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0 3 5 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5 5 3 4 2 1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOE4 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAY9 4 1 2 5 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FRA8 3 4 2 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DON2 2 4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AMY7 1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KAT3 3 5 4 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOR6 4 2 4 1 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAY9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOR6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FRA8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAY9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JOE4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KAT3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOR6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4 7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DON2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FRA8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAY9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KAT3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOR6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZOE1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AMY7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANN0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BOB5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DON2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FRA8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAY9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KAT3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOR6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZOE1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-46 新浪微博热门话题 (30 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-46/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-46/</id>
    <published>2018-05-06T02:19:00.000Z</published>
    <updated>2019-07-18T02:17:09.743Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-46-新浪微博热门话题-30-分"><a href="#7-46-新浪微博热门话题-30-分" class="headerlink" title="7-46 新浪微博热门话题 (30 分)"></a>7-46 新浪微博热门话题 (30 分)</h4><p>新浪微博可以在发言中嵌入“话题”，即将发言中的话题文字写在一对“#”之间，就可以生成话题链接，点击链接可以看到有多少人在跟自己讨论相同或者相似的话题。新浪微博还会随时更新热门话题列表，并将最热门的话题放在醒目的位置推荐大家关注。</p><p>本题目要求实现一个简化的热门话题推荐功能，从大量英文（因为中文分词处理比较麻烦）微博中解析出话题，找出被最多条微博提到的话题。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入说明：输入首先给出一个正整数$N$（≤105），随后$N$行，每行给出一条英文微博，其长度不超过140个字符。任何包含在一对最近的<code>#</code>中的内容均被认为是一个话题，输入保证<code>#</code>成对出现。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>第一行输出被最多条微博提到的话题，第二行输出其被提到的微博条数。如果这样的话题不唯一，则输出按字母序最小的话题，并在第三行输出<code>And k more ...</code>，其中<code>k</code>是另外几条热门话题的条数。输入保证至少存在一条话题。</p><p>注意：两条话题被认为是相同的，如果在去掉所有非英文字母和数字的符号、并忽略大小写区别后，它们是相同的字符串；同时它们有完全相同的分词。输出时除首字母大写外，只保留小写英文字母和数字，并用一个空格分隔原文中的单词。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">This is a #test of topic#.</span><br><span class="line">Another #Test of topic.#</span><br><span class="line">This is a #Hot# #Hot# topic</span><br><span class="line">Another #hot!# #Hot# topic</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hot</span><br><span class="line">2</span><br><span class="line">And 1 more ...</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> N;</span><br><span class="line"><span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt; belongs;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);</span><br><span class="line">getchar();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">char</span> input[<span class="hljs-number">141</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%[^\n]"</span>, input);</span><br><span class="line">getchar();</span><br><span class="line"><span class="hljs-built_in">string</span> str = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(input); j++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(input[j] == <span class="hljs-string">'#'</span>) &#123;</span><br><span class="line">flag++;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">2</span>) &#123;</span><br><span class="line">flag = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">if</span>(str.length() != <span class="hljs-number">0</span>) &#123;</span><br><span class="line">belongs[str].insert(i);</span><br><span class="line">&#125;</span><br><span class="line">str = <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(input[j] &gt;= <span class="hljs-string">'A'</span> &amp;&amp; input[j] &lt;= <span class="hljs-string">'Z'</span>) &#123;<span class="hljs-comment">//将大写字母转变成小写字母 </span></span><br><span class="line">input[j] = input[j] - <span class="hljs-string">'A'</span> + <span class="hljs-string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>((input[j] &gt;= <span class="hljs-string">'a'</span> &amp;&amp; input[j] &lt;= <span class="hljs-string">'z'</span>) || </span><br><span class="line">(input[j] &gt;= <span class="hljs-string">'0'</span> &amp;&amp; input[j] &lt;= <span class="hljs-string">'9'</span>) || input[j] == <span class="hljs-string">' '</span>) &#123; <span class="hljs-comment">//如果是字母或数字或空格，就加入字符串中 </span></span><br><span class="line">str += input[j];</span><br><span class="line">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">strlen</span>(input) &amp;&amp; ((input[j + <span class="hljs-number">1</span>] &gt;= <span class="hljs-string">'a'</span> &amp;&amp; input[j + <span class="hljs-number">1</span>] &lt;= <span class="hljs-string">'z'</span>) || </span><br><span class="line">(input[j + <span class="hljs-number">1</span>] &gt;= <span class="hljs-string">'A'</span> &amp;&amp; input[j + <span class="hljs-number">1</span>] &lt;= <span class="hljs-string">'Z'</span>) || (input[j + <span class="hljs-number">1</span>] &gt;= <span class="hljs-string">'0'</span> &amp;&amp; input[j + <span class="hljs-number">1</span>] &lt;= <span class="hljs-string">'9'</span>)))&#123;</span><br><span class="line"><span class="hljs-comment">//如果下一个字符是字母或数字且下一个字符不超出input的长度范围，则将其替换为空格 </span></span><br><span class="line">str += <span class="hljs-string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> maxTimes = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录最热门的词出现话题数量 </span></span><br><span class="line"><span class="hljs-built_in">string</span> tempResult;<span class="hljs-comment">//记录最热门的词 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt;::iterator it = belongs.begin(); it != belongs.end(); it++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(it-&gt;second.size() &gt; maxTimes) &#123;</span><br><span class="line">tempResult = it-&gt;first;</span><br><span class="line">maxTimes = it-&gt;second.size();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> other = <span class="hljs-number">0</span>;<span class="hljs-comment">//计算与最热门词对应话题数量有着相同数量的话题总数 </span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt;::iterator it = belongs.begin(); it != belongs.end(); it++) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(it-&gt;second.size() == maxTimes) &#123;</span><br><span class="line">other++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">string</span> result = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(tempResult.length() &gt; <span class="hljs-number">0</span> &amp;&amp; tempResult[<span class="hljs-number">0</span>] == <span class="hljs-string">' '</span>)&#123;<span class="hljs-comment">//去除前导空格 </span></span><br><span class="line">tempResult.erase(tempResult.begin());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">while</span>(tempResult.length() &gt; <span class="hljs-number">0</span> &amp;&amp; tempResult[tempResult.length() - <span class="hljs-number">1</span>] == <span class="hljs-string">' '</span>)&#123;<span class="hljs-comment">//去除后导空格 </span></span><br><span class="line">tempResult.erase(tempResult.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tempResult.length(); i++) &#123;<span class="hljs-comment">//去除单词之间多余的空格 </span></span><br><span class="line"><span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; tempResult[i - <span class="hljs-number">1</span>] == <span class="hljs-string">' '</span> &amp;&amp; tempResult[i] == <span class="hljs-string">' '</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">result += tempResult[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> count = belongs[result].size();</span><br><span class="line"><span class="hljs-keyword">if</span>(result[<span class="hljs-number">0</span>] &gt;= <span class="hljs-string">'a'</span> &amp;&amp; result[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">'z'</span>) &#123;</span><br><span class="line">result[<span class="hljs-number">0</span>] = result[<span class="hljs-number">0</span>] - <span class="hljs-string">'a'</span> + <span class="hljs-string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n%d\n"</span>, result.c_str(), count);</span><br><span class="line"><span class="hljs-keyword">if</span>(other &gt; <span class="hljs-number">1</span>) &#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"And %d more ...\n"</span>, other - <span class="hljs-number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-46-新浪微博热门话题-30-分&quot;&gt;&lt;a href=&quot;#7-46-新浪微博热门话题-30-分&quot; class=&quot;headerlink&quot; title=&quot;7-46 新浪微博热门话题 (30 分)&quot;&gt;&lt;/a&gt;7-46 新浪微博热门话题 (30 分)&lt;/h4&gt;&lt;p&gt;新浪微博可以在发言中嵌入“话题”，即将发言中的话题文字写在一对“#”之间，就可以生成话题链接，点击链接可以看到有多少人在跟自己讨论相同或者相似的话题。新浪微博还会随时更新热门话题列表，并将最热门的话题放在醒目的位置推荐大家关注。&lt;/p&gt;
&lt;p&gt;本题目要求实现一个简化的热门话题推荐功能，从大量英文（因为中文分词处理比较麻烦）微博中解析出话题，找出被最多条微博提到的话题。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入说明：输入首先给出一个正整数$N$（≤105），随后$N$行，每行给出一条英文微博，其长度不超过140个字符。任何包含在一对最近的&lt;code&gt;#&lt;/code&gt;中的内容均被认为是一个话题，输入保证&lt;code&gt;#&lt;/code&gt;成对出现。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;第一行输出被最多条微博提到的话题，第二行输出其被提到的微博条数。如果这样的话题不唯一，则输出按字母序最小的话题，并在第三行输出&lt;code&gt;And k more ...&lt;/code&gt;，其中&lt;code&gt;k&lt;/code&gt;是另外几条热门话题的条数。输入保证至少存在一条话题。&lt;/p&gt;
&lt;p&gt;注意：两条话题被认为是相同的，如果在去掉所有非英文字母和数字的符号、并忽略大小写区别后，它们是相同的字符串；同时它们有完全相同的分词。输出时除首字母大写外，只保留小写英文字母和数字，并用一个空格分隔原文中的单词。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is a #test of topic#.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Another #Test of topic.#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is a #Hot# #Hot# topic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Another #hot!# #Hot# topic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;And 1 more ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-45 航空公司VIP客户查询 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-45/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-45/</id>
    <published>2018-05-06T02:18:00.000Z</published>
    <updated>2019-07-18T02:15:13.115Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-45-航空公司VIP客户查询-25-分"><a href="#7-45-航空公司VIP客户查询-25-分" class="headerlink" title="7-45 航空公司VIP客户查询 (25 分)"></a>7-45 航空公司VIP客户查询 (25 分)</h4><p>不少航空公司都会提供优惠的会员服务，当某顾客飞行里程累积达到一定数量后，可以使用里程积分直接兑换奖励机票或奖励升舱等服务。现给定某航空公司全体会员的飞行记录，要求实现根据身份证号码快速查询会员里程积分的功能。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出两个正整数$N$（≤105）和$K$（≤500）。其中$K$是最低里程，即为照顾乘坐短程航班的会员,航空公司还会将航程低于$K$公里的航班也按$K$公里累积。随后$N$行，每行给出一条飞行记录。飞行记录的输入格式为：<code>18位身份证号码（空格）飞行里程</code>。其中身份证号码由17位数字加最后一位校验码组成，校验码的取值范围为0~9和x共11个符号；飞行里程单位为公里，是(0, 15 000]区间内的整数。然后给出一个正整数$M$（≤105），随后给出$M$行查询人的身份证号码。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对每个查询人，给出其当前的里程累积值。如果该人不是会员，则输出<code>No Info</code>。每个查询结果占一行。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">4 500</span><br><span class="line">330106199010080419 499</span><br><span class="line">110108198403100012 15000</span><br><span class="line">120104195510156021 800</span><br><span class="line">330106199010080419 1</span><br><span class="line">4</span><br><span class="line">120104195510156021</span><br><span class="line">110108198403100012</span><br><span class="line">330106199010080419</span><br><span class="line">33010619901008041x</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">800</span><br><span class="line">15000</span><br><span class="line">1000</span><br><span class="line">No Info</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">int</span> N, K;</span><br><span class="line"><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt; members;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-built_in">std</span>::ios::sync_with_stdio(<span class="hljs-literal">false</span>);</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line"><span class="hljs-built_in">string</span> str;</span><br><span class="line"><span class="hljs-keyword">int</span> miles;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; str &gt;&gt; miles;</span><br><span class="line">miles = max(miles, K);</span><br><span class="line">members[str] += miles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> M;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; M;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line"><span class="hljs-built_in">string</span> str;</span><br><span class="line"><span class="hljs-built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-keyword">int</span>&gt;::iterator it = members.find(str);</span><br><span class="line"><span class="hljs-keyword">if</span>(it == members.end())&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"No Info"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">cout</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="hljs-built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-45-航空公司VIP客户查询-25-分&quot;&gt;&lt;a href=&quot;#7-45-航空公司VIP客户查询-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-45 航空公司VIP客户查询 (25 分)&quot;&gt;&lt;/a&gt;7-45 航空公司VIP客户查询 (25 分)&lt;/h4&gt;&lt;p&gt;不少航空公司都会提供优惠的会员服务，当某顾客飞行里程累积达到一定数量后，可以使用里程积分直接兑换奖励机票或奖励升舱等服务。现给定某航空公司全体会员的飞行记录，要求实现根据身份证号码快速查询会员里程积分的功能。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出两个正整数$N$（≤105）和$K$（≤500）。其中$K$是最低里程，即为照顾乘坐短程航班的会员,航空公司还会将航程低于$K$公里的航班也按$K$公里累积。随后$N$行，每行给出一条飞行记录。飞行记录的输入格式为：&lt;code&gt;18位身份证号码（空格）飞行里程&lt;/code&gt;。其中身份证号码由17位数字加最后一位校验码组成，校验码的取值范围为0~9和x共11个符号；飞行里程单位为公里，是(0, 15 000]区间内的整数。然后给出一个正整数$M$（≤105），随后给出$M$行查询人的身份证号码。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;对每个查询人，给出其当前的里程累积值。如果该人不是会员，则输出&lt;code&gt;No Info&lt;/code&gt;。每个查询结果占一行。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4 500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;330106199010080419 499&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110108198403100012 15000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120104195510156021 800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;330106199010080419 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120104195510156021&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110108198403100012&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;330106199010080419&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33010619901008041x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;No Info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-44 基于词频的文件相似度 (30 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-44/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-44/</id>
    <published>2018-05-06T02:17:00.000Z</published>
    <updated>2019-07-18T02:13:27.786Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-44-基于词频的文件相似度-30-分"><a href="#7-44-基于词频的文件相似度-30-分" class="headerlink" title="7-44 基于词频的文件相似度 (30 分)"></a>7-44 基于词频的文件相似度 (30 分)</h4><p>实现一种简单原始的文件相似度计算，即以两文件的公共词汇占总词汇的比例来定义相似度。为简化问题，这里不考虑中文（因为分词太难了），只考虑长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出正整数$N$（≤100），为文件总数。随后按以下格式给出每个文件的内容：首先给出文件正文，最后在一行中只给出一个字符<code>#</code>，表示文件结束。在$N$个文件内容结束之后，给出查询总数$M$（≤104），随后$M$行，每行给出一对文件编号，其间以空格分隔。这里假设文件按给出的顺序从1到$N$编号。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>针对每一条查询，在一行中输出两文件的相似度，即两文件的公共词汇量占两文件总词汇量的百分比，精确到小数点后1位。注意这里的一个“单词”只包括仅由英文字母组成的、长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。单词间以任何非英文字母隔开。另外，大小写不同的同一单词被认为是相同的单词，例如“You”和“you”是同一个单词。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Aaa Bbb Ccc</span><br><span class="line">#</span><br><span class="line">Bbb Ccc Ddd</span><br><span class="line">#</span><br><span class="line">Aaa2 ccc Eee</span><br><span class="line">is at Ddd@Fff</span><br><span class="line">#</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">50.0%</span><br><span class="line">33.3%</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;set&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt; sets[<span class="hljs-number">100</span>];</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> N;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;N);</span><br><span class="line">getchar();</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="hljs-built_in">string</span> str = <span class="hljs-string">""</span>;</span><br><span class="line"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">char</span> c = getchar();</span><br><span class="line"><span class="hljs-keyword">if</span>(c == <span class="hljs-string">'#'</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt;= <span class="hljs-string">'a'</span> &amp;&amp; c &lt;= <span class="hljs-string">'z'</span>) || (c &gt;= <span class="hljs-string">'A'</span> &amp;&amp; c &lt;= <span class="hljs-string">'Z'</span>)) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(c &gt;= <span class="hljs-string">'a'</span> &amp;&amp; c &lt;= <span class="hljs-string">'z'</span>) &#123;</span><br><span class="line">c = c - <span class="hljs-string">'a'</span> + <span class="hljs-string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line">str += c;</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(str.length() &gt;= <span class="hljs-number">3</span>) &#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(str.length() &gt; <span class="hljs-number">10</span>)&#123;</span><br><span class="line">str = str.substr(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">sets[i].insert(str);</span><br><span class="line">&#125;</span><br><span class="line">str = <span class="hljs-string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> M;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;M);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line"><span class="hljs-keyword">int</span> num1, num2;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;num1, &amp;num2);</span><br><span class="line"><span class="hljs-keyword">int</span> common = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">set</span>&lt;<span class="hljs-built_in">string</span>&gt;::iterator it = sets[num1 - <span class="hljs-number">1</span>].begin(); it != sets[num1 - <span class="hljs-number">1</span>].end(); it++)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(sets[num2 - <span class="hljs-number">1</span>].find(*it) != sets[num2 - <span class="hljs-number">1</span>].end())&#123;</span><br><span class="line">common++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> total = sets[num1 - <span class="hljs-number">1</span>].size() + sets[num2 - <span class="hljs-number">1</span>].size() - common;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%.1f%\n"</span>, common * <span class="hljs-number">100.0</span> / total);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-44-基于词频的文件相似度-30-分&quot;&gt;&lt;a href=&quot;#7-44-基于词频的文件相似度-30-分&quot; class=&quot;headerlink&quot; title=&quot;7-44 基于词频的文件相似度 (30 分)&quot;&gt;&lt;/a&gt;7-44 基于词频的文件相似度 (30 分)&lt;/h4&gt;&lt;p&gt;实现一种简单原始的文件相似度计算，即以两文件的公共词汇占总词汇的比例来定义相似度。为简化问题，这里不考虑中文（因为分词太难了），只考虑长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入首先给出正整数$N$（≤100），为文件总数。随后按以下格式给出每个文件的内容：首先给出文件正文，最后在一行中只给出一个字符&lt;code&gt;#&lt;/code&gt;，表示文件结束。在$N$个文件内容结束之后，给出查询总数$M$（≤104），随后$M$行，每行给出一对文件编号，其间以空格分隔。这里假设文件按给出的顺序从1到$N$编号。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;针对每一条查询，在一行中输出两文件的相似度，即两文件的公共词汇量占两文件总词汇量的百分比，精确到小数点后1位。注意这里的一个“单词”只包括仅由英文字母组成的、长度不小于3、且不超过10的英文单词，长度超过10的只考虑前10个字母。单词间以任何非英文字母隔开。另外，大小写不同的同一单词被认为是相同的单词，例如“You”和“you”是同一个单词。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Aaa Bbb Ccc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bbb Ccc Ddd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Aaa2 ccc Eee&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;is at Ddd@Fff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;50.0%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33.3%&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-43 字符串关键字的散列映射 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-43/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-43/</id>
    <published>2018-05-06T02:16:00.000Z</published>
    <updated>2019-07-18T02:11:31.547Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-43-字符串关键字的散列映射-25-分"><a href="#7-43-字符串关键字的散列映射-25-分" class="headerlink" title="7-43 字符串关键字的散列映射 (25 分)"></a>7-43 字符串关键字的散列映射 (25 分)</h4><p>给定一系列由大写英文字母组成的字符串关键字和素数$P$，用移位法定义的散列函数$H$($K$$e$$y$)将关键字$K$$e$$y$中的最后3个字符映射为整数，每个字符占5位；再用除留余数法将整数映射到长度为$P$的散列表中。例如将字符串<code>AZDEG</code>插入长度为1009的散列表中，我们首先将26个大写英文字母顺序映射到整数0~25；再通过移位将其映射为$3×32^2+4×32+6=3206$；然后根据表长得到，即是该字符串的散列映射位置。</p><p>发生冲突时请用平方探测法解决。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入第一行首先给出两个正整数$N$（≤500）和$P$（≥2$N$的最小素数），分别为待插入的关键字总数、以及散列表的长度。第二行给出$N$个字符串关键字，每个长度不超过8位，其间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行内输出每个字符串关键字在散列表中的位置。数字间以空格分隔，但行末尾不得有多余空格。</p><h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1:"></a>输入样例1:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 11</span><br><span class="line">HELLO ANNK ZOE LOLI</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 10 4 0</span><br></pre></td></tr></table></figure><h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2:"></a>输入样例2:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 11</span><br><span class="line">LLO ANNA NNK ZOJ INNK AAA</span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 0 10 9 6 1</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">changeToInt</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> N, P;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;N, &amp;P);</span><br><span class="line"><span class="hljs-keyword">char</span> strs[P][<span class="hljs-number">9</span>];</span><br><span class="line"><span class="hljs-keyword">bool</span> filled[P];</span><br><span class="line">fill(filled, filled + P, <span class="hljs-literal">false</span>);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line"><span class="hljs-keyword">char</span> input[<span class="hljs-number">9</span>];</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, input);</span><br><span class="line"><span class="hljs-keyword">int</span> num = changeToInt(input);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; P; j++)&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> index1 = (num + j * j) % P;</span><br><span class="line"><span class="hljs-keyword">if</span>(!filled[index1] || <span class="hljs-built_in">strcmp</span>(strs[index1], input) == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">filled[index1] = <span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(strs[index1], input);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, index1);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">int</span> index2 = (num - j * j) % P;</span><br><span class="line"><span class="hljs-keyword">while</span>(index2 &lt; <span class="hljs-number">0</span>)&#123;</span><br><span class="line">index2 += P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(!filled[index2] || <span class="hljs-built_in">strcmp</span>(strs[index2], input) == <span class="hljs-number">0</span>)&#123;</span><br><span class="line">filled[index2] = <span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-built_in">strcpy</span>(strs[index2], input);</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, index2);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(i == N - <span class="hljs-number">1</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);</span><br><span class="line">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">changeToInt</span><span class="hljs-params">(<span class="hljs-keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = max(len - <span class="hljs-number">3</span>, <span class="hljs-number">0</span>); i &lt; len; i++) &#123;</span><br><span class="line">result = result * <span class="hljs-number">32</span> + str[i] - <span class="hljs-string">'A'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-43-字符串关键字的散列映射-25-分&quot;&gt;&lt;a href=&quot;#7-43-字符串关键字的散列映射-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-43 字符串关键字的散列映射 (25 分)&quot;&gt;&lt;/a&gt;7-43 字符串关键字的散列映射 (25 分)&lt;/h4&gt;&lt;p&gt;给定一系列由大写英文字母组成的字符串关键字和素数$P$，用移位法定义的散列函数$H$($K$$e$$y$)将关键字$K$$e$$y$中的最后3个字符映射为整数，每个字符占5位；再用除留余数法将整数映射到长度为$P$的散列表中。例如将字符串&lt;code&gt;AZDEG&lt;/code&gt;插入长度为1009的散列表中，我们首先将26个大写英文字母顺序映射到整数0~25；再通过移位将其映射为$3×32^2+4×32+6=3206$；然后根据表长得到，即是该字符串的散列映射位置。&lt;/p&gt;
&lt;p&gt;发生冲突时请用平方探测法解决。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入第一行首先给出两个正整数$N$（≤500）和$P$（≥2$N$的最小素数），分别为待插入的关键字总数、以及散列表的长度。第二行给出$N$个字符串关键字，每个长度不超过8位，其间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;在一行内输出每个字符串关键字在散列表中的位置。数字间以空格分隔，但行末尾不得有多余空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例1&quot;&gt;&lt;a href=&quot;#输入样例1&quot; class=&quot;headerlink&quot; title=&quot;输入样例1:&quot;&gt;&lt;/a&gt;输入样例1:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HELLO ANNK ZOE LOLI&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例1&quot;&gt;&lt;a href=&quot;#输出样例1&quot; class=&quot;headerlink&quot; title=&quot;输出样例1:&quot;&gt;&lt;/a&gt;输出样例1:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 10 4 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输入样例2&quot;&gt;&lt;a href=&quot;#输入样例2&quot; class=&quot;headerlink&quot; title=&quot;输入样例2:&quot;&gt;&lt;/a&gt;输入样例2:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LLO ANNA NNK ZOJ INNK AAA&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例2&quot;&gt;&lt;a href=&quot;#输出样例2&quot; class=&quot;headerlink&quot; title=&quot;输出样例2:&quot;&gt;&lt;/a&gt;输出样例2:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3 0 10 9 6 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-42 整型关键字的散列映射 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-42/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-42/</id>
    <published>2018-05-06T02:15:00.000Z</published>
    <updated>2019-07-18T02:08:38.430Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-42-整型关键字的散列映射-25-分"><a href="#7-42-整型关键字的散列映射-25-分" class="headerlink" title="7-42 整型关键字的散列映射 (25 分)"></a>7-42 整型关键字的散列映射 (25 分)</h4><p>给定一系列整型关键字和素数$P$，用除留余数法定义的散列函数将关键字映射到长度为$P$的散列表中。用线性探测法解决冲突。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入第一行首先给出两个正整数$N$（≤1000）和$P$（≥$N$的最小素数），分别为待插入的关键字总数、以及散列表的长度。第二行给出$N$个整型关键字。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行内输出每个整型关键字在散列表中的位置。数字间以空格分隔，但行末尾不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">24 15 61 88</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 0 1 3</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">思路：用一个<span class="hljs-keyword">bool</span>类型的数组filled标记某个位置是否有值，用一个<span class="hljs-keyword">int</span>型数组nums标记存储数字</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> N, P;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d"</span>, &amp;N, &amp;P);</span><br><span class="line"><span class="hljs-keyword">bool</span> filled[P];</span><br><span class="line">fill(filled, filled + P, <span class="hljs-literal">false</span>);</span><br><span class="line"><span class="hljs-keyword">int</span> nums[P];</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> num;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; P; j++)&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(!filled[(num + j) % P] || nums[(num + j) % P] == num)&#123;</span><br><span class="line">filled[(num + j) % P] = <span class="hljs-literal">true</span>;</span><br><span class="line">nums[(num + j) % P] = num</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d"</span>, (num + j) % P);</span><br><span class="line"><span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">if</span>(i == N - <span class="hljs-number">1</span>)&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>); </span><br><span class="line">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-42-整型关键字的散列映射-25-分&quot;&gt;&lt;a href=&quot;#7-42-整型关键字的散列映射-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-42 整型关键字的散列映射 (25 分)&quot;&gt;&lt;/a&gt;7-42 整型关键字的散列映射 (25 分)&lt;/h4&gt;&lt;p&gt;给定一系列整型关键字和素数$P$，用除留余数法定义的散列函数将关键字映射到长度为$P$的散列表中。用线性探测法解决冲突。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入第一行首先给出两个正整数$N$（≤1000）和$P$（≥$N$的最小素数），分别为待插入的关键字总数、以及散列表的长度。第二行给出$N$个整型关键字。数字间以空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;在一行内输出每个整型关键字在散列表中的位置。数字间以空格分隔，但行末尾不得有多余空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24 15 61 88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4 0 1 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>7-41 PAT排名汇总 (25 分)</title>
    <link href="http://auhanjie.github.io/2018/05/06/shujiujiegou7-41/"/>
    <id>http://auhanjie.github.io/2018/05/06/shujiujiegou7-41/</id>
    <published>2018-05-06T02:14:00.000Z</published>
    <updated>2019-07-18T02:06:11.980Z</updated>
    
    <content type="html"><![CDATA[<h4 id="7-41-PAT排名汇总-25-分"><a href="#7-41-PAT排名汇总-25-分" class="headerlink" title="7-41 PAT排名汇总 (25 分)"></a>7-41 PAT排名汇总 (25 分)</h4><p>计算机程序设计能力考试（Programming Ability Test，简称PAT）旨在通过统一组织的在线考试及自动评测方法客观地评判考生的算法设计与程序设计实现能力，科学的评价计算机程序设计人才，为企业选拔人才提供参考标准（网址<a href="http://www.patest.cn" target="_blank" rel="noopener">http://www.patest.cn）。</a>./)</p><p>每次考试会在若干个不同的考点同时举行，每个考点用局域网，产生本考点的成绩。考试结束后，各个考点的成绩将即刻汇总成一张总的排名表。</p><p>现在就请你写一个程序自动归并各个考点的成绩并生成总排名表。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入的第一行给出一个正整数N（≤100），代表考点总数。随后给出N个考点的成绩，格式为：首先一行给出正整数K（≤300），代表该考点的考生总数；随后K行，每行给出1个考生的信息，包括考号（由13位整数字组成）和得分（为[0,100]区间内的整数），中间用空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>首先在第一行里输出考生总数。随后输出汇总的排名表，每个考生的信息占一行，顺序为：考号、最终排名、考点编号、在该考点的排名。其中考点按输入给出的顺序从1到N编号。考生的输出须按最终排名的非递减顺序输出，获得相同分数的考生应有相同名次，并按考号的递增顺序输出。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">student</span></span></span><br><span class="line"><span class="hljs-class">&#123;</span></span><br><span class="line"><span class="hljs-keyword">char</span> name[<span class="hljs-number">14</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> chengji;</span><br><span class="line"><span class="hljs-keyword">int</span> zuhao;</span><br><span class="line"><span class="hljs-keyword">int</span> znpm;</span><br><span class="line"><span class="hljs-keyword">int</span> ztpm; </span><br><span class="line">&#125;stu[<span class="hljs-number">30003</span>];</span><br><span class="line"> </span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a,student b)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(a.chengji!=b.chengji)</span><br><span class="line"><span class="hljs-keyword">return</span> a.chengji&gt;b.chengji;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(a.name,b.name)&lt;<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line"><span class="hljs-keyword">int</span> i,n,j;<span class="hljs-keyword">int</span> m,t,p;<span class="hljs-keyword">int</span> sum;</span><br><span class="line"><span class="hljs-keyword">int</span> temp,temp1;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);</span><br><span class="line">t=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">int</span> arr[<span class="hljs-number">30003</span>];</span><br><span class="line">arr[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//</span></span><br><span class="line"><span class="hljs-keyword">int</span> q;<span class="hljs-keyword">int</span> sub=<span class="hljs-number">0</span>;</span><br><span class="line">q=<span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;m);</span><br><span class="line">arr[t++]=m;</span><br><span class="line">sub+=m;</span><br><span class="line"><span class="hljs-keyword">for</span>(q;q&lt;sub;q++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %d"</span>,stu[q].name,&amp;stu[q].chengji);</span><br><span class="line">stu[q].zuhao=i;</span><br><span class="line">stu[q].znpm=<span class="hljs-number">0</span>;</span><br><span class="line">stu[q].ztpm=<span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i+<span class="hljs-number">1</span>]+=temp;</span><br><span class="line">temp1=arr[i+<span class="hljs-number">1</span>];</span><br><span class="line">sort(stu+temp,stu+temp1,cmp);</span><br><span class="line">p=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=temp;j&lt;temp1;j++)</span><br><span class="line">&#123;</span><br><span class="line">stu[j].znpm=p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=temp;j&lt;temp1;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(stu[j].chengji==stu[j+<span class="hljs-number">1</span>].chengji)</span><br><span class="line">    stu[j+<span class="hljs-number">1</span>].znpm=stu[j].znpm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(stu,stu+sub,cmp);</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;sub;j++)</span><br><span class="line">stu[j].ztpm=j+<span class="hljs-number">1</span>;</span><br><span class="line">p=<span class="hljs-number">1</span>;</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;sub;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(stu[j].chengji==stu[j+<span class="hljs-number">1</span>].chengji)</span><br><span class="line">    stu[j+<span class="hljs-number">1</span>].ztpm=stu[j].ztpm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,sub);</span><br><span class="line"><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;sub;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="hljs-keyword">if</span>(j!=sub<span class="hljs-number">-1</span>)</span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s %d %d %d\n"</span>,stu[j].name,stu[j].ztpm,stu[j].zuhao,stu[j].znpm);</span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line"><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s %d %d %d"</span>,stu[j].name,stu[j].ztpm,stu[j].zuhao,stu[j].znpm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;7-41-PAT排名汇总-25-分&quot;&gt;&lt;a href=&quot;#7-41-PAT排名汇总-25-分&quot; class=&quot;headerlink&quot; title=&quot;7-41 PAT排名汇总 (25 分)&quot;&gt;&lt;/a&gt;7-41 PAT排名汇总 (25 分)&lt;/h4&gt;&lt;p&gt;计算机程序设计能力考试（Programming Ability Test，简称PAT）旨在通过统一组织的在线考试及自动评测方法客观地评判考生的算法设计与程序设计实现能力，科学的评价计算机程序设计人才，为企业选拔人才提供参考标准（网址&lt;a href=&quot;http://www.patest.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.patest.cn）。&lt;/a&gt;./)&lt;/p&gt;
&lt;p&gt;每次考试会在若干个不同的考点同时举行，每个考点用局域网，产生本考点的成绩。考试结束后，各个考点的成绩将即刻汇总成一张总的排名表。&lt;/p&gt;
&lt;p&gt;现在就请你写一个程序自动归并各个考点的成绩并生成总排名表。&lt;/p&gt;
&lt;h3 id=&quot;输入格式&quot;&gt;&lt;a href=&quot;#输入格式&quot; class=&quot;headerlink&quot; title=&quot;输入格式:&quot;&gt;&lt;/a&gt;输入格式:&lt;/h3&gt;&lt;p&gt;输入的第一行给出一个正整数N（≤100），代表考点总数。随后给出N个考点的成绩，格式为：首先一行给出正整数K（≤300），代表该考点的考生总数；随后K行，每行给出1个考生的信息，包括考号（由13位整数字组成）和得分（为[0,100]区间内的整数），中间用空格分隔。&lt;/p&gt;
&lt;h3 id=&quot;输出格式&quot;&gt;&lt;a href=&quot;#输出格式&quot; class=&quot;headerlink&quot; title=&quot;输出格式:&quot;&gt;&lt;/a&gt;输出格式:&lt;/h3&gt;&lt;p&gt;首先在第一行里输出考生总数。随后输出汇总的排名表，每个考生的信息占一行，顺序为：考号、最终排名、考点编号、在该考点的排名。其中考点按输入给出的顺序从1到N编号。考生的输出须按最终排名的非递减顺序输出，获得相同分数的考生应有相同名次，并按考号的递增顺序输出。&lt;/p&gt;
&lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例:&quot;&gt;&lt;/a&gt;输入样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890001 95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890005 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890003 95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890002 77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890004 85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890013 65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890011 25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890014 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890012 85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;输出样例&quot;&gt;&lt;a href=&quot;#输出样例&quot; class=&quot;headerlink&quot; title=&quot;输出样例:&quot;&gt;&lt;/a&gt;输出样例:&lt;/h3&gt;&lt;figure class=&quot;highlight plain hljs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890005 1 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890014 1 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890001 3 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890003 3 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890004 5 1 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890012 5 2 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890002 7 1 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890013 8 2 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1234567890011 9 2 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
    
      <category term="数据结构与算法题目集（中文）" scheme="http://auhanjie.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E9%9B%86%EF%BC%88%E4%B8%AD%E6%96%87%EF%BC%89/"/>
    
  </entry>
  
</feed>
